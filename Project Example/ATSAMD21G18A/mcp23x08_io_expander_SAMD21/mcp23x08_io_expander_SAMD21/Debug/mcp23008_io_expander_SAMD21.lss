
mcp23008_io_expander_SAMD21.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003dc8  00000000  00000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .got          00000044  00003dc8  00003dc8  00013dc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .got.plt      0000000c  00003e0c  00003e0c  00013e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .relocate     00000064  20000000  00003e18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000128  20000064  00003e7c  00020064  2**2
                  ALLOC
  5 .stack        00002004  2000018c  00003fa4  00020064  2**0
                  ALLOC
  6 .ARM.attributes 0000002a  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
  7 .comment      00000059  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
  8 .debug_info   00025d97  00000000  00000000  000200e7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00003310  00000000  00000000  00045e7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000df83  00000000  00000000  0004918e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00000c28  00000000  00000000  00057111  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000c98  00000000  00000000  00057d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000193cd  00000000  00000000  000589d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000ef55  00000000  00000000  00071d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00087992  00000000  00000000  00080cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00002604  00000000  00000000  00108688  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <exception_table>:
       0:	90 21 00 20 21 01 00 00 1d 01 00 00 1d 01 00 00     .!. !...........
	...
      2c:	1d 01 00 00 00 00 00 00 00 00 00 00 1d 01 00 00     ................
      3c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      4c:	1d 01 00 00 c5 09 00 00 1d 01 00 00 1d 01 00 00     ................
      5c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      6c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      7c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      8c:	1d 01 00 00 1d 01 00 00 00 00 00 00 00 00 00 00     ................
      9c:	1d 01 00 00 1d 01 00 00 1d 01 00 00 1d 01 00 00     ................
      ac:	1d 01 00 00 00 00 00 00                             ........

000000b4 <__do_global_dtors_aux>:
      b4:	b510      	push	{r4, lr}
      b6:	4c06      	ldr	r4, [pc, #24]	; (d0 <__do_global_dtors_aux+0x1c>)
      b8:	7823      	ldrb	r3, [r4, #0]
      ba:	2b00      	cmp	r3, #0
      bc:	d107      	bne.n	ce <__do_global_dtors_aux+0x1a>
      be:	4b05      	ldr	r3, [pc, #20]	; (d4 <__do_global_dtors_aux+0x20>)
      c0:	2b00      	cmp	r3, #0
      c2:	d002      	beq.n	ca <__do_global_dtors_aux+0x16>
      c4:	4804      	ldr	r0, [pc, #16]	; (d8 <__do_global_dtors_aux+0x24>)
      c6:	e000      	b.n	ca <__do_global_dtors_aux+0x16>
      c8:	bf00      	nop
      ca:	2301      	movs	r3, #1
      cc:	7023      	strb	r3, [r4, #0]
      ce:	bd10      	pop	{r4, pc}
      d0:	20000064 	.word	0x20000064
      d4:	00000000 	.word	0x00000000
      d8:	00003dc8 	.word	0x00003dc8

000000dc <frame_dummy>:
      dc:	4b08      	ldr	r3, [pc, #32]	; (100 <frame_dummy+0x24>)
      de:	b510      	push	{r4, lr}
      e0:	2b00      	cmp	r3, #0
      e2:	d003      	beq.n	ec <frame_dummy+0x10>
      e4:	4907      	ldr	r1, [pc, #28]	; (104 <frame_dummy+0x28>)
      e6:	4808      	ldr	r0, [pc, #32]	; (108 <frame_dummy+0x2c>)
      e8:	e000      	b.n	ec <frame_dummy+0x10>
      ea:	bf00      	nop
      ec:	4807      	ldr	r0, [pc, #28]	; (10c <frame_dummy+0x30>)
      ee:	6803      	ldr	r3, [r0, #0]
      f0:	2b00      	cmp	r3, #0
      f2:	d100      	bne.n	f6 <frame_dummy+0x1a>
      f4:	bd10      	pop	{r4, pc}
      f6:	4b06      	ldr	r3, [pc, #24]	; (110 <frame_dummy+0x34>)
      f8:	2b00      	cmp	r3, #0
      fa:	d0fb      	beq.n	f4 <frame_dummy+0x18>
      fc:	4798      	blx	r3
      fe:	e7f9      	b.n	f4 <frame_dummy+0x18>
     100:	00000000 	.word	0x00000000
     104:	20000068 	.word	0x20000068
     108:	00003dc8 	.word	0x00003dc8
     10c:	00003dc8 	.word	0x00003dc8
     110:	00000000 	.word	0x00000000

00000114 <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
     114:	b510      	push	{r4, lr}
	system_init();
     116:	f000 f94d 	bl	3b4 <system_init>
}
     11a:	bd10      	pop	{r4, pc}

0000011c <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
     11c:	e7fe      	b.n	11c <Dummy_Handler>
	...

00000120 <Reset_Handler>:
{
     120:	b5f0      	push	{r4, r5, r6, r7, lr}
     122:	b083      	sub	sp, #12
     124:	4b2c      	ldr	r3, [pc, #176]	; (1d8 <Reset_Handler+0xb8>)
     126:	447b      	add	r3, pc
        if (pSrc != pDest) {
     128:	4a2c      	ldr	r2, [pc, #176]	; (1dc <Reset_Handler+0xbc>)
     12a:	589a      	ldr	r2, [r3, r2]
     12c:	9200      	str	r2, [sp, #0]
     12e:	4a2c      	ldr	r2, [pc, #176]	; (1e0 <Reset_Handler+0xc0>)
     130:	589a      	ldr	r2, [r3, r2]
     132:	9201      	str	r2, [sp, #4]
     134:	9a00      	ldr	r2, [sp, #0]
     136:	9901      	ldr	r1, [sp, #4]
     138:	428a      	cmp	r2, r1
     13a:	d00d      	beq.n	158 <Reset_Handler+0x38>
     13c:	4a28      	ldr	r2, [pc, #160]	; (1e0 <Reset_Handler+0xc0>)
     13e:	589a      	ldr	r2, [r3, r2]
     140:	4926      	ldr	r1, [pc, #152]	; (1dc <Reset_Handler+0xbc>)
     142:	5859      	ldr	r1, [r3, r1]
     144:	e003      	b.n	14e <Reset_Handler+0x2e>
                        *pDest++ = *pSrc++;
     146:	6808      	ldr	r0, [r1, #0]
     148:	6010      	str	r0, [r2, #0]
     14a:	3204      	adds	r2, #4
     14c:	3104      	adds	r1, #4
                for (; pDest < &_erelocate;) {
     14e:	4825      	ldr	r0, [pc, #148]	; (1e4 <Reset_Handler+0xc4>)
     150:	5818      	ldr	r0, [r3, r0]
     152:	9000      	str	r0, [sp, #0]
     154:	4282      	cmp	r2, r0
     156:	d3f6      	bcc.n	146 <Reset_Handler+0x26>
                        *pDest++ = *pSrc++;
     158:	4a23      	ldr	r2, [pc, #140]	; (1e8 <Reset_Handler+0xc8>)
     15a:	589a      	ldr	r2, [r3, r2]
     15c:	e002      	b.n	164 <Reset_Handler+0x44>
                *pDest++ = 0;
     15e:	2100      	movs	r1, #0
     160:	6011      	str	r1, [r2, #0]
     162:	3204      	adds	r2, #4
        for (pDest = &_szero; pDest < &_ezero;) {
     164:	4921      	ldr	r1, [pc, #132]	; (1ec <Reset_Handler+0xcc>)
     166:	5859      	ldr	r1, [r3, r1]
     168:	9100      	str	r1, [sp, #0]
     16a:	428a      	cmp	r2, r1
     16c:	d3f7      	bcc.n	15e <Reset_Handler+0x3e>
        SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
     16e:	4a20      	ldr	r2, [pc, #128]	; (1f0 <Reset_Handler+0xd0>)
     170:	589b      	ldr	r3, [r3, r2]
     172:	9300      	str	r3, [sp, #0]
     174:	23ff      	movs	r3, #255	; 0xff
     176:	9a00      	ldr	r2, [sp, #0]
     178:	439a      	bics	r2, r3
     17a:	0013      	movs	r3, r2
     17c:	4a1d      	ldr	r2, [pc, #116]	; (1f4 <Reset_Handler+0xd4>)
     17e:	6093      	str	r3, [r2, #8]
        SBMATRIX->SFR[SBMATRIX_SLAVE_HMCRAMC0].reg = 2;
     180:	2102      	movs	r1, #2
     182:	2390      	movs	r3, #144	; 0x90
     184:	005b      	lsls	r3, r3, #1
     186:	4a1c      	ldr	r2, [pc, #112]	; (1f8 <Reset_Handler+0xd8>)
     188:	50d1      	str	r1, [r2, r3]
        USB->DEVICE.QOSCTRL.bit.CQOS = 2;
     18a:	4a1c      	ldr	r2, [pc, #112]	; (1fc <Reset_Handler+0xdc>)
     18c:	78d3      	ldrb	r3, [r2, #3]
     18e:	2503      	movs	r5, #3
     190:	43ab      	bics	r3, r5
     192:	2402      	movs	r4, #2
     194:	4323      	orrs	r3, r4
     196:	70d3      	strb	r3, [r2, #3]
        USB->DEVICE.QOSCTRL.bit.DQOS = 2;
     198:	78d3      	ldrb	r3, [r2, #3]
     19a:	270c      	movs	r7, #12
     19c:	43bb      	bics	r3, r7
     19e:	2608      	movs	r6, #8
     1a0:	4333      	orrs	r3, r6
     1a2:	70d3      	strb	r3, [r2, #3]
        DMAC->QOSCTRL.bit.DQOS = 2;
     1a4:	4b16      	ldr	r3, [pc, #88]	; (200 <Reset_Handler+0xe0>)
     1a6:	7b98      	ldrb	r0, [r3, #14]
     1a8:	2230      	movs	r2, #48	; 0x30
     1aa:	4390      	bics	r0, r2
     1ac:	2220      	movs	r2, #32
     1ae:	4310      	orrs	r0, r2
     1b0:	7398      	strb	r0, [r3, #14]
        DMAC->QOSCTRL.bit.FQOS = 2;
     1b2:	7b99      	ldrb	r1, [r3, #14]
     1b4:	43b9      	bics	r1, r7
     1b6:	4331      	orrs	r1, r6
     1b8:	7399      	strb	r1, [r3, #14]
        DMAC->QOSCTRL.bit.WRBQOS = 2;
     1ba:	7b9a      	ldrb	r2, [r3, #14]
     1bc:	43aa      	bics	r2, r5
     1be:	4322      	orrs	r2, r4
     1c0:	739a      	strb	r2, [r3, #14]
        NVMCTRL->CTRLB.bit.MANW = 1;
     1c2:	4a10      	ldr	r2, [pc, #64]	; (204 <Reset_Handler+0xe4>)
     1c4:	6851      	ldr	r1, [r2, #4]
     1c6:	2380      	movs	r3, #128	; 0x80
     1c8:	430b      	orrs	r3, r1
     1ca:	6053      	str	r3, [r2, #4]
        __libc_init_array();
     1cc:	f002 fdcc 	bl	2d68 <__libc_init_array>
        main();
     1d0:	f001 f94c 	bl	146c <main>
     1d4:	e7fe      	b.n	1d4 <Reset_Handler+0xb4>
     1d6:	46c0      	nop			; (mov r8, r8)
     1d8:	00003c9e 	.word	0x00003c9e
     1dc:	00000008 	.word	0x00000008
     1e0:	00000010 	.word	0x00000010
     1e4:	00000038 	.word	0x00000038
     1e8:	0000000c 	.word	0x0000000c
     1ec:	00000028 	.word	0x00000028
     1f0:	00000004 	.word	0x00000004
     1f4:	e000ed00 	.word	0xe000ed00
     1f8:	41007000 	.word	0x41007000
     1fc:	41005000 	.word	0x41005000
     200:	41004800 	.word	0x41004800
     204:	41004000 	.word	0x41004000

00000208 <EXTERNAL_IRQ_0_init>:
struct i2c_m_sync_desc I2C_0;

struct usart_sync_descriptor USART_0;

void EXTERNAL_IRQ_0_init(void)
{
     208:	b570      	push	{r4, r5, r6, lr}
}

static inline void hri_gclk_write_CLKCTRL_reg(const void *const hw, hri_gclk_clkctrl_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->CLKCTRL.reg = data;
     20a:	4a11      	ldr	r2, [pc, #68]	; (250 <EXTERNAL_IRQ_0_init+0x48>)
     20c:	4b11      	ldr	r3, [pc, #68]	; (254 <EXTERNAL_IRQ_0_init+0x4c>)
     20e:	805a      	strh	r2, [r3, #2]
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = ~data;
}

static inline void hri_port_clear_DIR_reg(const void *const hw, uint8_t submodule_index, hri_port_dir_reg_t mask)
{
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     210:	20c0      	movs	r0, #192	; 0xc0
     212:	05c0      	lsls	r0, r0, #23
     214:	2480      	movs	r4, #128	; 0x80
     216:	0464      	lsls	r4, r4, #17
     218:	6044      	str	r4, [r0, #4]

static inline void hri_port_write_WRCONFIG_reg(const void *const hw, uint8_t submodule_index,
                                               hri_port_wrconfig_reg_t data)
{
	PORT_CRITICAL_SECTION_ENTER();
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     21a:	4b0f      	ldr	r3, [pc, #60]	; (258 <EXTERNAL_IRQ_0_init+0x50>)
     21c:	4a0f      	ldr	r2, [pc, #60]	; (25c <EXTERNAL_IRQ_0_init+0x54>)
     21e:	629a      	str	r2, [r3, #40]	; 0x28
     220:	4a0f      	ldr	r2, [pc, #60]	; (260 <EXTERNAL_IRQ_0_init+0x58>)
     222:	629a      	str	r2, [r3, #40]	; 0x28
	((Port *)hw)->Group[submodule_index].DIRCLR.reg = mask;
     224:	6044      	str	r4, [r0, #4]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg |= PORT_PINCFG_PULLEN;
     226:	2158      	movs	r1, #88	; 0x58
     228:	5c5a      	ldrb	r2, [r3, r1]
     22a:	2504      	movs	r5, #4
     22c:	432a      	orrs	r2, r5
     22e:	b2d2      	uxtb	r2, r2
     230:	545a      	strb	r2, [r3, r1]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     232:	6184      	str	r4, [r0, #24]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     234:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     236:	2001      	movs	r0, #1
     238:	4382      	bics	r2, r0
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     23a:	4302      	orrs	r2, r0
     23c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     23e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     240:	391c      	subs	r1, #28
     242:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     244:	200f      	movs	r0, #15
     246:	4382      	bics	r2, r0
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     248:	545a      	strb	r2, [r3, r1]
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_UP);

	gpio_set_pin_function(ext_int, PINMUX_PA24A_EIC_EXTINT12);

	ext_irq_init();
     24a:	f000 f92d 	bl	4a8 <ext_irq_init>
}
     24e:	bd70      	pop	{r4, r5, r6, pc}
     250:	00004005 	.word	0x00004005
     254:	40000c00 	.word	0x40000c00
     258:	41004400 	.word	0x41004400
     25c:	40020000 	.word	0x40020000
     260:	c0020100 	.word	0xc0020100

00000264 <I2C_0_PORT_init>:

void I2C_0_PORT_init(void)
{
     264:	b570      	push	{r4, r5, r6, lr}
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     266:	4b13      	ldr	r3, [pc, #76]	; (2b4 <I2C_0_PORT_init+0x50>)
     268:	2050      	movs	r0, #80	; 0x50
     26a:	5c19      	ldrb	r1, [r3, r0]
     26c:	2204      	movs	r2, #4
     26e:	4391      	bics	r1, r2
     270:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     272:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     274:	2501      	movs	r5, #1
     276:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     278:	2401      	movs	r4, #1
     27a:	4321      	orrs	r1, r4
     27c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     27e:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     280:	3818      	subs	r0, #24
     282:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     284:	260f      	movs	r6, #15
     286:	43b1      	bics	r1, r6
	tmp |= PORT_PMUX_PMUXE(data);
     288:	2602      	movs	r6, #2
     28a:	4331      	orrs	r1, r6
     28c:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     28e:	5419      	strb	r1, [r3, r0]
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg &= ~PORT_PINCFG_PULLEN;
     290:	2151      	movs	r1, #81	; 0x51
     292:	5c5e      	ldrb	r6, [r3, r1]
     294:	4396      	bics	r6, r2
     296:	545e      	strb	r6, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     298:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     29a:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     29c:	4322      	orrs	r2, r4
     29e:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     2a0:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     2a2:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     2a4:	3942      	subs	r1, #66	; 0x42
     2a6:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     2a8:	2120      	movs	r1, #32
     2aa:	430a      	orrs	r2, r1
     2ac:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     2ae:	541a      	strb	r2, [r3, r0]
	                       // <GPIO_PULL_UP"> Pull-up
	                       // <GPIO_PULL_DOWN"> Pull-down
	                       GPIO_PULL_OFF);

	gpio_set_pin_function(PA17, PINMUX_PA17C_SERCOM1_PAD1);
}
     2b0:	bd70      	pop	{r4, r5, r6, pc}
     2b2:	46c0      	nop			; (mov r8, r8)
     2b4:	41004400 	.word	0x41004400

000002b8 <I2C_0_CLOCK_init>:
			peripheral = (uint32_t)_pm_get_apbb_index(module);
			PM->APBBMASK.reg |= 1 << peripheral;
		}
		break;
	case PM_BUS_APBC:
		PM->APBCMASK.reg |= 1 << peripheral;
     2b8:	4a05      	ldr	r2, [pc, #20]	; (2d0 <I2C_0_CLOCK_init+0x18>)
     2ba:	6a13      	ldr	r3, [r2, #32]
     2bc:	2108      	movs	r1, #8
     2be:	430b      	orrs	r3, r1
     2c0:	6213      	str	r3, [r2, #32]
     2c2:	4b04      	ldr	r3, [pc, #16]	; (2d4 <I2C_0_CLOCK_init+0x1c>)
     2c4:	4a04      	ldr	r2, [pc, #16]	; (2d8 <I2C_0_CLOCK_init+0x20>)
     2c6:	805a      	strh	r2, [r3, #2]
     2c8:	4a04      	ldr	r2, [pc, #16]	; (2dc <I2C_0_CLOCK_init+0x24>)
     2ca:	805a      	strh	r2, [r3, #2]
void I2C_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM1);
	_gclk_enable_channel(SERCOM1_GCLK_ID_CORE, CONF_GCLK_SERCOM1_CORE_SRC);
	_gclk_enable_channel(SERCOM1_GCLK_ID_SLOW, CONF_GCLK_SERCOM1_SLOW_SRC);
}
     2cc:	4770      	bx	lr
     2ce:	46c0      	nop			; (mov r8, r8)
     2d0:	40000400 	.word	0x40000400
     2d4:	40000c00 	.word	0x40000c00
     2d8:	00004015 	.word	0x00004015
     2dc:	00004313 	.word	0x00004313

000002e0 <I2C_0_init>:

void I2C_0_init(void)
{
     2e0:	b510      	push	{r4, lr}
     2e2:	b082      	sub	sp, #8
     2e4:	4c07      	ldr	r4, [pc, #28]	; (304 <I2C_0_init+0x24>)
     2e6:	447c      	add	r4, pc
	I2C_0_CLOCK_init();
     2e8:	f7ff ffe6 	bl	2b8 <I2C_0_CLOCK_init>
	i2c_m_sync_init(&I2C_0, SERCOM1);
     2ec:	4b06      	ldr	r3, [pc, #24]	; (308 <I2C_0_init+0x28>)
     2ee:	58e3      	ldr	r3, [r4, r3]
     2f0:	9301      	str	r3, [sp, #4]
     2f2:	4906      	ldr	r1, [pc, #24]	; (30c <I2C_0_init+0x2c>)
     2f4:	0018      	movs	r0, r3
     2f6:	f000 f99b 	bl	630 <i2c_m_sync_init>
	I2C_0_PORT_init();
     2fa:	f7ff ffb3 	bl	264 <I2C_0_PORT_init>
}
     2fe:	b002      	add	sp, #8
     300:	bd10      	pop	{r4, pc}
     302:	46c0      	nop			; (mov r8, r8)
     304:	00003ade 	.word	0x00003ade
     308:	00000040 	.word	0x00000040
     30c:	42000c00 	.word	0x42000c00

00000310 <USART_0_PORT_init>:

void USART_0_PORT_init(void)
{
     310:	b530      	push	{r4, r5, lr}
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     312:	4b0f      	ldr	r3, [pc, #60]	; (350 <USART_0_PORT_init+0x40>)
     314:	22c2      	movs	r2, #194	; 0xc2
     316:	5c99      	ldrb	r1, [r3, r2]
	tmp &= ~PORT_PINCFG_PMUXEN;
     318:	2501      	movs	r5, #1
     31a:	43a9      	bics	r1, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     31c:	2401      	movs	r4, #1
     31e:	4321      	orrs	r1, r4
     320:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     322:	5499      	strb	r1, [r3, r2]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     324:	20b1      	movs	r0, #177	; 0xb1
     326:	5c19      	ldrb	r1, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXE_Msk;
     328:	3ab3      	subs	r2, #179	; 0xb3
     32a:	4391      	bics	r1, r2
	tmp |= PORT_PMUX_PMUXE(data);
     32c:	2203      	movs	r2, #3
     32e:	4311      	orrs	r1, r2
     330:	b2c9      	uxtb	r1, r1
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     332:	5419      	strb	r1, [r3, r0]
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     334:	21c3      	movs	r1, #195	; 0xc3
     336:	5c5a      	ldrb	r2, [r3, r1]
	tmp &= ~PORT_PINCFG_PMUXEN;
     338:	43aa      	bics	r2, r5
	tmp |= value << PORT_PINCFG_PMUXEN_Pos;
     33a:	4322      	orrs	r2, r4
     33c:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     33e:	545a      	strb	r2, [r3, r1]
	tmp = ((Port *)hw)->Group[submodule_index].PMUX[index].reg;
     340:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PMUX_PMUXO_Msk;
     342:	39b4      	subs	r1, #180	; 0xb4
     344:	400a      	ands	r2, r1
	tmp |= PORT_PMUX_PMUXO(data);
     346:	2130      	movs	r1, #48	; 0x30
     348:	430a      	orrs	r2, r1
     34a:	b2d2      	uxtb	r2, r2
	((Port *)hw)->Group[submodule_index].PMUX[index].reg = tmp;
     34c:	541a      	strb	r2, [r3, r0]

	gpio_set_pin_function(PB02, PINMUX_PB02D_SERCOM5_PAD0);

	gpio_set_pin_function(PB03, PINMUX_PB03D_SERCOM5_PAD1);
}
     34e:	bd30      	pop	{r4, r5, pc}
     350:	41004400 	.word	0x41004400

00000354 <USART_0_CLOCK_init>:
     354:	4a04      	ldr	r2, [pc, #16]	; (368 <USART_0_CLOCK_init+0x14>)
     356:	6a13      	ldr	r3, [r2, #32]
     358:	2180      	movs	r1, #128	; 0x80
     35a:	430b      	orrs	r3, r1
     35c:	6213      	str	r3, [r2, #32]
     35e:	4a03      	ldr	r2, [pc, #12]	; (36c <USART_0_CLOCK_init+0x18>)
     360:	4b03      	ldr	r3, [pc, #12]	; (370 <USART_0_CLOCK_init+0x1c>)
     362:	805a      	strh	r2, [r3, #2]

void USART_0_CLOCK_init(void)
{
	_pm_enable_bus_clock(PM_BUS_APBC, SERCOM5);
	_gclk_enable_channel(SERCOM5_GCLK_ID_CORE, CONF_GCLK_SERCOM5_CORE_SRC);
}
     364:	4770      	bx	lr
     366:	46c0      	nop			; (mov r8, r8)
     368:	40000400 	.word	0x40000400
     36c:	00004019 	.word	0x00004019
     370:	40000c00 	.word	0x40000c00

00000374 <USART_0_init>:

void USART_0_init(void)
{
     374:	b510      	push	{r4, lr}
     376:	b082      	sub	sp, #8
     378:	4c07      	ldr	r4, [pc, #28]	; (398 <USART_0_init+0x24>)
     37a:	447c      	add	r4, pc
	USART_0_CLOCK_init();
     37c:	f7ff ffea 	bl	354 <USART_0_CLOCK_init>
	usart_sync_init(&USART_0, SERCOM5, (void *)NULL);
     380:	4b06      	ldr	r3, [pc, #24]	; (39c <USART_0_init+0x28>)
     382:	58e3      	ldr	r3, [r4, r3]
     384:	9301      	str	r3, [sp, #4]
     386:	2200      	movs	r2, #0
     388:	4905      	ldr	r1, [pc, #20]	; (3a0 <USART_0_init+0x2c>)
     38a:	0018      	movs	r0, r3
     38c:	f000 fa1a 	bl	7c4 <usart_sync_init>
	USART_0_PORT_init();
     390:	f7ff ffbe 	bl	310 <USART_0_PORT_init>
}
     394:	b002      	add	sp, #8
     396:	bd10      	pop	{r4, pc}
     398:	00003a4a 	.word	0x00003a4a
     39c:	00000024 	.word	0x00000024
     3a0:	42001c00 	.word	0x42001c00

000003a4 <delay_driver_init>:

void delay_driver_init(void)
{
     3a4:	b510      	push	{r4, lr}
	delay_init(SysTick);
     3a6:	4802      	ldr	r0, [pc, #8]	; (3b0 <delay_driver_init+0xc>)
     3a8:	f000 f840 	bl	42c <delay_init>
}
     3ac:	bd10      	pop	{r4, pc}
     3ae:	46c0      	nop			; (mov r8, r8)
     3b0:	e000e010 	.word	0xe000e010

000003b4 <system_init>:

void system_init(void)
{
     3b4:	b570      	push	{r4, r5, r6, lr}
 * Currently the following initialization functions are supported:
 *  - System clock initialization
 */
static inline void init_mcu(void)
{
	_init_chip();
     3b6:	f000 fa7f 	bl	8b8 <_init_chip>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3ba:	22c0      	movs	r2, #192	; 0xc0
     3bc:	05d2      	lsls	r2, r2, #23
     3be:	2308      	movs	r3, #8
     3c0:	6193      	str	r3, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3c2:	6093      	str	r3, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3c4:	4b15      	ldr	r3, [pc, #84]	; (41c <system_init+0x68>)
     3c6:	4916      	ldr	r1, [pc, #88]	; (420 <system_init+0x6c>)
     3c8:	6299      	str	r1, [r3, #40]	; 0x28
     3ca:	21c0      	movs	r1, #192	; 0xc0
     3cc:	0609      	lsls	r1, r1, #24
     3ce:	6299      	str	r1, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3d0:	2443      	movs	r4, #67	; 0x43
     3d2:	5d18      	ldrb	r0, [r3, r4]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3d4:	2101      	movs	r1, #1
     3d6:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3d8:	5518      	strb	r0, [r3, r4]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3da:	2080      	movs	r0, #128	; 0x80
     3dc:	0340      	lsls	r0, r0, #13
     3de:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3e0:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3e2:	2480      	movs	r4, #128	; 0x80
     3e4:	05e4      	lsls	r4, r4, #23
     3e6:	629c      	str	r4, [r3, #40]	; 0x28
     3e8:	480e      	ldr	r0, [pc, #56]	; (424 <system_init+0x70>)
     3ea:	6298      	str	r0, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     3ec:	2554      	movs	r5, #84	; 0x54
     3ee:	5d58      	ldrb	r0, [r3, r5]
	tmp &= ~PORT_PINCFG_PMUXEN;
     3f0:	4388      	bics	r0, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     3f2:	5558      	strb	r0, [r3, r5]
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
     3f4:	2080      	movs	r0, #128	; 0x80
     3f6:	0480      	lsls	r0, r0, #18
     3f8:	6190      	str	r0, [r2, #24]
	((Port *)hw)->Group[submodule_index].DIRSET.reg = mask;
     3fa:	6090      	str	r0, [r2, #8]
	((Port *)hw)->Group[submodule_index].WRCONFIG.reg = data;
     3fc:	629c      	str	r4, [r3, #40]	; 0x28
     3fe:	4a0a      	ldr	r2, [pc, #40]	; (428 <system_init+0x74>)
     400:	629a      	str	r2, [r3, #40]	; 0x28
	tmp = ((Port *)hw)->Group[submodule_index].PINCFG[index].reg;
     402:	2059      	movs	r0, #89	; 0x59
     404:	5c1a      	ldrb	r2, [r3, r0]
	tmp &= ~PORT_PINCFG_PMUXEN;
     406:	438a      	bics	r2, r1
	((Port *)hw)->Group[submodule_index].PINCFG[index].reg = tmp;
     408:	541a      	strb	r2, [r3, r0]
	// Set pin direction to output
	gpio_set_pin_direction(user_led_blue, GPIO_DIRECTION_OUT);

	gpio_set_pin_function(user_led_blue, GPIO_PIN_FUNCTION_OFF);

	EXTERNAL_IRQ_0_init();
     40a:	f7ff fefd 	bl	208 <EXTERNAL_IRQ_0_init>

	I2C_0_init();
     40e:	f7ff ff67 	bl	2e0 <I2C_0_init>

	USART_0_init();
     412:	f7ff ffaf 	bl	374 <USART_0_init>

	delay_driver_init();
     416:	f7ff ffc5 	bl	3a4 <delay_driver_init>
}
     41a:	bd70      	pop	{r4, r5, r6, pc}
     41c:	41004400 	.word	0x41004400
     420:	40000008 	.word	0x40000008
     424:	c0000010 	.word	0xc0000010
     428:	c0000200 	.word	0xc0000200

0000042c <delay_init>:

/**
 * \brief Initialize Delay driver
 */
void delay_init(void *const hw)
{
     42c:	b510      	push	{r4, lr}
	_delay_init(hardware = hw);
     42e:	4b03      	ldr	r3, [pc, #12]	; (43c <delay_init+0x10>)
     430:	447b      	add	r3, pc
     432:	6018      	str	r0, [r3, #0]
     434:	f000 fff6 	bl	1424 <_delay_init>
}
     438:	bd10      	pop	{r4, pc}
     43a:	46c0      	nop			; (mov r8, r8)
     43c:	1ffffc4c 	.word	0x1ffffc4c

00000440 <delay_ms>:

/**
 * \brief Perform delay in ms
 */
void delay_ms(const uint16_t ms)
{
     440:	b510      	push	{r4, lr}
	_delay_cycles(hardware, _get_cycles_for_ms(ms));
     442:	4b05      	ldr	r3, [pc, #20]	; (458 <delay_ms+0x18>)
     444:	447b      	add	r3, pc
     446:	681c      	ldr	r4, [r3, #0]
     448:	f000 fa30 	bl	8ac <_get_cycles_for_ms>
     44c:	0001      	movs	r1, r0
     44e:	0020      	movs	r0, r4
     450:	f000 ffec 	bl	142c <_delay_cycles>
}
     454:	bd10      	pop	{r4, pc}
     456:	46c0      	nop			; (mov r8, r8)
     458:	1ffffc38 	.word	0x1ffffc38

0000045c <process_ext_irq>:
 * \brief Interrupt processing routine
 *
 * \param[in] pin The pin which triggered the interrupt
 */
static void process_ext_irq(const uint32_t pin)
{
     45c:	b570      	push	{r4, r5, r6, lr}
	uint8_t lower = 0, middle, upper = EXT_IRQ_AMOUNT;
     45e:	2501      	movs	r5, #1
     460:	2400      	movs	r4, #0

	while (upper >= lower) {
     462:	e008      	b.n	476 <process_ext_irq+0x1a>
		if (middle >= EXT_IRQ_AMOUNT) {
			return;
		}

		if (ext_irqs[middle].pin == pin) {
			if (ext_irqs[middle].cb) {
     464:	4a0e      	ldr	r2, [pc, #56]	; (4a0 <process_ext_irq+0x44>)
     466:	447a      	add	r2, pc
     468:	58b3      	ldr	r3, [r6, r2]
     46a:	2b00      	cmp	r3, #0
     46c:	d000      	beq.n	470 <process_ext_irq+0x14>
				ext_irqs[middle].cb();
     46e:	4798      	blx	r3
			lower = middle + 1;
		} else {
			upper = middle - 1;
		}
	}
}
     470:	bd70      	pop	{r4, r5, r6, pc}
			upper = middle - 1;
     472:	3a01      	subs	r2, #1
     474:	b2d5      	uxtb	r5, r2
	while (upper >= lower) {
     476:	42ac      	cmp	r4, r5
     478:	d8fa      	bhi.n	470 <process_ext_irq+0x14>
		middle = (upper + lower) >> 1;
     47a:	192b      	adds	r3, r5, r4
     47c:	105b      	asrs	r3, r3, #1
     47e:	b2da      	uxtb	r2, r3
		if (middle >= EXT_IRQ_AMOUNT) {
     480:	2a00      	cmp	r2, #0
     482:	d1f5      	bne.n	470 <process_ext_irq+0x14>
     484:	21ff      	movs	r1, #255	; 0xff
     486:	400b      	ands	r3, r1
		if (ext_irqs[middle].pin == pin) {
     488:	00de      	lsls	r6, r3, #3
     48a:	4906      	ldr	r1, [pc, #24]	; (4a4 <process_ext_irq+0x48>)
     48c:	4479      	add	r1, pc
     48e:	1989      	adds	r1, r1, r6
     490:	6849      	ldr	r1, [r1, #4]
     492:	4281      	cmp	r1, r0
     494:	d0e6      	beq.n	464 <process_ext_irq+0x8>
		if (ext_irqs[middle].pin < pin) {
     496:	d2ec      	bcs.n	472 <process_ext_irq+0x16>
			lower = middle + 1;
     498:	3201      	adds	r2, #1
     49a:	b2d4      	uxtb	r4, r2
     49c:	e7eb      	b.n	476 <process_ext_irq+0x1a>
     49e:	46c0      	nop			; (mov r8, r8)
     4a0:	1ffffc1a 	.word	0x1ffffc1a
     4a4:	1ffffbf4 	.word	0x1ffffbf4

000004a8 <ext_irq_init>:
{
     4a8:	b510      	push	{r4, lr}
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     4aa:	2300      	movs	r3, #0
     4ac:	2b00      	cmp	r3, #0
     4ae:	d004      	beq.n	4ba <ext_irq_init+0x12>
	return _ext_irq_init(process_ext_irq);
     4b0:	4808      	ldr	r0, [pc, #32]	; (4d4 <ext_irq_init+0x2c>)
     4b2:	4478      	add	r0, pc
     4b4:	f000 fa14 	bl	8e0 <_ext_irq_init>
}
     4b8:	bd10      	pop	{r4, pc}
		ext_irqs[i].pin = 0xFFFFFFFF;
     4ba:	4a07      	ldr	r2, [pc, #28]	; (4d8 <ext_irq_init+0x30>)
     4bc:	447a      	add	r2, pc
     4be:	00d9      	lsls	r1, r3, #3
     4c0:	1850      	adds	r0, r2, r1
     4c2:	2401      	movs	r4, #1
     4c4:	4264      	negs	r4, r4
     4c6:	6044      	str	r4, [r0, #4]
		ext_irqs[i].cb  = NULL;
     4c8:	2000      	movs	r0, #0
     4ca:	5088      	str	r0, [r1, r2]
	for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     4cc:	3301      	adds	r3, #1
     4ce:	b29b      	uxth	r3, r3
     4d0:	e7ec      	b.n	4ac <ext_irq_init+0x4>
     4d2:	46c0      	nop			; (mov r8, r8)
     4d4:	ffffffa7 	.word	0xffffffa7
     4d8:	1ffffbc4 	.word	0x1ffffbc4

000004dc <ext_irq_register>:
{
     4dc:	b5f0      	push	{r4, r5, r6, r7, lr}
     4de:	46c6      	mov	lr, r8
     4e0:	b500      	push	{lr}
     4e2:	b084      	sub	sp, #16
     4e4:	9001      	str	r0, [sp, #4]
	uint8_t i = 0, j = 0;
     4e6:	2300      	movs	r3, #0
	for (; i < EXT_IRQ_AMOUNT; i++) {
     4e8:	2b00      	cmp	r3, #0
     4ea:	d011      	beq.n	510 <ext_irq_register+0x34>
	bool    found = false;
     4ec:	2300      	movs	r3, #0
     4ee:	4698      	mov	r8, r3
	if (NULL == cb) {
     4f0:	2900      	cmp	r1, #0
     4f2:	d01e      	beq.n	532 <ext_irq_register+0x56>
	if (!found) {
     4f4:	4643      	mov	r3, r8
     4f6:	2b00      	cmp	r3, #0
     4f8:	d14c      	bne.n	594 <ext_irq_register+0xb8>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     4fa:	2b00      	cmp	r3, #0
     4fc:	d129      	bne.n	552 <ext_irq_register+0x76>
			if (NULL == ext_irqs[i].cb) {
     4fe:	00da      	lsls	r2, r3, #3
     500:	4c2d      	ldr	r4, [pc, #180]	; (5b8 <ext_irq_register+0xdc>)
     502:	447c      	add	r4, pc
     504:	5912      	ldr	r2, [r2, r4]
     506:	2a00      	cmp	r2, #0
     508:	d01a      	beq.n	540 <ext_irq_register+0x64>
		for (i = 0; i < EXT_IRQ_AMOUNT; i++) {
     50a:	3301      	adds	r3, #1
     50c:	b2db      	uxtb	r3, r3
     50e:	e7f4      	b.n	4fa <ext_irq_register+0x1e>
		if (ext_irqs[i].pin == pin) {
     510:	00dc      	lsls	r4, r3, #3
     512:	4a2a      	ldr	r2, [pc, #168]	; (5bc <ext_irq_register+0xe0>)
     514:	447a      	add	r2, pc
     516:	1912      	adds	r2, r2, r4
     518:	6852      	ldr	r2, [r2, #4]
     51a:	9801      	ldr	r0, [sp, #4]
     51c:	4282      	cmp	r2, r0
     51e:	d002      	beq.n	526 <ext_irq_register+0x4a>
	for (; i < EXT_IRQ_AMOUNT; i++) {
     520:	3301      	adds	r3, #1
     522:	b2db      	uxtb	r3, r3
     524:	e7e0      	b.n	4e8 <ext_irq_register+0xc>
			ext_irqs[i].cb = cb;
     526:	4b26      	ldr	r3, [pc, #152]	; (5c0 <ext_irq_register+0xe4>)
     528:	447b      	add	r3, pc
     52a:	50e1      	str	r1, [r4, r3]
			found          = true;
     52c:	2301      	movs	r3, #1
     52e:	4698      	mov	r8, r3
			break;
     530:	e7de      	b.n	4f0 <ext_irq_register+0x14>
		if (!found) {
     532:	4643      	mov	r3, r8
     534:	2b00      	cmp	r3, #0
     536:	d038      	beq.n	5aa <ext_irq_register+0xce>
		return _ext_irq_enable(pin, false);
     538:	9801      	ldr	r0, [sp, #4]
     53a:	f000 fa1d 	bl	978 <_ext_irq_enable>
     53e:	e030      	b.n	5a2 <ext_irq_register+0xc6>
				ext_irqs[i].cb  = cb;
     540:	4a20      	ldr	r2, [pc, #128]	; (5c4 <ext_irq_register+0xe8>)
     542:	447a      	add	r2, pc
     544:	00dd      	lsls	r5, r3, #3
     546:	50a9      	str	r1, [r5, r2]
				ext_irqs[i].pin = pin;
     548:	1955      	adds	r5, r2, r5
     54a:	9a01      	ldr	r2, [sp, #4]
     54c:	606a      	str	r2, [r5, #4]
				found           = true;
     54e:	2201      	movs	r2, #1
     550:	4690      	mov	r8, r2
     552:	2200      	movs	r2, #0
     554:	e001      	b.n	55a <ext_irq_register+0x7e>
		for (; (j < EXT_IRQ_AMOUNT) && (i < EXT_IRQ_AMOUNT); j++) {
     556:	3201      	adds	r2, #1
     558:	b2d2      	uxtb	r2, r2
     55a:	0019      	movs	r1, r3
     55c:	4311      	orrs	r1, r2
     55e:	d119      	bne.n	594 <ext_irq_register+0xb8>
			if ((ext_irqs[i].pin < ext_irqs[j].pin) && (ext_irqs[j].pin != 0xFFFFFFFF)) {
     560:	4919      	ldr	r1, [pc, #100]	; (5c8 <ext_irq_register+0xec>)
     562:	4479      	add	r1, pc
     564:	00dc      	lsls	r4, r3, #3
     566:	190c      	adds	r4, r1, r4
     568:	6867      	ldr	r7, [r4, #4]
     56a:	00d4      	lsls	r4, r2, #3
     56c:	1909      	adds	r1, r1, r4
     56e:	6849      	ldr	r1, [r1, #4]
     570:	428f      	cmp	r7, r1
     572:	d2f0      	bcs.n	556 <ext_irq_register+0x7a>
     574:	1c4c      	adds	r4, r1, #1
     576:	d0ee      	beq.n	556 <ext_irq_register+0x7a>
				struct ext_irq tmp = ext_irqs[j];
     578:	4f14      	ldr	r7, [pc, #80]	; (5cc <ext_irq_register+0xf0>)
     57a:	447f      	add	r7, pc
     57c:	00d1      	lsls	r1, r2, #3
     57e:	46bc      	mov	ip, r7
     580:	4461      	add	r1, ip
     582:	af02      	add	r7, sp, #8
     584:	003e      	movs	r6, r7
     586:	c911      	ldmia	r1!, {r0, r4}
     588:	c611      	stmia	r6!, {r0, r4}
				ext_irqs[i] = tmp;
     58a:	00dd      	lsls	r5, r3, #3
     58c:	4465      	add	r5, ip
     58e:	cf03      	ldmia	r7!, {r0, r1}
     590:	c503      	stmia	r5!, {r0, r1}
     592:	e7e0      	b.n	556 <ext_irq_register+0x7a>
	if (!found) {
     594:	4643      	mov	r3, r8
     596:	2b00      	cmp	r3, #0
     598:	d00a      	beq.n	5b0 <ext_irq_register+0xd4>
	return _ext_irq_enable(pin, true);
     59a:	2101      	movs	r1, #1
     59c:	9801      	ldr	r0, [sp, #4]
     59e:	f000 f9eb 	bl	978 <_ext_irq_enable>
}
     5a2:	b004      	add	sp, #16
     5a4:	bc04      	pop	{r2}
     5a6:	4690      	mov	r8, r2
     5a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return ERR_INVALID_ARG;
     5aa:	200d      	movs	r0, #13
     5ac:	4240      	negs	r0, r0
     5ae:	e7f8      	b.n	5a2 <ext_irq_register+0xc6>
		return ERR_INVALID_ARG;
     5b0:	200d      	movs	r0, #13
     5b2:	4240      	negs	r0, r0
     5b4:	e7f5      	b.n	5a2 <ext_irq_register+0xc6>
     5b6:	46c0      	nop			; (mov r8, r8)
     5b8:	1ffffb7e 	.word	0x1ffffb7e
     5bc:	1ffffb6c 	.word	0x1ffffb6c
     5c0:	1ffffb58 	.word	0x1ffffb58
     5c4:	1ffffb3e 	.word	0x1ffffb3e
     5c8:	1ffffb1e 	.word	0x1ffffb1e
     5cc:	1ffffb06 	.word	0x1ffffb06

000005d0 <i2c_m_sync_write>:

/**
 * \brief Sync version of I2C I/O write
 */
static int32_t i2c_m_sync_write(struct io_descriptor *io, const uint8_t *buf, const uint16_t n)
{
     5d0:	b510      	push	{r4, lr}
     5d2:	b084      	sub	sp, #16
	struct i2c_m_sync_desc *i2c = CONTAINER_OF(io, struct i2c_m_sync_desc, io);
	struct _i2c_m_msg       msg;
	int32_t                 ret;

	msg.addr   = i2c->slave_addr;
     5d4:	3814      	subs	r0, #20
     5d6:	8b84      	ldrh	r4, [r0, #28]
     5d8:	ab01      	add	r3, sp, #4
     5da:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     5dc:	0014      	movs	r4, r2
     5de:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP;
     5e0:	4a06      	ldr	r2, [pc, #24]	; (5fc <i2c_m_sync_write+0x2c>)
     5e2:	805a      	strh	r2, [r3, #2]
	msg.buffer = (uint8_t *)buf;
     5e4:	9103      	str	r1, [sp, #12]

	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     5e6:	0019      	movs	r1, r3
     5e8:	f000 fd84 	bl	10f4 <_i2c_m_sync_transfer>

	if (ret) {
     5ec:	2800      	cmp	r0, #0
     5ee:	d102      	bne.n	5f6 <i2c_m_sync_write+0x26>
		return ret;
	}

	return n;
}
     5f0:	0020      	movs	r0, r4
     5f2:	b004      	add	sp, #16
     5f4:	bd10      	pop	{r4, pc}
		return ret;
     5f6:	0004      	movs	r4, r0
     5f8:	e7fa      	b.n	5f0 <i2c_m_sync_write+0x20>
     5fa:	46c0      	nop			; (mov r8, r8)
     5fc:	ffff8000 	.word	0xffff8000

00000600 <i2c_m_sync_read>:
{
     600:	b510      	push	{r4, lr}
     602:	b084      	sub	sp, #16
	msg.addr   = i2c->slave_addr;
     604:	3814      	subs	r0, #20
     606:	8b84      	ldrh	r4, [r0, #28]
     608:	ab01      	add	r3, sp, #4
     60a:	801c      	strh	r4, [r3, #0]
	msg.len    = n;
     60c:	0014      	movs	r4, r2
     60e:	9202      	str	r2, [sp, #8]
	msg.flags  = I2C_M_STOP | I2C_M_RD;
     610:	4a06      	ldr	r2, [pc, #24]	; (62c <i2c_m_sync_read+0x2c>)
     612:	805a      	strh	r2, [r3, #2]
	msg.buffer = buf;
     614:	9103      	str	r1, [sp, #12]
	ret = _i2c_m_sync_transfer(&i2c->device, &msg);
     616:	0019      	movs	r1, r3
     618:	f000 fd6c 	bl	10f4 <_i2c_m_sync_transfer>
	if (ret) {
     61c:	2800      	cmp	r0, #0
     61e:	d102      	bne.n	626 <i2c_m_sync_read+0x26>
}
     620:	0020      	movs	r0, r4
     622:	b004      	add	sp, #16
     624:	bd10      	pop	{r4, pc}
		return ret;
     626:	0004      	movs	r4, r0
     628:	e7fa      	b.n	620 <i2c_m_sync_read+0x20>
     62a:	46c0      	nop			; (mov r8, r8)
     62c:	ffff8001 	.word	0xffff8001

00000630 <i2c_m_sync_init>:

/**
 * \brief Sync version of i2c initialize
 */
int32_t i2c_m_sync_init(struct i2c_m_sync_desc *i2c, void *hw)
{
     630:	b570      	push	{r4, r5, r6, lr}
     632:	0004      	movs	r4, r0
     634:	000d      	movs	r5, r1
	int32_t init_status;
	ASSERT(i2c);
     636:	1e43      	subs	r3, r0, #1
     638:	4198      	sbcs	r0, r3
     63a:	b2c0      	uxtb	r0, r0
     63c:	225e      	movs	r2, #94	; 0x5e
     63e:	4908      	ldr	r1, [pc, #32]	; (660 <i2c_m_sync_init+0x30>)
     640:	4479      	add	r1, pc
     642:	f000 f90d 	bl	860 <assert>

	init_status = _i2c_m_sync_init(&i2c->device, hw);
     646:	0029      	movs	r1, r5
     648:	0020      	movs	r0, r4
     64a:	f000 fcfd 	bl	1048 <_i2c_m_sync_init>
	if (init_status) {
     64e:	2800      	cmp	r0, #0
     650:	d105      	bne.n	65e <i2c_m_sync_init+0x2e>
		return init_status;
	}

	/* Init I/O */
	i2c->io.read  = i2c_m_sync_read;
     652:	4b04      	ldr	r3, [pc, #16]	; (664 <i2c_m_sync_init+0x34>)
     654:	447b      	add	r3, pc
     656:	61a3      	str	r3, [r4, #24]
	i2c->io.write = i2c_m_sync_write;
     658:	4b03      	ldr	r3, [pc, #12]	; (668 <i2c_m_sync_init+0x38>)
     65a:	447b      	add	r3, pc
     65c:	6163      	str	r3, [r4, #20]

	return ERR_NONE;
}
     65e:	bd70      	pop	{r4, r5, r6, pc}
     660:	00003020 	.word	0x00003020
     664:	ffffffa9 	.word	0xffffffa9
     668:	ffffff73 	.word	0xffffff73

0000066c <i2c_m_sync_enable>:

/**
 * \brief Sync version of i2c enable
 */
int32_t i2c_m_sync_enable(struct i2c_m_sync_desc *i2c)
{
     66c:	b510      	push	{r4, lr}
	return _i2c_m_sync_enable(&i2c->device);
     66e:	f000 fd01 	bl	1074 <_i2c_m_sync_enable>
}
     672:	bd10      	pop	{r4, pc}

00000674 <i2c_m_sync_set_slaveaddr>:
/**
 * \brief Sync version of i2c set slave address
 */
int32_t i2c_m_sync_set_slaveaddr(struct i2c_m_sync_desc *i2c, int16_t addr, int32_t addr_len)
{
	return i2c->slave_addr = (addr & 0x3ff) | (addr_len & I2C_M_TEN);
     674:	0589      	lsls	r1, r1, #22
     676:	0d89      	lsrs	r1, r1, #22
     678:	2380      	movs	r3, #128	; 0x80
     67a:	00db      	lsls	r3, r3, #3
     67c:	401a      	ands	r2, r3
     67e:	430a      	orrs	r2, r1
     680:	8382      	strh	r2, [r0, #28]
}
     682:	0010      	movs	r0, r2
     684:	4770      	bx	lr

00000686 <i2c_m_sync_get_io_descriptor>:
/**
 * \brief Retrieve I/O descriptor
 */
int32_t i2c_m_sync_get_io_descriptor(struct i2c_m_sync_desc *const i2c, struct io_descriptor **io)
{
	*io = &i2c->io;
     686:	3014      	adds	r0, #20
     688:	6008      	str	r0, [r1, #0]
	return ERR_NONE;
}
     68a:	2000      	movs	r0, #0
     68c:	4770      	bx	lr
	...

00000690 <io_write>:

/**
 * \brief I/O write interface
 */
int32_t io_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     690:	b570      	push	{r4, r5, r6, lr}
     692:	0004      	movs	r4, r0
     694:	000d      	movs	r5, r1
     696:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     698:	2800      	cmp	r0, #0
     69a:	d00f      	beq.n	6bc <io_write+0x2c>
     69c:	2900      	cmp	r1, #0
     69e:	d00b      	beq.n	6b8 <io_write+0x28>
     6a0:	2001      	movs	r0, #1
     6a2:	2234      	movs	r2, #52	; 0x34
     6a4:	4906      	ldr	r1, [pc, #24]	; (6c0 <io_write+0x30>)
     6a6:	4479      	add	r1, pc
     6a8:	f000 f8da 	bl	860 <assert>
	return io_descr->write(io_descr, buf, length);
     6ac:	6823      	ldr	r3, [r4, #0]
     6ae:	0032      	movs	r2, r6
     6b0:	0029      	movs	r1, r5
     6b2:	0020      	movs	r0, r4
     6b4:	4798      	blx	r3
}
     6b6:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     6b8:	2000      	movs	r0, #0
     6ba:	e7f2      	b.n	6a2 <io_write+0x12>
     6bc:	2000      	movs	r0, #0
     6be:	e7f0      	b.n	6a2 <io_write+0x12>
     6c0:	00002fd6 	.word	0x00002fd6

000006c4 <io_read>:

/**
 * \brief I/O read interface
 */
int32_t io_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     6c4:	b570      	push	{r4, r5, r6, lr}
     6c6:	0004      	movs	r4, r0
     6c8:	000d      	movs	r5, r1
     6ca:	0016      	movs	r6, r2
	ASSERT(io_descr && buf);
     6cc:	2800      	cmp	r0, #0
     6ce:	d00f      	beq.n	6f0 <io_read+0x2c>
     6d0:	2900      	cmp	r1, #0
     6d2:	d00b      	beq.n	6ec <io_read+0x28>
     6d4:	2001      	movs	r0, #1
     6d6:	223d      	movs	r2, #61	; 0x3d
     6d8:	4906      	ldr	r1, [pc, #24]	; (6f4 <io_read+0x30>)
     6da:	4479      	add	r1, pc
     6dc:	f000 f8c0 	bl	860 <assert>
	return io_descr->read(io_descr, buf, length);
     6e0:	6863      	ldr	r3, [r4, #4]
     6e2:	0032      	movs	r2, r6
     6e4:	0029      	movs	r1, r5
     6e6:	0020      	movs	r0, r4
     6e8:	4798      	blx	r3
}
     6ea:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(io_descr && buf);
     6ec:	2000      	movs	r0, #0
     6ee:	e7f2      	b.n	6d6 <io_read+0x12>
     6f0:	2000      	movs	r0, #0
     6f2:	e7f0      	b.n	6d6 <io_read+0x12>
     6f4:	00002fa2 	.word	0x00002fa2

000006f8 <usart_sync_write>:
 * \param[in] length The number of bytes to write
 *
 * \return The number of bytes written.
 */
static int32_t usart_sync_write(struct io_descriptor *const io_descr, const uint8_t *const buf, const uint16_t length)
{
     6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     6fa:	0005      	movs	r5, r0
     6fc:	000e      	movs	r6, r1
     6fe:	0017      	movs	r7, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     700:	2800      	cmp	r0, #0
     702:	d024      	beq.n	74e <usart_sync_write+0x56>
     704:	2900      	cmp	r1, #0
     706:	d024      	beq.n	752 <usart_sync_write+0x5a>
     708:	2a00      	cmp	r2, #0
     70a:	d124      	bne.n	756 <usart_sync_write+0x5e>
     70c:	2000      	movs	r0, #0
     70e:	22f1      	movs	r2, #241	; 0xf1
     710:	4912      	ldr	r1, [pc, #72]	; (75c <usart_sync_write+0x64>)
     712:	4479      	add	r1, pc
     714:	f000 f8a4 	bl	860 <assert>
	while (!_usart_sync_is_ready_to_send(&descr->device))
     718:	002c      	movs	r4, r5
     71a:	3408      	adds	r4, #8
     71c:	0020      	movs	r0, r4
     71e:	f000 fc82 	bl	1026 <_usart_sync_is_ready_to_send>
     722:	2800      	cmp	r0, #0
     724:	d0f8      	beq.n	718 <usart_sync_write+0x20>
     726:	2500      	movs	r5, #0
		;
	do {
		_usart_sync_write_byte(&descr->device, buf[offset]);
     728:	5d71      	ldrb	r1, [r6, r5]
     72a:	0020      	movs	r0, r4
     72c:	f000 fc73 	bl	1016 <_usart_sync_write_byte>
		while (!_usart_sync_is_ready_to_send(&descr->device))
     730:	0020      	movs	r0, r4
     732:	f000 fc78 	bl	1026 <_usart_sync_is_ready_to_send>
     736:	2800      	cmp	r0, #0
     738:	d0fa      	beq.n	730 <usart_sync_write+0x38>
			;
	} while (++offset < length);
     73a:	3501      	adds	r5, #1
     73c:	42bd      	cmp	r5, r7
     73e:	d3f3      	bcc.n	728 <usart_sync_write+0x30>
	while (!_usart_sync_is_transmit_done(&descr->device))
     740:	0020      	movs	r0, r4
     742:	f000 fc75 	bl	1030 <_usart_sync_is_transmit_done>
     746:	2800      	cmp	r0, #0
     748:	d0fa      	beq.n	740 <usart_sync_write+0x48>
		;
	return (int32_t)offset;
}
     74a:	0028      	movs	r0, r5
     74c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     74e:	2000      	movs	r0, #0
     750:	e7dd      	b.n	70e <usart_sync_write+0x16>
     752:	2000      	movs	r0, #0
     754:	e7db      	b.n	70e <usart_sync_write+0x16>
     756:	2001      	movs	r0, #1
     758:	e7d9      	b.n	70e <usart_sync_write+0x16>
     75a:	46c0      	nop			; (mov r8, r8)
     75c:	00002f7e 	.word	0x00002f7e

00000760 <usart_sync_read>:
 * \param[in] length The size of a buffer
 *
 * \return The number of bytes read.
 */
static int32_t usart_sync_read(struct io_descriptor *const io_descr, uint8_t *const buf, const uint16_t length)
{
     760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     762:	46ce      	mov	lr, r9
     764:	4647      	mov	r7, r8
     766:	b580      	push	{r7, lr}
     768:	1e05      	subs	r5, r0, #0
     76a:	4688      	mov	r8, r1
     76c:	4691      	mov	r9, r2
	uint32_t                      offset = 0;
	struct usart_sync_descriptor *descr  = CONTAINER_OF(io_descr, struct usart_sync_descriptor, io);

	ASSERT(io_descr && buf && length);
     76e:	d020      	beq.n	7b2 <usart_sync_read+0x52>
     770:	2900      	cmp	r1, #0
     772:	d020      	beq.n	7b6 <usart_sync_read+0x56>
     774:	2a00      	cmp	r2, #0
     776:	d120      	bne.n	7ba <usart_sync_read+0x5a>
     778:	2000      	movs	r0, #0
     77a:	2286      	movs	r2, #134	; 0x86
     77c:	0052      	lsls	r2, r2, #1
     77e:	4910      	ldr	r1, [pc, #64]	; (7c0 <usart_sync_read+0x60>)
     780:	4479      	add	r1, pc
     782:	f000 f86d 	bl	860 <assert>
	uint32_t                      offset = 0;
     786:	2600      	movs	r6, #0
	do {
		while (!_usart_sync_is_byte_received(&descr->device))
     788:	002c      	movs	r4, r5
     78a:	3408      	adds	r4, #8
     78c:	0020      	movs	r0, r4
     78e:	f000 fc55 	bl	103c <_usart_sync_is_byte_received>
     792:	2800      	cmp	r0, #0
     794:	d0f8      	beq.n	788 <usart_sync_read+0x28>
			;
		buf[offset] = _usart_sync_read_byte(&descr->device);
     796:	4643      	mov	r3, r8
     798:	199f      	adds	r7, r3, r6
     79a:	0020      	movs	r0, r4
     79c:	f000 fc3f 	bl	101e <_usart_sync_read_byte>
     7a0:	7038      	strb	r0, [r7, #0]
	} while (++offset < length);
     7a2:	3601      	adds	r6, #1
     7a4:	454e      	cmp	r6, r9
     7a6:	d3ef      	bcc.n	788 <usart_sync_read+0x28>

	return (int32_t)offset;
}
     7a8:	0030      	movs	r0, r6
     7aa:	bc0c      	pop	{r2, r3}
     7ac:	4690      	mov	r8, r2
     7ae:	4699      	mov	r9, r3
     7b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ASSERT(io_descr && buf && length);
     7b2:	2000      	movs	r0, #0
     7b4:	e7e1      	b.n	77a <usart_sync_read+0x1a>
     7b6:	2000      	movs	r0, #0
     7b8:	e7df      	b.n	77a <usart_sync_read+0x1a>
     7ba:	2001      	movs	r0, #1
     7bc:	e7dd      	b.n	77a <usart_sync_read+0x1a>
     7be:	46c0      	nop			; (mov r8, r8)
     7c0:	00002f10 	.word	0x00002f10

000007c4 <usart_sync_init>:
{
     7c4:	b570      	push	{r4, r5, r6, lr}
     7c6:	0004      	movs	r4, r0
     7c8:	000d      	movs	r5, r1
	ASSERT(descr && hw);
     7ca:	2800      	cmp	r0, #0
     7cc:	d017      	beq.n	7fe <usart_sync_init+0x3a>
     7ce:	2900      	cmp	r1, #0
     7d0:	d013      	beq.n	7fa <usart_sync_init+0x36>
     7d2:	2001      	movs	r0, #1
     7d4:	2234      	movs	r2, #52	; 0x34
     7d6:	490b      	ldr	r1, [pc, #44]	; (804 <usart_sync_init+0x40>)
     7d8:	4479      	add	r1, pc
     7da:	f000 f841 	bl	860 <assert>
	init_status = _usart_sync_init(&descr->device, hw);
     7de:	0020      	movs	r0, r4
     7e0:	3008      	adds	r0, #8
     7e2:	0029      	movs	r1, r5
     7e4:	f000 fbfc 	bl	fe0 <_usart_sync_init>
	if (init_status) {
     7e8:	2800      	cmp	r0, #0
     7ea:	d105      	bne.n	7f8 <usart_sync_init+0x34>
	descr->io.read  = usart_sync_read;
     7ec:	4b06      	ldr	r3, [pc, #24]	; (808 <usart_sync_init+0x44>)
     7ee:	447b      	add	r3, pc
     7f0:	6063      	str	r3, [r4, #4]
	descr->io.write = usart_sync_write;
     7f2:	4b06      	ldr	r3, [pc, #24]	; (80c <usart_sync_init+0x48>)
     7f4:	447b      	add	r3, pc
     7f6:	6023      	str	r3, [r4, #0]
}
     7f8:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && hw);
     7fa:	2000      	movs	r0, #0
     7fc:	e7ea      	b.n	7d4 <usart_sync_init+0x10>
     7fe:	2000      	movs	r0, #0
     800:	e7e8      	b.n	7d4 <usart_sync_init+0x10>
     802:	46c0      	nop			; (mov r8, r8)
     804:	00002eb8 	.word	0x00002eb8
     808:	ffffff6f 	.word	0xffffff6f
     80c:	ffffff01 	.word	0xffffff01

00000810 <usart_sync_enable>:
{
     810:	b510      	push	{r4, lr}
     812:	0004      	movs	r4, r0
	ASSERT(descr);
     814:	1e43      	subs	r3, r0, #1
     816:	4198      	sbcs	r0, r3
     818:	b2c0      	uxtb	r0, r0
     81a:	2253      	movs	r2, #83	; 0x53
     81c:	4904      	ldr	r1, [pc, #16]	; (830 <usart_sync_enable+0x20>)
     81e:	4479      	add	r1, pc
     820:	f000 f81e 	bl	860 <assert>
	_usart_sync_enable(&descr->device);
     824:	0020      	movs	r0, r4
     826:	3008      	adds	r0, #8
     828:	f000 fbec 	bl	1004 <_usart_sync_enable>
}
     82c:	2000      	movs	r0, #0
     82e:	bd10      	pop	{r4, pc}
     830:	00002e72 	.word	0x00002e72

00000834 <usart_sync_get_io_descriptor>:
{
     834:	b570      	push	{r4, r5, r6, lr}
     836:	0004      	movs	r4, r0
     838:	000d      	movs	r5, r1
	ASSERT(descr && io);
     83a:	2800      	cmp	r0, #0
     83c:	d00c      	beq.n	858 <usart_sync_get_io_descriptor+0x24>
     83e:	2900      	cmp	r1, #0
     840:	d008      	beq.n	854 <usart_sync_get_io_descriptor+0x20>
     842:	2001      	movs	r0, #1
     844:	2269      	movs	r2, #105	; 0x69
     846:	4905      	ldr	r1, [pc, #20]	; (85c <usart_sync_get_io_descriptor+0x28>)
     848:	4479      	add	r1, pc
     84a:	f000 f809 	bl	860 <assert>
	*io = &descr->io;
     84e:	602c      	str	r4, [r5, #0]
}
     850:	2000      	movs	r0, #0
     852:	bd70      	pop	{r4, r5, r6, pc}
	ASSERT(descr && io);
     854:	2000      	movs	r0, #0
     856:	e7f5      	b.n	844 <usart_sync_get_io_descriptor+0x10>
     858:	2000      	movs	r0, #0
     85a:	e7f3      	b.n	844 <usart_sync_get_io_descriptor+0x10>
     85c:	00002e48 	.word	0x00002e48

00000860 <assert>:
/**
 * \brief Assert function
 */
void assert(const bool condition, const char *const file, const int line)
{
	if (!(condition)) {
     860:	2800      	cmp	r0, #0
     862:	d100      	bne.n	866 <assert+0x6>
		__asm("BKPT #0");
     864:	be00      	bkpt	0x0000
	}
	(void)file;
	(void)line;
}
     866:	4770      	bx	lr

00000868 <_sbrk>:

/**
 * \brief Replacement of C library of _sbrk
 */
extern caddr_t _sbrk(int incr)
{
     868:	b082      	sub	sp, #8
     86a:	0003      	movs	r3, r0
     86c:	4a0a      	ldr	r2, [pc, #40]	; (898 <_sbrk+0x30>)
     86e:	447a      	add	r2, pc
	static unsigned char *heap = NULL;
	unsigned char *       prev_heap;

	if (heap == NULL) {
     870:	490a      	ldr	r1, [pc, #40]	; (89c <_sbrk+0x34>)
     872:	4479      	add	r1, pc
     874:	6809      	ldr	r1, [r1, #0]
     876:	2900      	cmp	r1, #0
     878:	d006      	beq.n	888 <_sbrk+0x20>
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;
     87a:	4a09      	ldr	r2, [pc, #36]	; (8a0 <_sbrk+0x38>)
     87c:	447a      	add	r2, pc
     87e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
     880:	18c3      	adds	r3, r0, r3
     882:	6013      	str	r3, [r2, #0]

	return (caddr_t)prev_heap;
}
     884:	b002      	add	sp, #8
     886:	4770      	bx	lr
		heap = (unsigned char *)&_end;
     888:	4906      	ldr	r1, [pc, #24]	; (8a4 <_sbrk+0x3c>)
     88a:	5852      	ldr	r2, [r2, r1]
     88c:	9201      	str	r2, [sp, #4]
     88e:	4a06      	ldr	r2, [pc, #24]	; (8a8 <_sbrk+0x40>)
     890:	447a      	add	r2, pc
     892:	9901      	ldr	r1, [sp, #4]
     894:	6011      	str	r1, [r2, #0]
     896:	e7f0      	b.n	87a <_sbrk+0x12>
     898:	00003556 	.word	0x00003556
     89c:	1ffff816 	.word	0x1ffff816
     8a0:	1ffff80c 	.word	0x1ffff80c
     8a4:	0000003c 	.word	0x0000003c
     8a8:	1ffff7f8 	.word	0x1ffff7f8

000008ac <_get_cycles_for_ms>:
 */
static inline uint32_t _get_cycles_for_ms_internal(const uint16_t ms, const uint32_t freq, const uint8_t power)
{
	switch (power) {
	case 8:
		return (ms * (freq / 100000)) * 100;
     8ac:	0103      	lsls	r3, r0, #4
     8ae:	1a1b      	subs	r3, r3, r0
     8b0:	011a      	lsls	r2, r3, #4
     8b2:	2064      	movs	r0, #100	; 0x64
     8b4:	4350      	muls	r0, r2
 * \brief Retrieve the amount of cycles to delay for the given amount of ms
 */
uint32_t _get_cycles_for_ms(const uint16_t ms)
{
	return _get_cycles_for_ms_internal(ms, CONF_CPU_FREQUENCY, CPU_FREQ_POWER);
}
     8b6:	4770      	bx	lr

000008b8 <_init_chip>:

/**
 * \brief Initialize the hardware abstraction layer
 */
void _init_chip(void)
{
     8b8:	b510      	push	{r4, lr}
}

static inline void hri_nvmctrl_set_CTRLB_RWS_bf(const void *const hw, hri_nvmctrl_ctrlb_reg_t mask)
{
	NVMCTRL_CRITICAL_SECTION_ENTER();
	((Nvmctrl *)hw)->CTRLB.reg |= NVMCTRL_CTRLB_RWS(mask);
     8ba:	4b08      	ldr	r3, [pc, #32]	; (8dc <_init_chip+0x24>)
     8bc:	685a      	ldr	r2, [r3, #4]
     8be:	605a      	str	r2, [r3, #4]
	hri_nvmctrl_set_CTRLB_RWS_bf(NVMCTRL, CONF_NVM_WAIT_STATE);

	_pm_init();
     8c0:	f000 f8fe 	bl	ac0 <_pm_init>
	_sysctrl_init_sources();
     8c4:	f000 fd54 	bl	1370 <_sysctrl_init_sources>
#if _GCLK_INIT_1ST
	_gclk_init_generators_by_fref(_GCLK_INIT_1ST);
     8c8:	2002      	movs	r0, #2
     8ca:	f000 f8d9 	bl	a80 <_gclk_init_generators_by_fref>
#endif
	_sysctrl_init_referenced_generators();
     8ce:	f000 fd5b 	bl	1388 <_sysctrl_init_referenced_generators>
	_gclk_init_generators_by_fref(_GCLK_INIT_LAST);
     8d2:	20fd      	movs	r0, #253	; 0xfd
     8d4:	f000 f8d4 	bl	a80 <_gclk_init_generators_by_fref>
#if CONF_DMAC_ENABLE
	_pm_enable_bus_clock(PM_BUS_AHB, DMAC);
	_pm_enable_bus_clock(PM_BUS_APBB, DMAC);
	_dma_init();
#endif
}
     8d8:	bd10      	pop	{r4, pc}
     8da:	46c0      	nop			; (mov r8, r8)
     8dc:	41004000 	.word	0x41004000

000008e0 <_ext_irq_init>:
typedef uint8_t  hri_eic_nmiflag_reg_t;
typedef uint8_t  hri_eic_status_reg_t;

static inline void hri_eic_wait_for_sync(const void *const hw)
{
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     8e0:	4b22      	ldr	r3, [pc, #136]	; (96c <_ext_irq_init+0x8c>)
     8e2:	785b      	ldrb	r3, [r3, #1]
     8e4:	09db      	lsrs	r3, r3, #7
     8e6:	d1fb      	bne.n	8e0 <_ext_irq_init>
     8e8:	4b20      	ldr	r3, [pc, #128]	; (96c <_ext_irq_init+0x8c>)
     8ea:	785b      	ldrb	r3, [r3, #1]
     8ec:	09db      	lsrs	r3, r3, #7
     8ee:	d1fb      	bne.n	8e8 <_ext_irq_init+0x8>

static inline hri_eic_ctrl_reg_t hri_eic_get_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t mask)
{
	uint8_t tmp;
	hri_eic_wait_for_sync(hw);
	tmp = ((Eic *)hw)->CTRL.reg;
     8f0:	4b1e      	ldr	r3, [pc, #120]	; (96c <_ext_irq_init+0x8c>)
     8f2:	781b      	ldrb	r3, [r3, #0]
 * \brief Initialize external interrupt module
 */
int32_t _ext_irq_init(void (*cb)(const uint32_t pin))
{
	hri_eic_wait_for_sync(EIC);
	if (hri_eic_get_CTRL_reg(EIC, EIC_CTRL_ENABLE)) {
     8f4:	079b      	lsls	r3, r3, #30
     8f6:	d50a      	bpl.n	90e <_ext_irq_init+0x2e>
}

static inline void hri_eic_write_CTRL_reg(const void *const hw, hri_eic_ctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CTRL.reg = data;
     8f8:	2200      	movs	r2, #0
     8fa:	4b1c      	ldr	r3, [pc, #112]	; (96c <_ext_irq_init+0x8c>)
     8fc:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     8fe:	4b1b      	ldr	r3, [pc, #108]	; (96c <_ext_irq_init+0x8c>)
     900:	785b      	ldrb	r3, [r3, #1]
     902:	09db      	lsrs	r3, r3, #7
     904:	d1fb      	bne.n	8fe <_ext_irq_init+0x1e>
     906:	4b19      	ldr	r3, [pc, #100]	; (96c <_ext_irq_init+0x8c>)
     908:	785b      	ldrb	r3, [r3, #1]
     90a:	09db      	lsrs	r3, r3, #7
     90c:	d1fb      	bne.n	906 <_ext_irq_init+0x26>
	((Eic *)hw)->CTRL.reg = data;
     90e:	2201      	movs	r2, #1
     910:	4b16      	ldr	r3, [pc, #88]	; (96c <_ext_irq_init+0x8c>)
     912:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     914:	4b15      	ldr	r3, [pc, #84]	; (96c <_ext_irq_init+0x8c>)
     916:	785b      	ldrb	r3, [r3, #1]
     918:	09db      	lsrs	r3, r3, #7
     91a:	d1fb      	bne.n	914 <_ext_irq_init+0x34>
     91c:	4b13      	ldr	r3, [pc, #76]	; (96c <_ext_irq_init+0x8c>)
     91e:	785b      	ldrb	r3, [r3, #1]
     920:	09db      	lsrs	r3, r3, #7
     922:	d1fb      	bne.n	91c <_ext_irq_init+0x3c>
}

static inline void hri_eic_write_NMICTRL_reg(const void *const hw, hri_eic_nmictrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->NMICTRL.reg = data;
     924:	4b11      	ldr	r3, [pc, #68]	; (96c <_ext_irq_init+0x8c>)
     926:	2200      	movs	r2, #0
     928:	709a      	strb	r2, [r3, #2]
}

static inline void hri_eic_write_EVCTRL_reg(const void *const hw, hri_eic_evctrl_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->EVCTRL.reg = data;
     92a:	605a      	str	r2, [r3, #4]
}

static inline void hri_eic_write_WAKEUP_reg(const void *const hw, hri_eic_wakeup_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->WAKEUP.reg = data;
     92c:	615a      	str	r2, [r3, #20]
}

static inline void hri_eic_write_CONFIG_reg(const void *const hw, uint8_t index, hri_eic_config_reg_t data)
{
	EIC_CRITICAL_SECTION_ENTER();
	((Eic *)hw)->CONFIG[index].reg = data;
     92e:	619a      	str	r2, [r3, #24]
     930:	2280      	movs	r2, #128	; 0x80
     932:	0292      	lsls	r2, r2, #10
     934:	61da      	str	r2, [r3, #28]
	((Eic *)hw)->CTRL.reg |= EIC_CTRL_ENABLE;
     936:	781a      	ldrb	r2, [r3, #0]
     938:	2102      	movs	r1, #2
     93a:	430a      	orrs	r2, r1
     93c:	b2d2      	uxtb	r2, r2
     93e:	701a      	strb	r2, [r3, #0]
	while (((const Eic *)hw)->STATUS.bit.SYNCBUSY)
     940:	4b0a      	ldr	r3, [pc, #40]	; (96c <_ext_irq_init+0x8c>)
     942:	785b      	ldrb	r3, [r3, #1]
     944:	09db      	lsrs	r3, r3, #7
     946:	d1fb      	bne.n	940 <_ext_irq_init+0x60>
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     948:	4b09      	ldr	r3, [pc, #36]	; (970 <_ext_irq_init+0x90>)
     94a:	2210      	movs	r2, #16
     94c:	2180      	movs	r1, #128	; 0x80
     94e:	505a      	str	r2, [r3, r1]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
     950:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
     954:	f3bf 8f6f 	isb	sy
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     958:	3101      	adds	r1, #1
     95a:	31ff      	adds	r1, #255	; 0xff
     95c:	505a      	str	r2, [r3, r1]
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
     95e:	601a      	str	r2, [r3, #0]

	NVIC_DisableIRQ(EIC_IRQn);
	NVIC_ClearPendingIRQ(EIC_IRQn);
	NVIC_EnableIRQ(EIC_IRQn);

	callback = cb;
     960:	4b04      	ldr	r3, [pc, #16]	; (974 <_ext_irq_init+0x94>)
     962:	447b      	add	r3, pc
     964:	6018      	str	r0, [r3, #0]

	return ERR_NONE;
}
     966:	2000      	movs	r0, #0
     968:	4770      	bx	lr
     96a:	46c0      	nop			; (mov r8, r8)
     96c:	40001800 	.word	0x40001800
     970:	e000e100 	.word	0xe000e100
     974:	1ffff72a 	.word	0x1ffff72a

00000978 <_ext_irq_enable>:
 * \brief Enable / disable external irq
 */
int32_t _ext_irq_enable(const uint32_t pin, const bool enable)
{
	uint8_t extint = INVALID_EXTINT_NUMBER;
	uint8_t i      = 0;
     978:	2300      	movs	r3, #0

	for (; i < ARRAY_SIZE(_map); i++) {
     97a:	2b00      	cmp	r3, #0
     97c:	d00b      	beq.n	996 <_ext_irq_enable+0x1e>
	uint8_t extint = INVALID_EXTINT_NUMBER;
     97e:	22ff      	movs	r2, #255	; 0xff
		if (_map[i].pin == pin) {
			extint = _map[i].extint;
			break;
		}
	}
	if (INVALID_EXTINT_NUMBER == extint) {
     980:	2aff      	cmp	r2, #255	; 0xff
     982:	d018      	beq.n	9b6 <_ext_irq_enable+0x3e>
		return ERR_INVALID_ARG;
	}

	if (enable) {
     984:	2900      	cmp	r1, #0
     986:	d110      	bne.n	9aa <_ext_irq_enable+0x32>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
	} else {
		hri_eic_clear_INTEN_reg(EIC, 1ul << extint);
     988:	2301      	movs	r3, #1
     98a:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENCLR.reg = mask;
     98c:	4a0b      	ldr	r2, [pc, #44]	; (9bc <_ext_irq_enable+0x44>)
     98e:	6093      	str	r3, [r2, #8]
	((Eic *)hw)->INTFLAG.reg = mask;
     990:	6113      	str	r3, [r2, #16]
		hri_eic_clear_INTFLAG_reg(EIC, 1ul << extint);
	}

	return ERR_NONE;
     992:	2000      	movs	r0, #0
}
     994:	4770      	bx	lr
		if (_map[i].pin == pin) {
     996:	2818      	cmp	r0, #24
     998:	d002      	beq.n	9a0 <_ext_irq_enable+0x28>
	for (; i < ARRAY_SIZE(_map); i++) {
     99a:	3301      	adds	r3, #1
     99c:	b2db      	uxtb	r3, r3
     99e:	e7ec      	b.n	97a <_ext_irq_enable+0x2>
			extint = _map[i].extint;
     9a0:	00da      	lsls	r2, r3, #3
     9a2:	4b07      	ldr	r3, [pc, #28]	; (9c0 <_ext_irq_enable+0x48>)
     9a4:	447b      	add	r3, pc
     9a6:	5cd2      	ldrb	r2, [r2, r3]
			break;
     9a8:	e7ea      	b.n	980 <_ext_irq_enable+0x8>
		hri_eic_set_INTEN_reg(EIC, 1ul << extint);
     9aa:	2301      	movs	r3, #1
     9ac:	4093      	lsls	r3, r2
	((Eic *)hw)->INTENSET.reg = mask;
     9ae:	4a03      	ldr	r2, [pc, #12]	; (9bc <_ext_irq_enable+0x44>)
     9b0:	60d3      	str	r3, [r2, #12]
	return ERR_NONE;
     9b2:	2000      	movs	r0, #0
     9b4:	e7ee      	b.n	994 <_ext_irq_enable+0x1c>
		return ERR_INVALID_ARG;
     9b6:	200d      	movs	r0, #13
     9b8:	4240      	negs	r0, r0
     9ba:	e7eb      	b.n	994 <_ext_irq_enable+0x1c>
     9bc:	40001800 	.word	0x40001800
     9c0:	00002d08 	.word	0x00002d08

000009c4 <EIC_Handler>:

/**
 * \brief EIC interrupt handler
 */
void EIC_Handler(void)
{
     9c4:	b570      	push	{r4, r5, r6, lr}
     9c6:	b082      	sub	sp, #8
	return ((Eic *)hw)->INTFLAG.reg;
     9c8:	4b28      	ldr	r3, [pc, #160]	; (a6c <EIC_Handler+0xa8>)
     9ca:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     9cc:	68d9      	ldr	r1, [r3, #12]
	volatile uint32_t flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     9ce:	400a      	ands	r2, r1
     9d0:	9201      	str	r2, [sp, #4]
	int8_t            pos;
	uint32_t          pin = INVALID_PIN_NUMBER;

	hri_eic_clear_INTFLAG_reg(EIC, flags);
     9d2:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     9d4:	611a      	str	r2, [r3, #16]

	ASSERT(callback);
     9d6:	4b26      	ldr	r3, [pc, #152]	; (a70 <EIC_Handler+0xac>)
     9d8:	447b      	add	r3, pc
     9da:	6818      	ldr	r0, [r3, #0]
     9dc:	1e43      	subs	r3, r0, #1
     9de:	4198      	sbcs	r0, r3
     9e0:	b2c0      	uxtb	r0, r0
     9e2:	22d2      	movs	r2, #210	; 0xd2
     9e4:	4923      	ldr	r1, [pc, #140]	; (a74 <EIC_Handler+0xb0>)
     9e6:	4479      	add	r1, pc
     9e8:	f7ff ff3a 	bl	860 <assert>
	uint32_t          pin = INVALID_PIN_NUMBER;
     9ec:	2501      	movs	r5, #1
     9ee:	426d      	negs	r5, r5

	while (flags) {
     9f0:	e030      	b.n	a54 <EIC_Handler+0x90>
					break;
				}
				if (_map[middle].extint < pos) {
					lower = middle + 1;
				} else {
					upper = middle - 1;
     9f2:	3901      	subs	r1, #1
     9f4:	b2ce      	uxtb	r6, r1
			while (upper >= lower) {
     9f6:	42b0      	cmp	r0, r6
     9f8:	d80f      	bhi.n	a1a <EIC_Handler+0x56>
				middle = (upper + lower) >> 1;
     9fa:	1832      	adds	r2, r6, r0
     9fc:	1052      	asrs	r2, r2, #1
     9fe:	b2d1      	uxtb	r1, r2
				if (_map[middle].extint == pos) {
     a00:	23ff      	movs	r3, #255	; 0xff
     a02:	4013      	ands	r3, r2
     a04:	00db      	lsls	r3, r3, #3
     a06:	4a1c      	ldr	r2, [pc, #112]	; (a78 <EIC_Handler+0xb4>)
     a08:	447a      	add	r2, pc
     a0a:	5c9b      	ldrb	r3, [r3, r2]
     a0c:	42a3      	cmp	r3, r4
     a0e:	d003      	beq.n	a18 <EIC_Handler+0x54>
				if (_map[middle].extint < pos) {
     a10:	daef      	bge.n	9f2 <EIC_Handler+0x2e>
					lower = middle + 1;
     a12:	3101      	adds	r1, #1
     a14:	b2c8      	uxtb	r0, r1
     a16:	e7ee      	b.n	9f6 <EIC_Handler+0x32>
					pin = _map[middle].pin;
     a18:	2518      	movs	r5, #24
				}
			}

			if (INVALID_PIN_NUMBER != pin) {
     a1a:	1c6b      	adds	r3, r5, #1
     a1c:	d004      	beq.n	a28 <EIC_Handler+0x64>
				callback(pin);
     a1e:	4b17      	ldr	r3, [pc, #92]	; (a7c <EIC_Handler+0xb8>)
     a20:	447b      	add	r3, pc
     a22:	681b      	ldr	r3, [r3, #0]
     a24:	0028      	movs	r0, r5
     a26:	4798      	blx	r3
			}
			flags &= ~(1ul << pos);
     a28:	2201      	movs	r2, #1
     a2a:	40a2      	lsls	r2, r4
     a2c:	9b01      	ldr	r3, [sp, #4]
     a2e:	4393      	bics	r3, r2
     a30:	9301      	str	r3, [sp, #4]
			pos = ffs(flags) - 1;
     a32:	9801      	ldr	r0, [sp, #4]
     a34:	f001 fcd8 	bl	23e8 <__ffssi2>
     a38:	3801      	subs	r0, #1
     a3a:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     a3c:	1c63      	adds	r3, r4, #1
     a3e:	d002      	beq.n	a46 <EIC_Handler+0x82>
     a40:	2601      	movs	r6, #1
     a42:	2000      	movs	r0, #0
     a44:	e7d7      	b.n	9f6 <EIC_Handler+0x32>
	return ((Eic *)hw)->INTFLAG.reg;
     a46:	4b09      	ldr	r3, [pc, #36]	; (a6c <EIC_Handler+0xa8>)
     a48:	691a      	ldr	r2, [r3, #16]
	return ((Eic *)hw)->INTENSET.reg;
     a4a:	68d9      	ldr	r1, [r3, #12]
		}
		flags = hri_eic_read_INTFLAG_reg(EIC) & hri_eic_read_INTEN_reg(EIC);
     a4c:	400a      	ands	r2, r1
     a4e:	9201      	str	r2, [sp, #4]
		hri_eic_clear_INTFLAG_reg(EIC, flags);
     a50:	9a01      	ldr	r2, [sp, #4]
	((Eic *)hw)->INTFLAG.reg = mask;
     a52:	611a      	str	r2, [r3, #16]
	while (flags) {
     a54:	9b01      	ldr	r3, [sp, #4]
     a56:	2b00      	cmp	r3, #0
     a58:	d005      	beq.n	a66 <EIC_Handler+0xa2>
		pos = ffs(flags) - 1;
     a5a:	9801      	ldr	r0, [sp, #4]
     a5c:	f001 fcc4 	bl	23e8 <__ffssi2>
     a60:	3801      	subs	r0, #1
     a62:	b244      	sxtb	r4, r0
		while (-1 != pos) {
     a64:	e7ea      	b.n	a3c <EIC_Handler+0x78>
	}
}
     a66:	b002      	add	sp, #8
     a68:	bd70      	pop	{r4, r5, r6, pc}
     a6a:	46c0      	nop			; (mov r8, r8)
     a6c:	40001800 	.word	0x40001800
     a70:	1ffff6b4 	.word	0x1ffff6b4
     a74:	00002cce 	.word	0x00002cce
     a78:	00002ca4 	.word	0x00002ca4
     a7c:	1ffff66c 	.word	0x1ffff66c

00000a80 <_gclk_init_generators_by_fref>:

void _gclk_init_generators_by_fref(uint32_t bm)
{

#if CONF_GCLK_GENERATOR_0_CONFIG == 1
	if (bm & (1ul << 0)) {
     a80:	07c3      	lsls	r3, r0, #31
     a82:	d509      	bpl.n	a98 <_gclk_init_generators_by_fref+0x18>
}

static inline void hri_gclk_write_GENDIV_reg(const void *const hw, hri_gclk_gendiv_reg_t data)
{
	GCLK_CRITICAL_SECTION_ENTER();
	((Gclk *)hw)->GENDIV.reg = data;
     a84:	4b0b      	ldr	r3, [pc, #44]	; (ab4 <_gclk_init_generators_by_fref+0x34>)
     a86:	2280      	movs	r2, #128	; 0x80
     a88:	0052      	lsls	r2, r2, #1
     a8a:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     a8c:	4a0a      	ldr	r2, [pc, #40]	; (ab8 <_gclk_init_generators_by_fref+0x38>)
     a8e:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     a90:	4b08      	ldr	r3, [pc, #32]	; (ab4 <_gclk_init_generators_by_fref+0x34>)
     a92:	785b      	ldrb	r3, [r3, #1]
     a94:	09db      	lsrs	r3, r3, #7
     a96:	d1fb      	bne.n	a90 <_gclk_init_generators_by_fref+0x10>
		        | (CONF_GCLK_GENERATOR_0_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_0_SRC | GCLK_GENCTRL_ID(0));
	}
#endif

#if CONF_GCLK_GENERATOR_1_CONFIG == 1
	if (bm & (1ul << 1)) {
     a98:	0783      	lsls	r3, r0, #30
     a9a:	d509      	bpl.n	ab0 <_gclk_init_generators_by_fref+0x30>
	((Gclk *)hw)->GENDIV.reg = data;
     a9c:	4b05      	ldr	r3, [pc, #20]	; (ab4 <_gclk_init_generators_by_fref+0x34>)
     a9e:	2202      	movs	r2, #2
     aa0:	32ff      	adds	r2, #255	; 0xff
     aa2:	609a      	str	r2, [r3, #8]
	((Gclk *)hw)->GENCTRL.reg = data;
     aa4:	4a05      	ldr	r2, [pc, #20]	; (abc <_gclk_init_generators_by_fref+0x3c>)
     aa6:	605a      	str	r2, [r3, #4]
	while (((const Gclk *)hw)->STATUS.bit.SYNCBUSY)
     aa8:	4b02      	ldr	r3, [pc, #8]	; (ab4 <_gclk_init_generators_by_fref+0x34>)
     aaa:	785b      	ldrb	r3, [r3, #1]
     aac:	09db      	lsrs	r3, r3, #7
     aae:	d1fb      	bne.n	aa8 <_gclk_init_generators_by_fref+0x28>
		        | (CONF_GCLK_GEN_8_DIVSEL << GCLK_GENCTRL_DIVSEL_Pos) | (CONF_GCLK_GEN_8_OE << GCLK_GENCTRL_OE_Pos)
		        | (CONF_GCLK_GEN_8_OOV << GCLK_GENCTRL_OOV_Pos) | (CONF_GCLK_GEN_8_IDC << GCLK_GENCTRL_IDC_Pos)
		        | (CONF_GCLK_GENERATOR_8_CONFIG << GCLK_GENCTRL_GENEN_Pos) | CONF_GCLK_GEN_8_SRC | GCLK_GENCTRL_ID(8));
	}
#endif
}
     ab0:	4770      	bx	lr
     ab2:	46c0      	nop			; (mov r8, r8)
     ab4:	40000c00 	.word	0x40000c00
     ab8:	00010700 	.word	0x00010700
     abc:	00010301 	.word	0x00010301

00000ac0 <_pm_init>:
}

static inline void hri_pm_set_CPUSEL_CPUDIV_bf(const void *const hw, hri_pm_cpusel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->CPUSEL.reg |= PM_CPUSEL_CPUDIV(mask);
     ac0:	4b07      	ldr	r3, [pc, #28]	; (ae0 <_pm_init+0x20>)
     ac2:	7a1a      	ldrb	r2, [r3, #8]
     ac4:	2101      	movs	r1, #1
     ac6:	430a      	orrs	r2, r1
     ac8:	b2d2      	uxtb	r2, r2
     aca:	721a      	strb	r2, [r3, #8]
}

static inline void hri_pm_set_APBASEL_APBADIV_bf(const void *const hw, hri_pm_apbasel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBASEL.reg |= PM_APBASEL_APBADIV(mask);
     acc:	7a5a      	ldrb	r2, [r3, #9]
     ace:	b2d2      	uxtb	r2, r2
     ad0:	725a      	strb	r2, [r3, #9]
}

static inline void hri_pm_set_APBBSEL_APBBDIV_bf(const void *const hw, hri_pm_apbbsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBBSEL.reg |= PM_APBBSEL_APBBDIV(mask);
     ad2:	7a9a      	ldrb	r2, [r3, #10]
     ad4:	b2d2      	uxtb	r2, r2
     ad6:	729a      	strb	r2, [r3, #10]
}

static inline void hri_pm_set_APBCSEL_APBCDIV_bf(const void *const hw, hri_pm_apbcsel_reg_t mask)
{
	PM_CRITICAL_SECTION_ENTER();
	((Pm *)hw)->APBCSEL.reg |= PM_APBCSEL_APBCDIV(mask);
     ad8:	7ada      	ldrb	r2, [r3, #11]
     ada:	b2d2      	uxtb	r2, r2
     adc:	72da      	strb	r2, [r3, #11]
{
	hri_pm_set_CPUSEL_CPUDIV_bf(PM, CONF_CPU_DIV);
	hri_pm_set_APBASEL_APBADIV_bf(PM, CONF_APBA_DIV);
	hri_pm_set_APBBSEL_APBBDIV_bf(PM, CONF_APBB_DIV);
	hri_pm_set_APBCSEL_APBCDIV_bf(PM, CONF_APBC_DIV);
}
     ade:	4770      	bx	lr
     ae0:	40000400 	.word	0x40000400

00000ae4 <_sercom_get_hardware_index>:
{
#ifdef _UNIT_TEST_
	return ((uint32_t)hw - (uint32_t)SERCOM0) / sizeof(Sercom);
#endif

	return ((uint32_t)hw - (uint32_t)SERCOM0) >> 10;
     ae4:	4b02      	ldr	r3, [pc, #8]	; (af0 <_sercom_get_hardware_index+0xc>)
     ae6:	469c      	mov	ip, r3
     ae8:	4460      	add	r0, ip
     aea:	0a80      	lsrs	r0, r0, #10
     aec:	b2c0      	uxtb	r0, r0
}
     aee:	4770      	bx	lr
     af0:	bdfff800 	.word	0xbdfff800

00000af4 <_get_sercom_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static uint8_t _get_sercom_index(const void *const hw)
{
     af4:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     af6:	f7ff fff5 	bl	ae4 <_sercom_get_hardware_index>
     afa:	0002      	movs	r2, r0
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     afc:	2000      	movs	r0, #0
     afe:	2800      	cmp	r0, #0
     b00:	d007      	beq.n	b12 <_get_sercom_index+0x1e>
		if (_usarts[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     b02:	4a09      	ldr	r2, [pc, #36]	; (b28 <_get_sercom_index+0x34>)
     b04:	4909      	ldr	r1, [pc, #36]	; (b2c <_get_sercom_index+0x38>)
     b06:	4479      	add	r1, pc
     b08:	2000      	movs	r0, #0
     b0a:	f7ff fea9 	bl	860 <assert>
	return 0;
     b0e:	2000      	movs	r0, #0
}
     b10:	bd10      	pop	{r4, pc}
		if (_usarts[i].number == sercom_offset) {
     b12:	0083      	lsls	r3, r0, #2
     b14:	181b      	adds	r3, r3, r0
     b16:	0099      	lsls	r1, r3, #2
     b18:	4b05      	ldr	r3, [pc, #20]	; (b30 <_get_sercom_index+0x3c>)
     b1a:	447b      	add	r3, pc
     b1c:	5ccb      	ldrb	r3, [r1, r3]
     b1e:	429a      	cmp	r2, r3
     b20:	d0f6      	beq.n	b10 <_get_sercom_index+0x1c>
	for (i = 0; i < ARRAY_SIZE(_usarts); i++) {
     b22:	3001      	adds	r0, #1
     b24:	b2c0      	uxtb	r0, r0
     b26:	e7ea      	b.n	afe <_get_sercom_index+0xa>
     b28:	0000023a 	.word	0x0000023a
     b2c:	00002c16 	.word	0x00002c16
     b30:	00002bb2 	.word	0x00002bb2

00000b34 <_usart_init>:
 * \param[in] hw The pointer to hardware instance
 *
 * \return The status of initialization
 */
static int32_t _usart_init(void *const hw)
{
     b34:	b570      	push	{r4, r5, r6, lr}
     b36:	0004      	movs	r4, r0
	uint8_t i = _get_sercom_index(hw);
     b38:	f7ff ffdc 	bl	af4 <_get_sercom_index>
	};
}

static inline bool hri_sercomusart_is_syncing(const void *const hw, hri_sercomusart_syncbusy_reg_t reg)
{
	return ((Sercom *)hw)->USART.SYNCBUSY.reg & reg;
     b3c:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomusart_is_syncing(hw, SERCOM_USART_SYNCBUSY_SWRST)) {
     b3e:	07db      	lsls	r3, r3, #31
     b40:	d41e      	bmi.n	b80 <_usart_init+0x4c>
		uint32_t mode = _usarts[i].ctrl_a & SERCOM_USART_CTRLA_MODE_Msk;
     b42:	0083      	lsls	r3, r0, #2
     b44:	181b      	adds	r3, r3, r0
     b46:	009a      	lsls	r2, r3, #2
     b48:	4b38      	ldr	r3, [pc, #224]	; (c2c <_usart_init+0xf8>)
     b4a:	447b      	add	r3, pc
     b4c:	189b      	adds	r3, r3, r2
     b4e:	685a      	ldr	r2, [r3, #4]
     b50:	231c      	movs	r3, #28
     b52:	401a      	ands	r2, r3
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b54:	69e3      	ldr	r3, [r4, #28]
     b56:	079b      	lsls	r3, r3, #30
     b58:	d1fc      	bne.n	b54 <_usart_init+0x20>
static inline hri_sercomusart_ctrla_reg_t hri_sercomusart_get_CTRLA_reg(const void *const           hw,
                                                                        hri_sercomusart_ctrla_reg_t mask)
{
	uint32_t tmp;
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST | SERCOM_USART_SYNCBUSY_ENABLE);
	tmp = ((Sercom *)hw)->USART.CTRLA.reg;
     b5a:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomusart_get_CTRLA_reg(hw, SERCOM_USART_CTRLA_ENABLE)) {
     b5c:	079b      	lsls	r3, r3, #30
     b5e:	d509      	bpl.n	b74 <_usart_init+0x40>
	((Sercom *)hw)->USART.CTRLA.reg &= ~SERCOM_USART_CTRLA_ENABLE;
     b60:	6823      	ldr	r3, [r4, #0]
     b62:	2102      	movs	r1, #2
     b64:	438b      	bics	r3, r1
     b66:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b68:	69e3      	ldr	r3, [r4, #28]
     b6a:	079b      	lsls	r3, r3, #30
     b6c:	d1fc      	bne.n	b68 <_usart_init+0x34>
     b6e:	69e3      	ldr	r3, [r4, #28]
     b70:	079b      	lsls	r3, r3, #30
     b72:	d4fc      	bmi.n	b6e <_usart_init+0x3a>
			hri_sercomusart_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_ENABLE);
		}
		hri_sercomusart_write_CTRLA_reg(hw, SERCOM_USART_CTRLA_SWRST | mode);
     b74:	2301      	movs	r3, #1
     b76:	4313      	orrs	r3, r2
}

static inline void hri_sercomusart_write_CTRLA_reg(const void *const hw, hri_sercomusart_ctrla_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b78:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b7a:	69e3      	ldr	r3, [r4, #28]
     b7c:	079b      	lsls	r3, r3, #30
     b7e:	d1fc      	bne.n	b7a <_usart_init+0x46>
     b80:	69e3      	ldr	r3, [r4, #28]
     b82:	07db      	lsls	r3, r3, #31
     b84:	d4fc      	bmi.n	b80 <_usart_init+0x4c>
	}
	hri_sercomusart_wait_for_sync(hw, SERCOM_USART_SYNCBUSY_SWRST);

	hri_sercomusart_write_CTRLA_reg(hw, _usarts[i].ctrl_a);
     b86:	0083      	lsls	r3, r0, #2
     b88:	181b      	adds	r3, r3, r0
     b8a:	009a      	lsls	r2, r3, #2
     b8c:	4b28      	ldr	r3, [pc, #160]	; (c30 <_usart_init+0xfc>)
     b8e:	447b      	add	r3, pc
     b90:	189b      	adds	r3, r3, r2
     b92:	685b      	ldr	r3, [r3, #4]
	((Sercom *)hw)->USART.CTRLA.reg = data;
     b94:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     b96:	69e3      	ldr	r3, [r4, #28]
     b98:	079b      	lsls	r3, r3, #30
     b9a:	d1fc      	bne.n	b96 <_usart_init+0x62>
	hri_sercomusart_write_CTRLB_reg(hw, _usarts[i].ctrl_b);
     b9c:	0083      	lsls	r3, r0, #2
     b9e:	181b      	adds	r3, r3, r0
     ba0:	009a      	lsls	r2, r3, #2
     ba2:	4b24      	ldr	r3, [pc, #144]	; (c34 <_usart_init+0x100>)
     ba4:	447b      	add	r3, pc
     ba6:	189b      	adds	r3, r3, r2
     ba8:	689b      	ldr	r3, [r3, #8]
}

static inline void hri_sercomusart_write_CTRLB_reg(const void *const hw, hri_sercomusart_ctrlb_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.CTRLB.reg = data;
     baa:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
     bac:	69e3      	ldr	r3, [r4, #28]
     bae:	075b      	lsls	r3, r3, #29
     bb0:	d1fc      	bne.n	bac <_usart_init+0x78>
	if ((_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x1)) || (_usarts[i].ctrl_a & SERCOM_USART_CTRLA_SAMPR(0x3))) {
     bb2:	0083      	lsls	r3, r0, #2
     bb4:	181b      	adds	r3, r3, r0
     bb6:	009a      	lsls	r2, r3, #2
     bb8:	4b1f      	ldr	r3, [pc, #124]	; (c38 <_usart_init+0x104>)
     bba:	447b      	add	r3, pc
     bbc:	189b      	adds	r3, r3, r2
     bbe:	685b      	ldr	r3, [r3, #4]
     bc0:	049a      	lsls	r2, r3, #18
     bc2:	d40c      	bmi.n	bde <_usart_init+0xaa>
     bc4:	22c0      	movs	r2, #192	; 0xc0
     bc6:	01d2      	lsls	r2, r2, #7
     bc8:	4213      	tst	r3, r2
     bca:	d108      	bne.n	bde <_usart_init+0xaa>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
	} else {
		hri_sercomusart_write_BAUD_reg(hw, _usarts[i].baud);
     bcc:	0083      	lsls	r3, r0, #2
     bce:	181b      	adds	r3, r3, r0
     bd0:	009a      	lsls	r2, r3, #2
     bd2:	4b1a      	ldr	r3, [pc, #104]	; (c3c <_usart_init+0x108>)
     bd4:	447b      	add	r3, pc
     bd6:	189b      	adds	r3, r3, r2
     bd8:	899b      	ldrh	r3, [r3, #12]
}

static inline void hri_sercomusart_write_BAUD_reg(const void *const hw, hri_sercomusart_baud_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.BAUD.reg = data;
     bda:	81a3      	strh	r3, [r4, #12]
     bdc:	e016      	b.n	c0c <_usart_init+0xd8>
		((Sercom *)hw)->USART.BAUD.FRAC.BAUD = _usarts[i].baud;
     bde:	0083      	lsls	r3, r0, #2
     be0:	181b      	adds	r3, r3, r0
     be2:	009a      	lsls	r2, r3, #2
     be4:	4916      	ldr	r1, [pc, #88]	; (c40 <_usart_init+0x10c>)
     be6:	4479      	add	r1, pc
     be8:	1889      	adds	r1, r1, r2
     bea:	898a      	ldrh	r2, [r1, #12]
     bec:	89a3      	ldrh	r3, [r4, #12]
     bee:	04d2      	lsls	r2, r2, #19
     bf0:	0cd2      	lsrs	r2, r2, #19
     bf2:	0b5b      	lsrs	r3, r3, #13
     bf4:	035b      	lsls	r3, r3, #13
     bf6:	4313      	orrs	r3, r2
     bf8:	81a3      	strh	r3, [r4, #12]
		((Sercom *)hw)->USART.BAUD.FRAC.FP   = _usarts[i].fractional;
     bfa:	7b8b      	ldrb	r3, [r1, #14]
     bfc:	2207      	movs	r2, #7
     bfe:	401a      	ands	r2, r3
     c00:	89a3      	ldrh	r3, [r4, #12]
     c02:	0352      	lsls	r2, r2, #13
     c04:	04db      	lsls	r3, r3, #19
     c06:	0cdb      	lsrs	r3, r3, #19
     c08:	4313      	orrs	r3, r2
     c0a:	81a3      	strh	r3, [r4, #12]
	}

	hri_sercomusart_write_RXPL_reg(hw, _usarts[i].rxpl);
     c0c:	4b0d      	ldr	r3, [pc, #52]	; (c44 <_usart_init+0x110>)
     c0e:	447b      	add	r3, pc
     c10:	0082      	lsls	r2, r0, #2
     c12:	1815      	adds	r5, r2, r0
     c14:	00a9      	lsls	r1, r5, #2
     c16:	000d      	movs	r5, r1
     c18:	1859      	adds	r1, r3, r1
     c1a:	7bc9      	ldrb	r1, [r1, #15]
}

static inline void hri_sercomusart_write_RXPL_reg(const void *const hw, hri_sercomusart_rxpl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.RXPL.reg = data;
     c1c:	73a1      	strb	r1, [r4, #14]
	hri_sercomusart_write_DBGCTRL_reg(hw, _usarts[i].debug_ctrl);
     c1e:	195b      	adds	r3, r3, r5
     c20:	7c1a      	ldrb	r2, [r3, #16]
}

static inline void hri_sercomusart_write_DBGCTRL_reg(const void *const hw, hri_sercomusart_dbgctrl_reg_t data)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->USART.DBGCTRL.reg = data;
     c22:	2330      	movs	r3, #48	; 0x30
     c24:	54e2      	strb	r2, [r4, r3]

	return ERR_NONE;
}
     c26:	2000      	movs	r0, #0
     c28:	bd70      	pop	{r4, r5, r6, pc}
     c2a:	46c0      	nop			; (mov r8, r8)
     c2c:	00002b82 	.word	0x00002b82
     c30:	00002b3e 	.word	0x00002b3e
     c34:	00002b28 	.word	0x00002b28
     c38:	00002b12 	.word	0x00002b12
     c3c:	00002af8 	.word	0x00002af8
     c40:	00002ae6 	.word	0x00002ae6
     c44:	00002abe 	.word	0x00002abe

00000c48 <_get_i2cm_index>:
 * \param[in] hw The pointer to hardware instance

 * \return The ordinal number of the given sercom hardware instance
 */
static int8_t _get_i2cm_index(const void *const hw)
{
     c48:	b510      	push	{r4, lr}
	uint8_t sercom_offset = _sercom_get_hardware_index(hw);
     c4a:	f7ff ff4b 	bl	ae4 <_sercom_get_hardware_index>
	uint8_t i;

	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     c4e:	2300      	movs	r3, #0
     c50:	2b00      	cmp	r3, #0
     c52:	d009      	beq.n	c68 <_get_i2cm_index+0x20>
		if (_i2cms[i].number == sercom_offset) {
			return i;
		}
	}

	ASSERT(false);
     c54:	22e6      	movs	r2, #230	; 0xe6
     c56:	0092      	lsls	r2, r2, #2
     c58:	490a      	ldr	r1, [pc, #40]	; (c84 <_get_i2cm_index+0x3c>)
     c5a:	4479      	add	r1, pc
     c5c:	2000      	movs	r0, #0
     c5e:	f7ff fdff 	bl	860 <assert>
	return -1;
     c62:	2001      	movs	r0, #1
     c64:	4240      	negs	r0, r0
}
     c66:	bd10      	pop	{r4, pc}
		if (_i2cms[i].number == sercom_offset) {
     c68:	005a      	lsls	r2, r3, #1
     c6a:	18d2      	adds	r2, r2, r3
     c6c:	00d1      	lsls	r1, r2, #3
     c6e:	4a06      	ldr	r2, [pc, #24]	; (c88 <_get_i2cm_index+0x40>)
     c70:	447a      	add	r2, pc
     c72:	1852      	adds	r2, r2, r1
     c74:	7d12      	ldrb	r2, [r2, #20]
     c76:	4290      	cmp	r0, r2
     c78:	d002      	beq.n	c80 <_get_i2cm_index+0x38>
	for (i = 0; i < ARRAY_SIZE(_i2cms); i++) {
     c7a:	3301      	adds	r3, #1
     c7c:	b2db      	uxtb	r3, r3
     c7e:	e7e7      	b.n	c50 <_get_i2cm_index+0x8>
			return i;
     c80:	b258      	sxtb	r0, r3
     c82:	e7f0      	b.n	c66 <_get_i2cm_index+0x1e>
     c84:	00002ac2 	.word	0x00002ac2
     c88:	00002a5c 	.word	0x00002a5c

00000c8c <_i2c_m_sync_init_impl>:
	}
	return ERR_NONE;
}

static int32_t _i2c_m_sync_init_impl(struct _i2c_m_service *const service, void *const hw)
{
     c8c:	b570      	push	{r4, r5, r6, lr}
     c8e:	0005      	movs	r5, r0
     c90:	000c      	movs	r4, r1
	uint8_t i = _get_i2cm_index(hw);
     c92:	0008      	movs	r0, r1
     c94:	f7ff ffd8 	bl	c48 <_get_i2cm_index>
     c98:	b2c0      	uxtb	r0, r0
	return ((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg;
     c9a:	69e3      	ldr	r3, [r4, #28]

	if (!hri_sercomi2cm_is_syncing(hw, SERCOM_I2CM_SYNCBUSY_SWRST)) {
     c9c:	07db      	lsls	r3, r3, #31
     c9e:	d41e      	bmi.n	cde <_i2c_m_sync_init_impl+0x52>
		uint32_t mode = _i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_MODE_Msk;
     ca0:	0043      	lsls	r3, r0, #1
     ca2:	181b      	adds	r3, r3, r0
     ca4:	00da      	lsls	r2, r3, #3
     ca6:	4b2c      	ldr	r3, [pc, #176]	; (d58 <_i2c_m_sync_init_impl+0xcc>)
     ca8:	447b      	add	r3, pc
     caa:	189b      	adds	r3, r3, r2
     cac:	699a      	ldr	r2, [r3, #24]
     cae:	231c      	movs	r3, #28
     cb0:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cb2:	69e3      	ldr	r3, [r4, #28]
     cb4:	079b      	lsls	r3, r3, #30
     cb6:	d1fc      	bne.n	cb2 <_i2c_m_sync_init_impl+0x26>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     cb8:	6823      	ldr	r3, [r4, #0]
		if (hri_sercomi2cm_get_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_ENABLE)) {
     cba:	079b      	lsls	r3, r3, #30
     cbc:	d509      	bpl.n	cd2 <_i2c_m_sync_init_impl+0x46>
	((Sercom *)hw)->I2CM.CTRLA.reg &= ~SERCOM_I2CM_CTRLA_ENABLE;
     cbe:	6823      	ldr	r3, [r4, #0]
     cc0:	2102      	movs	r1, #2
     cc2:	438b      	bics	r3, r1
     cc4:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cc6:	69e3      	ldr	r3, [r4, #28]
     cc8:	079b      	lsls	r3, r3, #30
     cca:	d1fc      	bne.n	cc6 <_i2c_m_sync_init_impl+0x3a>
     ccc:	69e3      	ldr	r3, [r4, #28]
     cce:	079b      	lsls	r3, r3, #30
     cd0:	d4fc      	bmi.n	ccc <_i2c_m_sync_init_impl+0x40>
			hri_sercomi2cm_clear_CTRLA_ENABLE_bit(hw);
			hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_ENABLE);
		}
		hri_sercomi2cm_write_CTRLA_reg(hw, SERCOM_I2CM_CTRLA_SWRST | mode);
     cd2:	2301      	movs	r3, #1
     cd4:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     cd6:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cd8:	69e3      	ldr	r3, [r4, #28]
     cda:	079b      	lsls	r3, r3, #30
     cdc:	d1fc      	bne.n	cd8 <_i2c_m_sync_init_impl+0x4c>
     cde:	69e3      	ldr	r3, [r4, #28]
     ce0:	07db      	lsls	r3, r3, #31
     ce2:	d4fc      	bmi.n	cde <_i2c_m_sync_init_impl+0x52>
	}
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SWRST);

	hri_sercomi2cm_write_CTRLA_reg(hw, _i2cms[i].ctrl_a);
     ce4:	0043      	lsls	r3, r0, #1
     ce6:	181b      	adds	r3, r3, r0
     ce8:	00da      	lsls	r2, r3, #3
     cea:	4b1c      	ldr	r3, [pc, #112]	; (d5c <_i2c_m_sync_init_impl+0xd0>)
     cec:	447b      	add	r3, pc
     cee:	189b      	adds	r3, r3, r2
     cf0:	699b      	ldr	r3, [r3, #24]
	((Sercom *)hw)->I2CM.CTRLA.reg = data;
     cf2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     cf4:	69e3      	ldr	r3, [r4, #28]
     cf6:	079b      	lsls	r3, r3, #30
     cf8:	d1fc      	bne.n	cf4 <_i2c_m_sync_init_impl+0x68>
	hri_sercomi2cm_write_CTRLB_reg(hw, _i2cms[i].ctrl_b);
     cfa:	0043      	lsls	r3, r0, #1
     cfc:	181b      	adds	r3, r3, r0
     cfe:	00da      	lsls	r2, r3, #3
     d00:	4b17      	ldr	r3, [pc, #92]	; (d60 <_i2c_m_sync_init_impl+0xd4>)
     d02:	447b      	add	r3, pc
     d04:	189b      	adds	r3, r3, r2
     d06:	69db      	ldr	r3, [r3, #28]
	((Sercom *)hw)->I2CM.CTRLB.reg = data;
     d08:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d0a:	69e3      	ldr	r3, [r4, #28]
     d0c:	075b      	lsls	r3, r3, #29
     d0e:	d4fc      	bmi.n	d0a <_i2c_m_sync_init_impl+0x7e>
	hri_sercomi2cm_write_BAUD_reg(hw, _i2cms[i].baud);
     d10:	0042      	lsls	r2, r0, #1
     d12:	1812      	adds	r2, r2, r0
     d14:	00d1      	lsls	r1, r2, #3
     d16:	4b13      	ldr	r3, [pc, #76]	; (d64 <_i2c_m_sync_init_impl+0xd8>)
     d18:	447b      	add	r3, pc
     d1a:	185b      	adds	r3, r3, r1
	((Sercom *)hw)->I2CM.BAUD.reg = data;
     d1c:	6a1a      	ldr	r2, [r3, #32]
     d1e:	60e2      	str	r2, [r4, #12]

	service->mode = (_i2cms[i].ctrl_a & SERCOM_I2CM_CTRLA_SPEED_Msk) >> SERCOM_I2CM_CTRLA_SPEED_Pos;
     d20:	7eda      	ldrb	r2, [r3, #27]
     d22:	2303      	movs	r3, #3
     d24:	401a      	ands	r2, r3
     d26:	81aa      	strh	r2, [r5, #12]
	hri_sercomi2cm_write_ADDR_HS_bit(hw, service->mode < I2C_HS ? 0 : 1);
     d28:	3b02      	subs	r3, #2
     d2a:	4293      	cmp	r3, r2
     d2c:	419b      	sbcs	r3, r3
     d2e:	425b      	negs	r3, r3
	tmp = ((Sercom *)hw)->I2CM.ADDR.reg;
     d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
	tmp &= ~SERCOM_I2CM_ADDR_HS;
     d32:	490d      	ldr	r1, [pc, #52]	; (d68 <_i2c_m_sync_init_impl+0xdc>)
     d34:	400a      	ands	r2, r1
	tmp |= value << SERCOM_I2CM_ADDR_HS_Pos;
     d36:	039b      	lsls	r3, r3, #14
     d38:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = tmp;
     d3a:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d3c:	69e3      	ldr	r3, [r4, #28]
     d3e:	075b      	lsls	r3, r3, #29
     d40:	d4fc      	bmi.n	d3c <_i2c_m_sync_init_impl+0xb0>

	service->trise = _i2cms[i].trise;
     d42:	0043      	lsls	r3, r0, #1
     d44:	1818      	adds	r0, r3, r0
     d46:	00c2      	lsls	r2, r0, #3
     d48:	4b08      	ldr	r3, [pc, #32]	; (d6c <_i2c_m_sync_init_impl+0xe0>)
     d4a:	447b      	add	r3, pc
     d4c:	189b      	adds	r3, r3, r2
     d4e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
     d50:	81eb      	strh	r3, [r5, #14]

	return ERR_NONE;
}
     d52:	2000      	movs	r0, #0
     d54:	bd70      	pop	{r4, r5, r6, pc}
     d56:	46c0      	nop			; (mov r8, r8)
     d58:	00002a24 	.word	0x00002a24
     d5c:	000029e0 	.word	0x000029e0
     d60:	000029ca 	.word	0x000029ca
     d64:	000029b4 	.word	0x000029b4
     d68:	ffffbfff 	.word	0xffffbfff
     d6c:	00002982 	.word	0x00002982

00000d70 <_sercom_i2c_sync_send_address>:
{
     d70:	b570      	push	{r4, r5, r6, lr}
     d72:	0005      	movs	r5, r0
	void *             hw    = i2c_dev->hw;
     d74:	6904      	ldr	r4, [r0, #16]
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     d76:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     d78:	0edb      	lsrs	r3, r3, #27
     d7a:	2601      	movs	r6, #1
     d7c:	401e      	ands	r6, r3
	ASSERT(i2c_dev);
     d7e:	1e43      	subs	r3, r0, #1
     d80:	4198      	sbcs	r0, r3
     d82:	b2c0      	uxtb	r0, r0
     d84:	4a8f      	ldr	r2, [pc, #572]	; (fc4 <_sercom_i2c_sync_send_address+0x254>)
     d86:	4990      	ldr	r1, [pc, #576]	; (fc8 <_sercom_i2c_sync_send_address+0x258>)
     d88:	4479      	add	r1, pc
     d8a:	f7ff fd69 	bl	860 <assert>
	if (msg->len == 1 && sclsm) {
     d8e:	686b      	ldr	r3, [r5, #4]
     d90:	2b01      	cmp	r3, #1
     d92:	d04d      	beq.n	e30 <_sercom_i2c_sync_send_address+0xc0>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_ACKACT;
     d94:	6863      	ldr	r3, [r4, #4]
     d96:	4a8d      	ldr	r2, [pc, #564]	; (fcc <_sercom_i2c_sync_send_address+0x25c>)
     d98:	4013      	ands	r3, r2
     d9a:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     d9c:	69e3      	ldr	r3, [r4, #28]
     d9e:	075b      	lsls	r3, r3, #29
     da0:	d4fc      	bmi.n	d9c <_sercom_i2c_sync_send_address+0x2c>
	if (msg->addr & I2C_M_TEN) {
     da2:	882b      	ldrh	r3, [r5, #0]
     da4:	055a      	lsls	r2, r3, #21
     da6:	d54e      	bpl.n	e46 <_sercom_i2c_sync_send_address+0xd6>
		if (msg->flags & I2C_M_RD) {
     da8:	886a      	ldrh	r2, [r5, #2]
     daa:	07d2      	lsls	r2, r2, #31
     dac:	d504      	bpl.n	db8 <_sercom_i2c_sync_send_address+0x48>
			msg->flags |= I2C_M_TEN;
     dae:	886a      	ldrh	r2, [r5, #2]
     db0:	2180      	movs	r1, #128	; 0x80
     db2:	00c9      	lsls	r1, r1, #3
     db4:	430a      	orrs	r2, r1
     db6:	806a      	strh	r2, [r5, #2]
		                              ((msg->addr & TEN_ADDR_MASK) << 1) | SERCOM_I2CM_ADDR_TENBITEN
     db8:	005b      	lsls	r3, r3, #1
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     dba:	4a85      	ldr	r2, [pc, #532]	; (fd0 <_sercom_i2c_sync_send_address+0x260>)
     dbc:	401a      	ands	r2, r3
     dbe:	69e3      	ldr	r3, [r4, #28]
     dc0:	075b      	lsls	r3, r3, #29
     dc2:	d4fc      	bmi.n	dbe <_sercom_i2c_sync_send_address+0x4e>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     dc4:	6a63      	ldr	r3, [r4, #36]	; 0x24
     dc6:	2180      	movs	r1, #128	; 0x80
     dc8:	01c9      	lsls	r1, r1, #7
     dca:	400b      	ands	r3, r1
     dcc:	4313      	orrs	r3, r2
		hri_sercomi2cm_write_ADDR_reg(hw,
     dce:	2280      	movs	r2, #128	; 0x80
     dd0:	0212      	lsls	r2, r2, #8
     dd2:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     dd4:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dd6:	69e3      	ldr	r3, [r4, #28]
     dd8:	075b      	lsls	r3, r3, #29
     dda:	d4fc      	bmi.n	dd6 <_sercom_i2c_sync_send_address+0x66>
	void *   hw      = i2c_dev->hw;
     ddc:	692e      	ldr	r6, [r5, #16]
	uint32_t timeout = 65535;
     dde:	4a7d      	ldr	r2, [pc, #500]	; (fd4 <_sercom_i2c_sync_send_address+0x264>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
     de0:	7e33      	ldrb	r3, [r6, #24]
     de2:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
     de4:	0018      	movs	r0, r3
		if (timeout-- == 0) {
     de6:	1e51      	subs	r1, r2, #1
     de8:	2a00      	cmp	r2, #0
     dea:	d002      	beq.n	df2 <_sercom_i2c_sync_send_address+0x82>
     dec:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
     dee:	079b      	lsls	r3, r3, #30
     df0:	d0f6      	beq.n	de0 <_sercom_i2c_sync_send_address+0x70>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
     df2:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
     df4:	0edb      	lsrs	r3, r3, #27
     df6:	2201      	movs	r2, #1
     df8:	401a      	ands	r2, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     dfa:	69e3      	ldr	r3, [r4, #28]
     dfc:	075b      	lsls	r3, r3, #29
     dfe:	d4fc      	bmi.n	dfa <_sercom_i2c_sync_send_address+0x8a>
}

static inline hri_sercomi2cm_status_reg_t hri_sercomi2cm_read_STATUS_reg(const void *const hw)
{
	hri_sercomi2cm_wait_for_sync(hw, SERCOM_I2CM_SYNCBUSY_SYSOP);
	return ((Sercom *)hw)->I2CM.STATUS.reg;
     e00:	8b63      	ldrh	r3, [r4, #26]
     e02:	b29b      	uxth	r3, r3
	if (flags & MB_FLAG) {
     e04:	07c1      	lsls	r1, r0, #31
     e06:	d400      	bmi.n	e0a <_sercom_i2c_sync_send_address+0x9a>
     e08:	e08f      	b.n	f2a <_sercom_i2c_sync_send_address+0x1ba>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
     e0a:	079a      	lsls	r2, r3, #30
     e0c:	d52f      	bpl.n	e6e <_sercom_i2c_sync_send_address+0xfe>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
     e0e:	2201      	movs	r2, #1
     e10:	7622      	strb	r2, [r4, #24]
			msg->flags |= I2C_M_FAIL;
     e12:	886a      	ldrh	r2, [r5, #2]
     e14:	2180      	movs	r1, #128	; 0x80
     e16:	0149      	lsls	r1, r1, #5
     e18:	430a      	orrs	r2, r1
     e1a:	806a      	strh	r2, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
     e1c:	886a      	ldrh	r2, [r5, #2]
     e1e:	496e      	ldr	r1, [pc, #440]	; (fd8 <_sercom_i2c_sync_send_address+0x268>)
     e20:	400a      	ands	r2, r1
     e22:	806a      	strh	r2, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
     e24:	07db      	lsls	r3, r3, #31
     e26:	d400      	bmi.n	e2a <_sercom_i2c_sync_send_address+0xba>
     e28:	e0c6      	b.n	fb8 <_sercom_i2c_sync_send_address+0x248>
				return I2C_ERR_BUS;
     e2a:	2005      	movs	r0, #5
     e2c:	4240      	negs	r0, r0
     e2e:	e0a2      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
	if (msg->len == 1 && sclsm) {
     e30:	2e00      	cmp	r6, #0
     e32:	d0af      	beq.n	d94 <_sercom_i2c_sync_send_address+0x24>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     e34:	6862      	ldr	r2, [r4, #4]
     e36:	2380      	movs	r3, #128	; 0x80
     e38:	02db      	lsls	r3, r3, #11
     e3a:	4313      	orrs	r3, r2
     e3c:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e3e:	69e3      	ldr	r3, [r4, #28]
     e40:	075b      	lsls	r3, r3, #29
     e42:	d4fc      	bmi.n	e3e <_sercom_i2c_sync_send_address+0xce>
     e44:	e7ad      	b.n	da2 <_sercom_i2c_sync_send_address+0x32>
		                              ((msg->addr & SEVEN_ADDR_MASK) << 1) | (msg->flags & I2C_M_RD ? I2C_M_RD : 0x0)
     e46:	005b      	lsls	r3, r3, #1
     e48:	22ff      	movs	r2, #255	; 0xff
     e4a:	4013      	ands	r3, r2
     e4c:	886a      	ldrh	r2, [r5, #2]
     e4e:	2101      	movs	r1, #1
     e50:	400a      	ands	r2, r1
     e52:	431a      	orrs	r2, r3
     e54:	69e3      	ldr	r3, [r4, #28]
     e56:	075b      	lsls	r3, r3, #29
     e58:	d4fc      	bmi.n	e54 <_sercom_i2c_sync_send_address+0xe4>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     e5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
		                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     e5c:	2180      	movs	r1, #128	; 0x80
     e5e:	01c9      	lsls	r1, r1, #7
     e60:	400b      	ands	r3, r1
		hri_sercomi2cm_write_ADDR_reg(hw,
     e62:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     e64:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e66:	69e3      	ldr	r3, [r4, #28]
     e68:	075b      	lsls	r3, r3, #29
     e6a:	d4fc      	bmi.n	e66 <_sercom_i2c_sync_send_address+0xf6>
     e6c:	e7b6      	b.n	ddc <_sercom_i2c_sync_send_address+0x6c>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
     e6e:	075b      	lsls	r3, r3, #29
     e70:	d41b      	bmi.n	eaa <_sercom_i2c_sync_send_address+0x13a>
			if (msg->flags & I2C_M_TEN) {
     e72:	886b      	ldrh	r3, [r5, #2]
     e74:	055b      	lsls	r3, r3, #21
     e76:	d534      	bpl.n	ee2 <_sercom_i2c_sync_send_address+0x172>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
     e78:	882a      	ldrh	r2, [r5, #0]
     e7a:	1212      	asrs	r2, r2, #8
     e7c:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
     e7e:	2306      	movs	r3, #6
     e80:	401a      	ands	r2, r3
     e82:	69e3      	ldr	r3, [r4, #28]
     e84:	075b      	lsls	r3, r3, #29
     e86:	d4fc      	bmi.n	e82 <_sercom_i2c_sync_send_address+0x112>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
     e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
     e8a:	2180      	movs	r1, #128	; 0x80
     e8c:	01c9      	lsls	r1, r1, #7
     e8e:	400b      	ands	r3, r1
     e90:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
     e92:	22f1      	movs	r2, #241	; 0xf1
     e94:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
     e96:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     e98:	69e3      	ldr	r3, [r4, #28]
     e9a:	075b      	lsls	r3, r3, #29
     e9c:	d4fc      	bmi.n	e98 <_sercom_i2c_sync_send_address+0x128>
				msg->flags &= ~I2C_M_TEN;
     e9e:	886b      	ldrh	r3, [r5, #2]
     ea0:	4a4e      	ldr	r2, [pc, #312]	; (fdc <_sercom_i2c_sync_send_address+0x26c>)
     ea2:	4013      	ands	r3, r2
     ea4:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
     ea6:	2000      	movs	r0, #0
     ea8:	e065      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
				if (msg->len > 0) {
     eaa:	686b      	ldr	r3, [r5, #4]
     eac:	2b00      	cmp	r3, #0
     eae:	dd04      	ble.n	eba <_sercom_i2c_sync_send_address+0x14a>
					msg->flags |= I2C_M_FAIL;
     eb0:	886b      	ldrh	r3, [r5, #2]
     eb2:	2280      	movs	r2, #128	; 0x80
     eb4:	0152      	lsls	r2, r2, #5
     eb6:	4313      	orrs	r3, r2
     eb8:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
     eba:	886b      	ldrh	r3, [r5, #2]
     ebc:	b21b      	sxth	r3, r3
     ebe:	2b00      	cmp	r3, #0
     ec0:	db06      	blt.n	ed0 <_sercom_i2c_sync_send_address+0x160>
				msg->flags &= ~I2C_M_BUSY;
     ec2:	886b      	ldrh	r3, [r5, #2]
     ec4:	4a44      	ldr	r2, [pc, #272]	; (fd8 <_sercom_i2c_sync_send_address+0x268>)
     ec6:	4013      	ands	r3, r2
     ec8:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
     eca:	2002      	movs	r0, #2
     ecc:	4240      	negs	r0, r0
     ece:	e052      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     ed0:	6862      	ldr	r2, [r4, #4]
     ed2:	23c0      	movs	r3, #192	; 0xc0
     ed4:	029b      	lsls	r3, r3, #10
     ed6:	4313      	orrs	r3, r2
     ed8:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     eda:	69e3      	ldr	r3, [r4, #28]
     edc:	075b      	lsls	r3, r3, #29
     ede:	d4fc      	bmi.n	eda <_sercom_i2c_sync_send_address+0x16a>
     ee0:	e7ef      	b.n	ec2 <_sercom_i2c_sync_send_address+0x152>
			if (msg->len == 0) {
     ee2:	6868      	ldr	r0, [r5, #4]
     ee4:	2800      	cmp	r0, #0
     ee6:	d111      	bne.n	f0c <_sercom_i2c_sync_send_address+0x19c>
				if (msg->flags & I2C_M_STOP) {
     ee8:	886b      	ldrh	r3, [r5, #2]
     eea:	b21b      	sxth	r3, r3
     eec:	2b00      	cmp	r3, #0
     eee:	db04      	blt.n	efa <_sercom_i2c_sync_send_address+0x18a>
				msg->flags &= ~I2C_M_BUSY;
     ef0:	886b      	ldrh	r3, [r5, #2]
     ef2:	4a39      	ldr	r2, [pc, #228]	; (fd8 <_sercom_i2c_sync_send_address+0x268>)
     ef4:	4013      	ands	r3, r2
     ef6:	806b      	strh	r3, [r5, #2]
     ef8:	e03d      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     efa:	6862      	ldr	r2, [r4, #4]
     efc:	23c0      	movs	r3, #192	; 0xc0
     efe:	029b      	lsls	r3, r3, #10
     f00:	4313      	orrs	r3, r2
     f02:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f04:	69e3      	ldr	r3, [r4, #28]
     f06:	075b      	lsls	r3, r3, #29
     f08:	d4fc      	bmi.n	f04 <_sercom_i2c_sync_send_address+0x194>
     f0a:	e7f1      	b.n	ef0 <_sercom_i2c_sync_send_address+0x180>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
     f0c:	68ab      	ldr	r3, [r5, #8]
     f0e:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
     f10:	2328      	movs	r3, #40	; 0x28
     f12:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f14:	69e3      	ldr	r3, [r4, #28]
     f16:	075b      	lsls	r3, r3, #29
     f18:	d4fc      	bmi.n	f14 <_sercom_i2c_sync_send_address+0x1a4>
				msg->buffer++;
     f1a:	68ab      	ldr	r3, [r5, #8]
     f1c:	3301      	adds	r3, #1
     f1e:	60ab      	str	r3, [r5, #8]
				msg->len--;
     f20:	686b      	ldr	r3, [r5, #4]
     f22:	3b01      	subs	r3, #1
     f24:	606b      	str	r3, [r5, #4]
			return I2C_OK;
     f26:	2000      	movs	r0, #0
     f28:	e025      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
	} else if (flags & SB_FLAG) {
     f2a:	0781      	lsls	r1, r0, #30
     f2c:	d547      	bpl.n	fbe <_sercom_i2c_sync_send_address+0x24e>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
     f2e:	6869      	ldr	r1, [r5, #4]
     f30:	2900      	cmp	r1, #0
     f32:	d03c      	beq.n	fae <_sercom_i2c_sync_send_address+0x23e>
     f34:	075b      	lsls	r3, r3, #29
     f36:	d43a      	bmi.n	fae <_sercom_i2c_sync_send_address+0x23e>
			msg->len--;
     f38:	3901      	subs	r1, #1
     f3a:	6069      	str	r1, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     f3c:	2900      	cmp	r1, #0
     f3e:	d101      	bne.n	f44 <_sercom_i2c_sync_send_address+0x1d4>
     f40:	2a00      	cmp	r2, #0
     f42:	d01b      	beq.n	f7c <_sercom_i2c_sync_send_address+0x20c>
     f44:	2901      	cmp	r1, #1
     f46:	d017      	beq.n	f78 <_sercom_i2c_sync_send_address+0x208>
			if (msg->len == 0) {
     f48:	686b      	ldr	r3, [r5, #4]
     f4a:	2b00      	cmp	r3, #0
     f4c:	d107      	bne.n	f5e <_sercom_i2c_sync_send_address+0x1ee>
				if (msg->flags & I2C_M_STOP) {
     f4e:	886b      	ldrh	r3, [r5, #2]
     f50:	b21b      	sxth	r3, r3
     f52:	2b00      	cmp	r3, #0
     f54:	db1b      	blt.n	f8e <_sercom_i2c_sync_send_address+0x21e>
				msg->flags &= ~I2C_M_BUSY;
     f56:	886b      	ldrh	r3, [r5, #2]
     f58:	4a1f      	ldr	r2, [pc, #124]	; (fd8 <_sercom_i2c_sync_send_address+0x268>)
     f5a:	4013      	ands	r3, r2
     f5c:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
     f5e:	68aa      	ldr	r2, [r5, #8]
     f60:	1c53      	adds	r3, r2, #1
     f62:	60ab      	str	r3, [r5, #8]
     f64:	69e3      	ldr	r3, [r4, #28]
     f66:	075b      	lsls	r3, r3, #29
     f68:	d4fc      	bmi.n	f64 <_sercom_i2c_sync_send_address+0x1f4>
	return ((Sercom *)hw)->I2CM.DATA.reg;
     f6a:	2328      	movs	r3, #40	; 0x28
     f6c:	5ce3      	ldrb	r3, [r4, r3]
     f6e:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     f70:	2302      	movs	r3, #2
     f72:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
     f74:	2000      	movs	r0, #0
}
     f76:	bd70      	pop	{r4, r5, r6, pc}
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
     f78:	2a00      	cmp	r2, #0
     f7a:	d0e5      	beq.n	f48 <_sercom_i2c_sync_send_address+0x1d8>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
     f7c:	6862      	ldr	r2, [r4, #4]
     f7e:	2380      	movs	r3, #128	; 0x80
     f80:	02db      	lsls	r3, r3, #11
     f82:	4313      	orrs	r3, r2
     f84:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f86:	69e3      	ldr	r3, [r4, #28]
     f88:	075b      	lsls	r3, r3, #29
     f8a:	d4fc      	bmi.n	f86 <_sercom_i2c_sync_send_address+0x216>
     f8c:	e7dc      	b.n	f48 <_sercom_i2c_sync_send_address+0x1d8>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
     f8e:	6863      	ldr	r3, [r4, #4]
     f90:	4a11      	ldr	r2, [pc, #68]	; (fd8 <_sercom_i2c_sync_send_address+0x268>)
     f92:	4013      	ands	r3, r2
     f94:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     f96:	69e3      	ldr	r3, [r4, #28]
     f98:	075b      	lsls	r3, r3, #29
     f9a:	d4fc      	bmi.n	f96 <_sercom_i2c_sync_send_address+0x226>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
     f9c:	6862      	ldr	r2, [r4, #4]
     f9e:	23c0      	movs	r3, #192	; 0xc0
     fa0:	029b      	lsls	r3, r3, #10
     fa2:	4313      	orrs	r3, r2
     fa4:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
     fa6:	69e3      	ldr	r3, [r4, #28]
     fa8:	075b      	lsls	r3, r3, #29
     faa:	d4fc      	bmi.n	fa6 <_sercom_i2c_sync_send_address+0x236>
     fac:	e7d3      	b.n	f56 <_sercom_i2c_sync_send_address+0x1e6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
     fae:	2302      	movs	r3, #2
     fb0:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
     fb2:	2002      	movs	r0, #2
     fb4:	4240      	negs	r0, r0
     fb6:	e7de      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
			return I2C_ERR_BAD_ADDRESS;
     fb8:	2004      	movs	r0, #4
     fba:	4240      	negs	r0, r0
     fbc:	e7db      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
	return I2C_OK;
     fbe:	2000      	movs	r0, #0
	return _sercom_i2c_sync_analyse_flags(hw, flags, msg);
     fc0:	e7d9      	b.n	f76 <_sercom_i2c_sync_send_address+0x206>
     fc2:	46c0      	nop			; (mov r8, r8)
     fc4:	00000594 	.word	0x00000594
     fc8:	00002994 	.word	0x00002994
     fcc:	fffbffff 	.word	0xfffbffff
     fd0:	000007fe 	.word	0x000007fe
     fd4:	0000ffff 	.word	0x0000ffff
     fd8:	fffffeff 	.word	0xfffffeff
     fdc:	fffffbff 	.word	0xfffffbff

00000fe0 <_usart_sync_init>:
{
     fe0:	b570      	push	{r4, r5, r6, lr}
     fe2:	0005      	movs	r5, r0
     fe4:	000c      	movs	r4, r1
	ASSERT(device);
     fe6:	1e43      	subs	r3, r0, #1
     fe8:	4198      	sbcs	r0, r3
     fea:	b2c0      	uxtb	r0, r0
     fec:	22b4      	movs	r2, #180	; 0xb4
     fee:	4904      	ldr	r1, [pc, #16]	; (1000 <_usart_sync_init+0x20>)
     ff0:	4479      	add	r1, pc
     ff2:	f7ff fc35 	bl	860 <assert>
	device->hw = hw;
     ff6:	602c      	str	r4, [r5, #0]
	return _usart_init(hw);
     ff8:	0020      	movs	r0, r4
     ffa:	f7ff fd9b 	bl	b34 <_usart_init>
}
     ffe:	bd70      	pop	{r4, r5, r6, pc}
    1000:	0000272c 	.word	0x0000272c

00001004 <_usart_sync_enable>:
	hri_sercomusart_set_CTRLA_ENABLE_bit(device->hw);
    1004:	6802      	ldr	r2, [r0, #0]
	((Sercom *)hw)->USART.CTRLA.reg |= SERCOM_USART_CTRLA_ENABLE;
    1006:	6813      	ldr	r3, [r2, #0]
    1008:	2102      	movs	r1, #2
    100a:	430b      	orrs	r3, r1
    100c:	6013      	str	r3, [r2, #0]
	while (((Sercom *)hw)->USART.SYNCBUSY.reg & reg) {
    100e:	69d3      	ldr	r3, [r2, #28]
    1010:	079b      	lsls	r3, r3, #30
    1012:	d1fc      	bne.n	100e <_usart_sync_enable+0xa>
}
    1014:	4770      	bx	lr

00001016 <_usart_sync_write_byte>:
	hri_sercomusart_write_DATA_reg(device->hw, data);
    1016:	6803      	ldr	r3, [r0, #0]
    1018:	b289      	uxth	r1, r1
	((Sercom *)hw)->USART.DATA.reg = data;
    101a:	8519      	strh	r1, [r3, #40]	; 0x28
}
    101c:	4770      	bx	lr

0000101e <_usart_sync_read_byte>:
	return hri_sercomusart_read_DATA_reg(device->hw);
    101e:	6803      	ldr	r3, [r0, #0]
	return ((Sercom *)hw)->USART.DATA.reg;
    1020:	8d18      	ldrh	r0, [r3, #40]	; 0x28
    1022:	b2c0      	uxtb	r0, r0
}
    1024:	4770      	bx	lr

00001026 <_usart_sync_is_ready_to_send>:
	return hri_sercomusart_get_interrupt_DRE_bit(device->hw);
    1026:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_DRE) >> SERCOM_USART_INTFLAG_DRE_Pos;
    1028:	7e18      	ldrb	r0, [r3, #24]
    102a:	2301      	movs	r3, #1
    102c:	4018      	ands	r0, r3
}
    102e:	4770      	bx	lr

00001030 <_usart_sync_is_transmit_done>:
	return hri_sercomusart_get_interrupt_TXC_bit(device->hw);
    1030:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_TXC) >> SERCOM_USART_INTFLAG_TXC_Pos;
    1032:	7e1b      	ldrb	r3, [r3, #24]
    1034:	085b      	lsrs	r3, r3, #1
    1036:	2001      	movs	r0, #1
    1038:	4018      	ands	r0, r3
}
    103a:	4770      	bx	lr

0000103c <_usart_sync_is_byte_received>:
	return hri_sercomusart_get_interrupt_RXC_bit(device->hw);
    103c:	6803      	ldr	r3, [r0, #0]
	return (((Sercom *)hw)->USART.INTFLAG.reg & SERCOM_USART_INTFLAG_RXC) >> SERCOM_USART_INTFLAG_RXC_Pos;
    103e:	7e1b      	ldrb	r3, [r3, #24]
    1040:	089b      	lsrs	r3, r3, #2
    1042:	2001      	movs	r0, #1
    1044:	4018      	ands	r0, r3
}
    1046:	4770      	bx	lr

00001048 <_i2c_m_sync_init>:
{
    1048:	b570      	push	{r4, r5, r6, lr}
    104a:	0004      	movs	r4, r0
    104c:	000d      	movs	r5, r1
	ASSERT(i2c_dev);
    104e:	1e43      	subs	r3, r0, #1
    1050:	4198      	sbcs	r0, r3
    1052:	b2c0      	uxtb	r0, r0
    1054:	4a05      	ldr	r2, [pc, #20]	; (106c <_i2c_m_sync_init+0x24>)
    1056:	4906      	ldr	r1, [pc, #24]	; (1070 <_i2c_m_sync_init+0x28>)
    1058:	4479      	add	r1, pc
    105a:	f7ff fc01 	bl	860 <assert>
	i2c_dev->hw = hw;
    105e:	6125      	str	r5, [r4, #16]
	return _i2c_m_sync_init_impl(&i2c_dev->service, hw);
    1060:	0029      	movs	r1, r5
    1062:	0020      	movs	r0, r4
    1064:	f7ff fe12 	bl	c8c <_i2c_m_sync_init_impl>
}
    1068:	bd70      	pop	{r4, r5, r6, pc}
    106a:	46c0      	nop			; (mov r8, r8)
    106c:	00000507 	.word	0x00000507
    1070:	000026c4 	.word	0x000026c4

00001074 <_i2c_m_sync_enable>:
{
    1074:	b570      	push	{r4, r5, r6, lr}
    1076:	0004      	movs	r4, r0
	ASSERT(i2c_dev);
    1078:	4d1a      	ldr	r5, [pc, #104]	; (10e4 <_i2c_m_sync_enable+0x70>)
    107a:	447d      	add	r5, pc
    107c:	1e43      	subs	r3, r0, #1
    107e:	4198      	sbcs	r0, r3
    1080:	b2c0      	uxtb	r0, r0
    1082:	4a19      	ldr	r2, [pc, #100]	; (10e8 <_i2c_m_sync_enable+0x74>)
    1084:	0029      	movs	r1, r5
    1086:	f7ff fbeb 	bl	860 <assert>
	return _i2c_m_enable_implementation(i2c_dev->hw);
    108a:	6924      	ldr	r4, [r4, #16]
	ASSERT(hw);
    108c:	0020      	movs	r0, r4
    108e:	1e43      	subs	r3, r0, #1
    1090:	4198      	sbcs	r0, r3
    1092:	b2c0      	uxtb	r0, r0
    1094:	4a15      	ldr	r2, [pc, #84]	; (10ec <_i2c_m_sync_enable+0x78>)
    1096:	0029      	movs	r1, r5
    1098:	f7ff fbe2 	bl	860 <assert>
	((Sercom *)hw)->I2CM.CTRLA.reg |= SERCOM_I2CM_CTRLA_ENABLE;
    109c:	6823      	ldr	r3, [r4, #0]
    109e:	2202      	movs	r2, #2
    10a0:	4313      	orrs	r3, r2
    10a2:	6023      	str	r3, [r4, #0]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10a4:	69e3      	ldr	r3, [r4, #28]
    10a6:	079b      	lsls	r3, r3, #30
    10a8:	d1fc      	bne.n	10a4 <_i2c_m_sync_enable+0x30>
    10aa:	2004      	movs	r0, #4
    10ac:	4910      	ldr	r1, [pc, #64]	; (10f0 <_i2c_m_sync_enable+0x7c>)
    10ae:	69e3      	ldr	r3, [r4, #28]
    10b0:	075b      	lsls	r3, r3, #29
    10b2:	d4fc      	bmi.n	10ae <_i2c_m_sync_enable+0x3a>
	return (((Sercom *)hw)->I2CM.STATUS.reg & SERCOM_I2CM_STATUS_BUSSTATE_Msk) >> SERCOM_I2CM_STATUS_BUSSTATE_Pos;
    10b4:	8b62      	ldrh	r2, [r4, #26]
    10b6:	0912      	lsrs	r2, r2, #4
    10b8:	2303      	movs	r3, #3
    10ba:	4013      	ands	r3, r2
	while (hri_sercomi2cm_read_STATUS_BUSSTATE_bf(hw) != I2C_IDLE) {
    10bc:	2b01      	cmp	r3, #1
    10be:	d00b      	beq.n	10d8 <_i2c_m_sync_enable+0x64>
		timeout--;
    10c0:	3901      	subs	r1, #1
		if (timeout <= 0) {
    10c2:	2900      	cmp	r1, #0
    10c4:	dcf3      	bgt.n	10ae <_i2c_m_sync_enable+0x3a>
			if (--timeout_attempt)
    10c6:	3801      	subs	r0, #1
    10c8:	2800      	cmp	r0, #0
    10ca:	d007      	beq.n	10dc <_i2c_m_sync_enable+0x68>
}

static inline void hri_sercomi2cm_clear_STATUS_reg(const void *const hw, hri_sercomi2cm_status_reg_t mask)
{
	SERCOM_CRITICAL_SECTION_ENTER();
	((Sercom *)hw)->I2CM.STATUS.reg = mask;
    10cc:	2310      	movs	r3, #16
    10ce:	8363      	strh	r3, [r4, #26]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    10d0:	69e3      	ldr	r3, [r4, #28]
    10d2:	075b      	lsls	r3, r3, #29
    10d4:	d4fc      	bmi.n	10d0 <_i2c_m_sync_enable+0x5c>
    10d6:	e7e9      	b.n	10ac <_i2c_m_sync_enable+0x38>
	return ERR_NONE;
    10d8:	2000      	movs	r0, #0
}
    10da:	bd70      	pop	{r4, r5, r6, pc}
				return I2C_ERR_BUSY;
    10dc:	2006      	movs	r0, #6
    10de:	4240      	negs	r0, r0
	return _i2c_m_enable_implementation(i2c_dev->hw);
    10e0:	e7fb      	b.n	10da <_i2c_m_sync_enable+0x66>
    10e2:	46c0      	nop			; (mov r8, r8)
    10e4:	000026a2 	.word	0x000026a2
    10e8:	00000524 	.word	0x00000524
    10ec:	000005f4 	.word	0x000005f4
    10f0:	0000ffff 	.word	0x0000ffff

000010f4 <_i2c_m_sync_transfer>:
{
    10f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    10f6:	0005      	movs	r5, r0
    10f8:	000e      	movs	r6, r1
	void *   hw = i2c_dev->hw;
    10fa:	6904      	ldr	r4, [r0, #16]
	ASSERT(i2c_dev);
    10fc:	4f96      	ldr	r7, [pc, #600]	; (1358 <_i2c_m_sync_transfer+0x264>)
    10fe:	447f      	add	r7, pc
    1100:	1e43      	subs	r3, r0, #1
    1102:	4198      	sbcs	r0, r3
    1104:	b2c0      	uxtb	r0, r0
    1106:	4a95      	ldr	r2, [pc, #596]	; (135c <_i2c_m_sync_transfer+0x268>)
    1108:	0039      	movs	r1, r7
    110a:	f7ff fba9 	bl	860 <assert>
	ASSERT(i2c_dev->hw);
    110e:	6928      	ldr	r0, [r5, #16]
    1110:	1e43      	subs	r3, r0, #1
    1112:	4198      	sbcs	r0, r3
    1114:	b2c0      	uxtb	r0, r0
    1116:	22b8      	movs	r2, #184	; 0xb8
    1118:	00d2      	lsls	r2, r2, #3
    111a:	0039      	movs	r1, r7
    111c:	f7ff fba0 	bl	860 <assert>
	ASSERT(msg);
    1120:	0030      	movs	r0, r6
    1122:	1e43      	subs	r3, r0, #1
    1124:	4198      	sbcs	r0, r3
    1126:	b2c0      	uxtb	r0, r0
    1128:	4a8d      	ldr	r2, [pc, #564]	; (1360 <_i2c_m_sync_transfer+0x26c>)
    112a:	0039      	movs	r1, r7
    112c:	f7ff fb98 	bl	860 <assert>
	if (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    1130:	886b      	ldrh	r3, [r5, #2]
    1132:	05db      	lsls	r3, r3, #23
    1134:	d500      	bpl.n	1138 <_i2c_m_sync_transfer+0x44>
    1136:	e10b      	b.n	1350 <_i2c_m_sync_transfer+0x25c>
	msg->flags |= I2C_M_BUSY;
    1138:	8872      	ldrh	r2, [r6, #2]
    113a:	2380      	movs	r3, #128	; 0x80
    113c:	005b      	lsls	r3, r3, #1
    113e:	469c      	mov	ip, r3
    1140:	431a      	orrs	r2, r3
    1142:	8072      	strh	r2, [r6, #2]
	i2c_dev->service.msg = *msg;
    1144:	002a      	movs	r2, r5
    1146:	0031      	movs	r1, r6
    1148:	c989      	ldmia	r1!, {r0, r3, r7}
    114a:	c289      	stmia	r2!, {r0, r3, r7}
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_SMEN;
    114c:	6862      	ldr	r2, [r4, #4]
    114e:	4663      	mov	r3, ip
    1150:	4313      	orrs	r3, r2
    1152:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1154:	69e3      	ldr	r3, [r4, #28]
    1156:	075b      	lsls	r3, r3, #29
    1158:	d4fc      	bmi.n	1154 <_i2c_m_sync_transfer+0x60>
	ret = _sercom_i2c_sync_send_address(i2c_dev);
    115a:	0028      	movs	r0, r5
    115c:	f7ff fe08 	bl	d70 <_sercom_i2c_sync_send_address>
	if (ret) {
    1160:	2800      	cmp	r0, #0
    1162:	d100      	bne.n	1166 <_i2c_m_sync_transfer+0x72>
    1164:	e09d      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
		i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    1166:	886b      	ldrh	r3, [r5, #2]
    1168:	4a7e      	ldr	r2, [pc, #504]	; (1364 <_i2c_m_sync_transfer+0x270>)
    116a:	4013      	ands	r3, r2
    116c:	806b      	strh	r3, [r5, #2]
}
    116e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return I2C_ERR_BUS;
    1170:	2005      	movs	r0, #5
    1172:	4240      	negs	r0, r0
    1174:	e0a6      	b.n	12c4 <_i2c_m_sync_transfer+0x1d0>
			if (msg->flags & I2C_M_STOP) {
    1176:	8873      	ldrh	r3, [r6, #2]
    1178:	b21b      	sxth	r3, r3
    117a:	2b00      	cmp	r3, #0
    117c:	db04      	blt.n	1188 <_i2c_m_sync_transfer+0x94>
			i2c_dev->service.msg.flags &= ~I2C_M_BUSY;
    117e:	886b      	ldrh	r3, [r5, #2]
    1180:	4a78      	ldr	r2, [pc, #480]	; (1364 <_i2c_m_sync_transfer+0x270>)
    1182:	4013      	ands	r3, r2
    1184:	806b      	strh	r3, [r5, #2]
			return ret;
    1186:	e7f2      	b.n	116e <_i2c_m_sync_transfer+0x7a>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1188:	6862      	ldr	r2, [r4, #4]
    118a:	23c0      	movs	r3, #192	; 0xc0
    118c:	029b      	lsls	r3, r3, #10
    118e:	4313      	orrs	r3, r2
    1190:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1192:	69e3      	ldr	r3, [r4, #28]
    1194:	075b      	lsls	r3, r3, #29
    1196:	d4fc      	bmi.n	1192 <_i2c_m_sync_transfer+0x9e>
    1198:	e7f1      	b.n	117e <_i2c_m_sync_transfer+0x8a>
			if (status & SERCOM_I2CM_STATUS_RXNACK) {
    119a:	0753      	lsls	r3, r2, #29
    119c:	d41b      	bmi.n	11d6 <_i2c_m_sync_transfer+0xe2>
			if (msg->flags & I2C_M_TEN) {
    119e:	886b      	ldrh	r3, [r5, #2]
    11a0:	055b      	lsls	r3, r3, #21
    11a2:	d534      	bpl.n	120e <_i2c_m_sync_transfer+0x11a>
				                              ((((msg->addr & TEN_ADDR_MASK) >> 8) | TEN_ADDR_FRAME) << 1) | I2C_M_RD
    11a4:	882a      	ldrh	r2, [r5, #0]
    11a6:	1212      	asrs	r2, r2, #8
    11a8:	0052      	lsls	r2, r2, #1
				                                  | (hri_sercomi2cm_read_ADDR_reg(hw) & SERCOM_I2CM_ADDR_HS));
    11aa:	2306      	movs	r3, #6
    11ac:	401a      	ands	r2, r3
    11ae:	69e3      	ldr	r3, [r4, #28]
    11b0:	075b      	lsls	r3, r3, #29
    11b2:	d4fc      	bmi.n	11ae <_i2c_m_sync_transfer+0xba>
	return ((Sercom *)hw)->I2CM.ADDR.reg;
    11b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    11b6:	2180      	movs	r1, #128	; 0x80
    11b8:	01c9      	lsls	r1, r1, #7
    11ba:	400b      	ands	r3, r1
    11bc:	4313      	orrs	r3, r2
				hri_sercomi2cm_write_ADDR_reg(hw,
    11be:	22f1      	movs	r2, #241	; 0xf1
    11c0:	4313      	orrs	r3, r2
	((Sercom *)hw)->I2CM.ADDR.reg = data;
    11c2:	6263      	str	r3, [r4, #36]	; 0x24
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    11c4:	69e3      	ldr	r3, [r4, #28]
    11c6:	075b      	lsls	r3, r3, #29
    11c8:	d4fc      	bmi.n	11c4 <_i2c_m_sync_transfer+0xd0>
				msg->flags &= ~I2C_M_TEN;
    11ca:	886b      	ldrh	r3, [r5, #2]
    11cc:	4a66      	ldr	r2, [pc, #408]	; (1368 <_i2c_m_sync_transfer+0x274>)
    11ce:	4013      	ands	r3, r2
    11d0:	806b      	strh	r3, [r5, #2]
				return I2C_OK;
    11d2:	2000      	movs	r0, #0
    11d4:	e065      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
				if (msg->len > 0) {
    11d6:	686b      	ldr	r3, [r5, #4]
    11d8:	2b00      	cmp	r3, #0
    11da:	dd04      	ble.n	11e6 <_i2c_m_sync_transfer+0xf2>
					msg->flags |= I2C_M_FAIL;
    11dc:	886b      	ldrh	r3, [r5, #2]
    11de:	2280      	movs	r2, #128	; 0x80
    11e0:	0152      	lsls	r2, r2, #5
    11e2:	4313      	orrs	r3, r2
    11e4:	806b      	strh	r3, [r5, #2]
				if (msg->flags & I2C_M_STOP) {
    11e6:	886b      	ldrh	r3, [r5, #2]
    11e8:	b21b      	sxth	r3, r3
    11ea:	2b00      	cmp	r3, #0
    11ec:	db06      	blt.n	11fc <_i2c_m_sync_transfer+0x108>
				msg->flags &= ~I2C_M_BUSY;
    11ee:	886b      	ldrh	r3, [r5, #2]
    11f0:	4a5c      	ldr	r2, [pc, #368]	; (1364 <_i2c_m_sync_transfer+0x270>)
    11f2:	4013      	ands	r3, r2
    11f4:	806b      	strh	r3, [r5, #2]
				return I2C_NACK;
    11f6:	2002      	movs	r0, #2
    11f8:	4240      	negs	r0, r0
    11fa:	e052      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    11fc:	6862      	ldr	r2, [r4, #4]
    11fe:	23c0      	movs	r3, #192	; 0xc0
    1200:	029b      	lsls	r3, r3, #10
    1202:	4313      	orrs	r3, r2
    1204:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1206:	69e3      	ldr	r3, [r4, #28]
    1208:	075b      	lsls	r3, r3, #29
    120a:	d4fc      	bmi.n	1206 <_i2c_m_sync_transfer+0x112>
    120c:	e7ef      	b.n	11ee <_i2c_m_sync_transfer+0xfa>
			if (msg->len == 0) {
    120e:	6868      	ldr	r0, [r5, #4]
    1210:	2800      	cmp	r0, #0
    1212:	d111      	bne.n	1238 <_i2c_m_sync_transfer+0x144>
				if (msg->flags & I2C_M_STOP) {
    1214:	886b      	ldrh	r3, [r5, #2]
    1216:	b21b      	sxth	r3, r3
    1218:	2b00      	cmp	r3, #0
    121a:	db04      	blt.n	1226 <_i2c_m_sync_transfer+0x132>
				msg->flags &= ~I2C_M_BUSY;
    121c:	886b      	ldrh	r3, [r5, #2]
    121e:	4a51      	ldr	r2, [pc, #324]	; (1364 <_i2c_m_sync_transfer+0x270>)
    1220:	4013      	ands	r3, r2
    1222:	806b      	strh	r3, [r5, #2]
    1224:	e03d      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    1226:	6862      	ldr	r2, [r4, #4]
    1228:	23c0      	movs	r3, #192	; 0xc0
    122a:	029b      	lsls	r3, r3, #10
    122c:	4313      	orrs	r3, r2
    122e:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1230:	69e3      	ldr	r3, [r4, #28]
    1232:	075b      	lsls	r3, r3, #29
    1234:	d4fc      	bmi.n	1230 <_i2c_m_sync_transfer+0x13c>
    1236:	e7f1      	b.n	121c <_i2c_m_sync_transfer+0x128>
				hri_sercomi2cm_write_DATA_reg(hw, *msg->buffer);
    1238:	68ab      	ldr	r3, [r5, #8]
    123a:	781a      	ldrb	r2, [r3, #0]
	((Sercom *)hw)->I2CM.DATA.reg = data;
    123c:	2328      	movs	r3, #40	; 0x28
    123e:	54e2      	strb	r2, [r4, r3]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1240:	69e3      	ldr	r3, [r4, #28]
    1242:	075b      	lsls	r3, r3, #29
    1244:	d4fc      	bmi.n	1240 <_i2c_m_sync_transfer+0x14c>
				msg->buffer++;
    1246:	68ab      	ldr	r3, [r5, #8]
    1248:	3301      	adds	r3, #1
    124a:	60ab      	str	r3, [r5, #8]
				msg->len--;
    124c:	686b      	ldr	r3, [r5, #4]
    124e:	3b01      	subs	r3, #1
    1250:	606b      	str	r3, [r5, #4]
			return I2C_OK;
    1252:	2000      	movs	r0, #0
    1254:	e025      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
	} else if (flags & SB_FLAG) {
    1256:	07bb      	lsls	r3, r7, #30
    1258:	d578      	bpl.n	134c <_i2c_m_sync_transfer+0x258>
		if ((msg->len) && !(status & SERCOM_I2CM_STATUS_RXNACK)) {
    125a:	686b      	ldr	r3, [r5, #4]
    125c:	2b00      	cmp	r3, #0
    125e:	d06d      	beq.n	133c <_i2c_m_sync_transfer+0x248>
    1260:	0752      	lsls	r2, r2, #29
    1262:	d46b      	bmi.n	133c <_i2c_m_sync_transfer+0x248>
			msg->len--;
    1264:	3b01      	subs	r3, #1
    1266:	606b      	str	r3, [r5, #4]
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1268:	2b00      	cmp	r3, #0
    126a:	d101      	bne.n	1270 <_i2c_m_sync_transfer+0x17c>
    126c:	2900      	cmp	r1, #0
    126e:	d04c      	beq.n	130a <_i2c_m_sync_transfer+0x216>
    1270:	2b01      	cmp	r3, #1
    1272:	d048      	beq.n	1306 <_i2c_m_sync_transfer+0x212>
			if (msg->len == 0) {
    1274:	686b      	ldr	r3, [r5, #4]
    1276:	2b00      	cmp	r3, #0
    1278:	d107      	bne.n	128a <_i2c_m_sync_transfer+0x196>
				if (msg->flags & I2C_M_STOP) {
    127a:	886b      	ldrh	r3, [r5, #2]
    127c:	b21b      	sxth	r3, r3
    127e:	2b00      	cmp	r3, #0
    1280:	db4c      	blt.n	131c <_i2c_m_sync_transfer+0x228>
				msg->flags &= ~I2C_M_BUSY;
    1282:	886b      	ldrh	r3, [r5, #2]
    1284:	4a37      	ldr	r2, [pc, #220]	; (1364 <_i2c_m_sync_transfer+0x270>)
    1286:	4013      	ands	r3, r2
    1288:	806b      	strh	r3, [r5, #2]
			*msg->buffer++ = hri_sercomi2cm_read_DATA_reg(hw);
    128a:	68aa      	ldr	r2, [r5, #8]
    128c:	1c53      	adds	r3, r2, #1
    128e:	60ab      	str	r3, [r5, #8]
    1290:	69e3      	ldr	r3, [r4, #28]
    1292:	075b      	lsls	r3, r3, #29
    1294:	d4fc      	bmi.n	1290 <_i2c_m_sync_transfer+0x19c>
	return ((Sercom *)hw)->I2CM.DATA.reg;
    1296:	2328      	movs	r3, #40	; 0x28
    1298:	5ce3      	ldrb	r3, [r4, r3]
    129a:	7013      	strb	r3, [r2, #0]
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    129c:	2302      	movs	r3, #2
    129e:	7623      	strb	r3, [r4, #24]
	return I2C_OK;
    12a0:	2000      	movs	r0, #0
	while (i2c_dev->service.msg.flags & I2C_M_BUSY) {
    12a2:	886b      	ldrh	r3, [r5, #2]
    12a4:	05db      	lsls	r3, r3, #23
    12a6:	d400      	bmi.n	12aa <_i2c_m_sync_transfer+0x1b6>
    12a8:	e761      	b.n	116e <_i2c_m_sync_transfer+0x7a>
	void *   hw      = i2c_dev->hw;
    12aa:	6928      	ldr	r0, [r5, #16]
	uint32_t timeout = 65535;
    12ac:	4a2f      	ldr	r2, [pc, #188]	; (136c <_i2c_m_sync_transfer+0x278>)
	return ((Sercom *)hw)->I2CM.INTFLAG.reg;
    12ae:	7e03      	ldrb	r3, [r0, #24]
    12b0:	b2db      	uxtb	r3, r3
		*flags = hri_sercomi2cm_read_INTFLAG_reg(hw);
    12b2:	001f      	movs	r7, r3
		if (timeout-- == 0) {
    12b4:	1e51      	subs	r1, r2, #1
    12b6:	2a00      	cmp	r2, #0
    12b8:	d100      	bne.n	12bc <_i2c_m_sync_transfer+0x1c8>
    12ba:	e759      	b.n	1170 <_i2c_m_sync_transfer+0x7c>
    12bc:	000a      	movs	r2, r1
	} while (!(*flags & MB_FLAG) && !(*flags & SB_FLAG));
    12be:	079b      	lsls	r3, r3, #30
    12c0:	d0f5      	beq.n	12ae <_i2c_m_sync_transfer+0x1ba>
	return I2C_OK;
    12c2:	2000      	movs	r0, #0
		if (ret) {
    12c4:	2800      	cmp	r0, #0
    12c6:	d000      	beq.n	12ca <_i2c_m_sync_transfer+0x1d6>
    12c8:	e755      	b.n	1176 <_i2c_m_sync_transfer+0x82>
	tmp = ((Sercom *)hw)->I2CM.CTRLA.reg;
    12ca:	6823      	ldr	r3, [r4, #0]
	tmp = (tmp & SERCOM_I2CM_CTRLA_SCLSM) >> SERCOM_I2CM_CTRLA_SCLSM_Pos;
    12cc:	0edb      	lsrs	r3, r3, #27
    12ce:	2101      	movs	r1, #1
    12d0:	4019      	ands	r1, r3
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    12d2:	69e3      	ldr	r3, [r4, #28]
    12d4:	075b      	lsls	r3, r3, #29
    12d6:	d4fc      	bmi.n	12d2 <_i2c_m_sync_transfer+0x1de>
	return ((Sercom *)hw)->I2CM.STATUS.reg;
    12d8:	8b62      	ldrh	r2, [r4, #26]
    12da:	b292      	uxth	r2, r2
	if (flags & MB_FLAG) {
    12dc:	07fb      	lsls	r3, r7, #31
    12de:	d5ba      	bpl.n	1256 <_i2c_m_sync_transfer+0x162>
		if (status & SERCOM_I2CM_STATUS_ARBLOST) {
    12e0:	0793      	lsls	r3, r2, #30
    12e2:	d400      	bmi.n	12e6 <_i2c_m_sync_transfer+0x1f2>
    12e4:	e759      	b.n	119a <_i2c_m_sync_transfer+0xa6>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_MB;
    12e6:	2301      	movs	r3, #1
    12e8:	7623      	strb	r3, [r4, #24]
			msg->flags |= I2C_M_FAIL;
    12ea:	886b      	ldrh	r3, [r5, #2]
    12ec:	2180      	movs	r1, #128	; 0x80
    12ee:	0149      	lsls	r1, r1, #5
    12f0:	430b      	orrs	r3, r1
    12f2:	806b      	strh	r3, [r5, #2]
			msg->flags &= ~I2C_M_BUSY;
    12f4:	886b      	ldrh	r3, [r5, #2]
    12f6:	491b      	ldr	r1, [pc, #108]	; (1364 <_i2c_m_sync_transfer+0x270>)
    12f8:	400b      	ands	r3, r1
    12fa:	806b      	strh	r3, [r5, #2]
			if (status & SERCOM_I2CM_STATUS_BUSERR) {
    12fc:	07d3      	lsls	r3, r2, #31
    12fe:	d522      	bpl.n	1346 <_i2c_m_sync_transfer+0x252>
				return I2C_ERR_BUS;
    1300:	2005      	movs	r0, #5
    1302:	4240      	negs	r0, r0
    1304:	e7cd      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
			if ((msg->len == 0 && !sclsm) || (msg->len == 1 && sclsm)) {
    1306:	2900      	cmp	r1, #0
    1308:	d0b4      	beq.n	1274 <_i2c_m_sync_transfer+0x180>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_ACKACT;
    130a:	6862      	ldr	r2, [r4, #4]
    130c:	2380      	movs	r3, #128	; 0x80
    130e:	02db      	lsls	r3, r3, #11
    1310:	4313      	orrs	r3, r2
    1312:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1314:	69e3      	ldr	r3, [r4, #28]
    1316:	075b      	lsls	r3, r3, #29
    1318:	d4fc      	bmi.n	1314 <_i2c_m_sync_transfer+0x220>
    131a:	e7ab      	b.n	1274 <_i2c_m_sync_transfer+0x180>
	((Sercom *)hw)->I2CM.CTRLB.reg &= ~SERCOM_I2CM_CTRLB_SMEN;
    131c:	6863      	ldr	r3, [r4, #4]
    131e:	4a11      	ldr	r2, [pc, #68]	; (1364 <_i2c_m_sync_transfer+0x270>)
    1320:	4013      	ands	r3, r2
    1322:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1324:	69e3      	ldr	r3, [r4, #28]
    1326:	075b      	lsls	r3, r3, #29
    1328:	d4fc      	bmi.n	1324 <_i2c_m_sync_transfer+0x230>
	((Sercom *)hw)->I2CM.CTRLB.reg |= SERCOM_I2CM_CTRLB_CMD(mask);
    132a:	6862      	ldr	r2, [r4, #4]
    132c:	23c0      	movs	r3, #192	; 0xc0
    132e:	029b      	lsls	r3, r3, #10
    1330:	4313      	orrs	r3, r2
    1332:	6063      	str	r3, [r4, #4]
	while (((Sercom *)hw)->I2CM.SYNCBUSY.reg & reg) {
    1334:	69e3      	ldr	r3, [r4, #28]
    1336:	075b      	lsls	r3, r3, #29
    1338:	d4fc      	bmi.n	1334 <_i2c_m_sync_transfer+0x240>
    133a:	e7a2      	b.n	1282 <_i2c_m_sync_transfer+0x18e>
	((Sercom *)hw)->I2CM.INTFLAG.reg = SERCOM_I2CM_INTFLAG_SB;
    133c:	2302      	movs	r3, #2
    133e:	7623      	strb	r3, [r4, #24]
			return I2C_NACK;
    1340:	2002      	movs	r0, #2
    1342:	4240      	negs	r0, r0
    1344:	e7ad      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
			return I2C_ERR_BAD_ADDRESS;
    1346:	2004      	movs	r0, #4
    1348:	4240      	negs	r0, r0
    134a:	e7aa      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
	return I2C_OK;
    134c:	2000      	movs	r0, #0
    134e:	e7a8      	b.n	12a2 <_i2c_m_sync_transfer+0x1ae>
		return I2C_ERR_BUSY;
    1350:	2006      	movs	r0, #6
    1352:	4240      	negs	r0, r0
    1354:	e70b      	b.n	116e <_i2c_m_sync_transfer+0x7a>
    1356:	46c0      	nop			; (mov r8, r8)
    1358:	0000261e 	.word	0x0000261e
    135c:	000005bf 	.word	0x000005bf
    1360:	000005c1 	.word	0x000005c1
    1364:	fffffeff 	.word	0xfffffeff
    1368:	fffffbff 	.word	0xfffffbff
    136c:	0000ffff 	.word	0x0000ffff

00001370 <_sysctrl_init_sources>:
}

static inline void hri_sysctrl_set_OSC32K_ENABLE_bit(const void *const hw)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSC32K.reg |= SYSCTRL_OSC32K_ENABLE;
    1370:	4b04      	ldr	r3, [pc, #16]	; (1384 <_sysctrl_init_sources+0x14>)
    1372:	699a      	ldr	r2, [r3, #24]
    1374:	2102      	movs	r1, #2
    1376:	430a      	orrs	r2, r1
    1378:	619a      	str	r2, [r3, #24]
}

static inline hri_sysctrl_osculp32k_reg_t hri_sysctrl_read_OSCULP32K_CALIB_bf(const void *const hw)
{
	uint8_t tmp;
	tmp = ((Sysctrl *)hw)->OSCULP32K.reg;
    137a:	7f1a      	ldrb	r2, [r3, #28]
	tmp = (tmp & SYSCTRL_OSCULP32K_CALIB_Msk) >> SYSCTRL_OSCULP32K_CALIB_Pos;
    137c:	311d      	adds	r1, #29
    137e:	400a      	ands	r2, r1
}

static inline void hri_sysctrl_write_OSCULP32K_reg(const void *const hw, hri_sysctrl_osculp32k_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->OSCULP32K.reg = data;
    1380:	771a      	strb	r2, [r3, #28]
	hri_sysctrl_set_OSC8M_ONDEMAND_bit(hw);
#endif
#endif

	(void)calib, (void)hw;
}
    1382:	4770      	bx	lr
    1384:	40000800 	.word	0x40000800

00001388 <_sysctrl_init_referenced_generators>:
	((Gclk *)hw)->CLKCTRL.reg = data;
    1388:	2282      	movs	r2, #130	; 0x82
    138a:	01d2      	lsls	r2, r2, #7
    138c:	4b1c      	ldr	r3, [pc, #112]	; (1400 <_sysctrl_init_referenced_generators+0x78>)
    138e:	805a      	strh	r2, [r3, #2]
}

static inline void hri_sysctrl_write_DFLLCTRL_reg(const void *const hw, hri_sysctrl_dfllctrl_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    1390:	2202      	movs	r2, #2
    1392:	4b1c      	ldr	r3, [pc, #112]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    1394:	849a      	strh	r2, [r3, #36]	; 0x24
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    1396:	4b1b      	ldr	r3, [pc, #108]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    1398:	68db      	ldr	r3, [r3, #12]
	hri_gclk_write_CLKCTRL_reg(GCLK,
	                           GCLK_CLKCTRL_ID(0) | GCLK_CLKCTRL_GEN(CONF_DFLL_GCLK) | (1 << GCLK_CLKCTRL_CLKEN_Pos));
#endif

	hri_sysctrl_write_DFLLCTRL_reg(hw, SYSCTRL_DFLLCTRL_ENABLE);
	while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    139a:	06db      	lsls	r3, r3, #27
    139c:	d5fb      	bpl.n	1396 <_sysctrl_init_referenced_generators+0xe>
}

static inline void hri_sysctrl_write_DFLLMUL_reg(const void *const hw, hri_sysctrl_dfllmul_reg_t data)
{
	SYSCTRL_CRITICAL_SECTION_ENTER();
	((Sysctrl *)hw)->DFLLMUL.reg = data;
    139e:	4a1a      	ldr	r2, [pc, #104]	; (1408 <_sysctrl_init_referenced_generators+0x80>)
    13a0:	4b18      	ldr	r3, [pc, #96]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    13a2:	62da      	str	r2, [r3, #44]	; 0x2c
		;

	hri_sysctrl_write_DFLLMUL_reg(hw,
	                              SYSCTRL_DFLLMUL_CSTEP(CONF_DFLL_CSTEP) | SYSCTRL_DFLLMUL_FSTEP(CONF_DFLL_FSTEP)
	                                  | SYSCTRL_DFLLMUL_MUL(CONF_DFLL_MUL));
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13a4:	4b19      	ldr	r3, [pc, #100]	; (140c <_sysctrl_init_referenced_generators+0x84>)
    13a6:	681b      	ldr	r3, [r3, #0]
    13a8:	0e9b      	lsrs	r3, r3, #26
    13aa:	2b3f      	cmp	r3, #63	; 0x3f
    13ac:	d020      	beq.n	13f0 <_sysctrl_init_referenced_generators+0x68>
    13ae:	029b      	lsls	r3, r3, #10
    13b0:	2280      	movs	r2, #128	; 0x80
    13b2:	0092      	lsls	r2, r2, #2
    13b4:	4313      	orrs	r3, r2
	((Sysctrl *)hw)->DFLLVAL.reg = data;
    13b6:	4a13      	ldr	r2, [pc, #76]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    13b8:	6293      	str	r3, [r2, #40]	; 0x28
	((Sysctrl *)hw)->DFLLCTRL.reg = data;
    13ba:	2306      	movs	r3, #6
    13bc:	8493      	strh	r3, [r2, #36]	; 0x24
	tmp = ((Sysctrl *)hw)->DFLLCTRL.reg;
    13be:	8c93      	ldrh	r3, [r2, #36]	; 0x24
	        | SYSCTRL_DPLLCTRLB_FILTER(CONF_DPLL_FILTER));
#endif

#if CONF_DFLL_CONFIG == 1
#if CONF_DFLL_ENABLE == 1
	if (hri_sysctrl_get_DFLLCTRL_MODE_bit(hw)) {
    13c0:	075b      	lsls	r3, r3, #29
    13c2:	d518      	bpl.n	13f6 <_sysctrl_init_referenced_generators+0x6e>
	tmp = ((Sysctrl *)hw)->PCLKSR.reg;
    13c4:	4b0f      	ldr	r3, [pc, #60]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    13c6:	68da      	ldr	r2, [r3, #12]
	tmp &= mask;
    13c8:	23d0      	movs	r3, #208	; 0xd0
    13ca:	4013      	ands	r3, r2
		    = SYSCTRL_PCLKSR_DFLLRDY | SYSCTRL_PCLKSR_DFLLLCKF | SYSCTRL_PCLKSR_DFLLLCKC;
#else
		hri_sysctrl_pclksr_reg_t status_mask = SYSCTRL_PCLKSR_DFLLRDY;
#endif

		while (hri_sysctrl_get_PCLKSR_reg(hw, status_mask) != status_mask)
    13cc:	2bd0      	cmp	r3, #208	; 0xd0
    13ce:	d1f9      	bne.n	13c4 <_sysctrl_init_referenced_generators+0x3c>
	((Sysctrl *)hw)->DFLLCTRL.reg |= SYSCTRL_DFLLCTRL_ONDEMAND;
    13d0:	4a0c      	ldr	r2, [pc, #48]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    13d2:	8c93      	ldrh	r3, [r2, #36]	; 0x24
    13d4:	2180      	movs	r1, #128	; 0x80
    13d6:	430b      	orrs	r3, r1
    13d8:	b29b      	uxth	r3, r3
    13da:	8493      	strh	r3, [r2, #36]	; 0x24
	return (((Gclk *)hw)->STATUS.reg & GCLK_STATUS_SYNCBUSY) >> GCLK_STATUS_SYNCBUSY_Pos;
    13dc:	4b08      	ldr	r3, [pc, #32]	; (1400 <_sysctrl_init_referenced_generators+0x78>)
    13de:	785b      	ldrb	r3, [r3, #1]
	hri_sysctrl_set_DPLLCTRLA_ONDEMAND_bit(hw);
#endif
#endif

#if CONF_DFLL_CONFIG == 1
	while (hri_gclk_get_STATUS_SYNCBUSY_bit(GCLK))
    13e0:	09db      	lsrs	r3, r3, #7
    13e2:	d1fb      	bne.n	13dc <_sysctrl_init_referenced_generators+0x54>
	((Sysctrl *)hw)->OSC32K.reg &= ~SYSCTRL_OSC32K_ENABLE;
    13e4:	4a07      	ldr	r2, [pc, #28]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    13e6:	6993      	ldr	r3, [r2, #24]
    13e8:	2102      	movs	r1, #2
    13ea:	438b      	bics	r3, r1
    13ec:	6193      	str	r3, [r2, #24]
	/* Disable after all possible configurations needs sync written. */
	hri_sysctrl_clear_OSC32K_ENABLE_bit(hw);
#endif

	(void)hw;
}
    13ee:	4770      	bx	lr
	hri_sysctrl_write_DFLLVAL_reg(hw, CONF_DFLLVAL);
    13f0:	23fc      	movs	r3, #252	; 0xfc
    13f2:	01db      	lsls	r3, r3, #7
    13f4:	e7df      	b.n	13b6 <_sysctrl_init_referenced_generators+0x2e>
	return (((Sysctrl *)hw)->PCLKSR.reg & SYSCTRL_PCLKSR_DFLLRDY) >> SYSCTRL_PCLKSR_DFLLRDY_Pos;
    13f6:	4b03      	ldr	r3, [pc, #12]	; (1404 <_sysctrl_init_referenced_generators+0x7c>)
    13f8:	68db      	ldr	r3, [r3, #12]
		while (!hri_sysctrl_get_PCLKSR_DFLLRDY_bit(hw))
    13fa:	06db      	lsls	r3, r3, #27
    13fc:	d5fb      	bpl.n	13f6 <_sysctrl_init_referenced_generators+0x6e>
    13fe:	e7e7      	b.n	13d0 <_sysctrl_init_referenced_generators+0x48>
    1400:	40000c00 	.word	0x40000c00
    1404:	40000800 	.word	0x40000800
    1408:	040105b9 	.word	0x040105b9
    140c:	00806024 	.word	0x00806024

00001410 <_system_time_init>:
 * \brief Initialize system time module
 */
void _system_time_init(void *const hw)
{
	(void)hw;
	SysTick->LOAD = (0xFFFFFF << SysTick_LOAD_RELOAD_Pos);
    1410:	4b02      	ldr	r3, [pc, #8]	; (141c <_system_time_init+0xc>)
    1412:	4a03      	ldr	r2, [pc, #12]	; (1420 <_system_time_init+0x10>)
    1414:	605a      	str	r2, [r3, #4]
	SysTick->CTRL = (1 << SysTick_CTRL_ENABLE_Pos) | (CONF_SYSTICK_TICKINT << SysTick_CTRL_TICKINT_Pos)
    1416:	2205      	movs	r2, #5
    1418:	601a      	str	r2, [r3, #0]
	                | (1 << SysTick_CTRL_CLKSOURCE_Pos);
}
    141a:	4770      	bx	lr
    141c:	e000e010 	.word	0xe000e010
    1420:	00ffffff 	.word	0x00ffffff

00001424 <_delay_init>:
/**
 * \brief Initialize delay functionality
 */
void _delay_init(void *const hw)
{
    1424:	b510      	push	{r4, lr}
	_system_time_init(hw);
    1426:	f7ff fff3 	bl	1410 <_system_time_init>
}
    142a:	bd10      	pop	{r4, pc}

0000142c <_delay_cycles>:
 * \brief Delay loop to delay n number of cycles
 */
void _delay_cycles(void *const hw, uint32_t cycles)
{
	(void)hw;
	uint8_t  n   = cycles >> 24;
    142c:	0e08      	lsrs	r0, r1, #24
	uint32_t buf = cycles;

	while (n--) {
    142e:	e00b      	b.n	1448 <_delay_cycles+0x1c>
		SysTick->LOAD = 0xFFFFFF;
    1430:	4b0b      	ldr	r3, [pc, #44]	; (1460 <_delay_cycles+0x34>)
    1432:	480c      	ldr	r0, [pc, #48]	; (1464 <_delay_cycles+0x38>)
    1434:	6058      	str	r0, [r3, #4]
		SysTick->VAL  = 0xFFFFFF;
    1436:	6098      	str	r0, [r3, #8]
		while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1438:	4b09      	ldr	r3, [pc, #36]	; (1460 <_delay_cycles+0x34>)
    143a:	681b      	ldr	r3, [r3, #0]
    143c:	03db      	lsls	r3, r3, #15
    143e:	d5fb      	bpl.n	1438 <_delay_cycles+0xc>
			;
		buf -= 0xFFFFFF;
    1440:	4b09      	ldr	r3, [pc, #36]	; (1468 <_delay_cycles+0x3c>)
    1442:	469c      	mov	ip, r3
    1444:	4461      	add	r1, ip
	while (n--) {
    1446:	0010      	movs	r0, r2
    1448:	1e42      	subs	r2, r0, #1
    144a:	b2d2      	uxtb	r2, r2
    144c:	2800      	cmp	r0, #0
    144e:	d1ef      	bne.n	1430 <_delay_cycles+0x4>
	}

	SysTick->LOAD = buf;
    1450:	4b03      	ldr	r3, [pc, #12]	; (1460 <_delay_cycles+0x34>)
    1452:	6059      	str	r1, [r3, #4]
	SysTick->VAL  = buf;
    1454:	6099      	str	r1, [r3, #8]
	while (!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk))
    1456:	4b02      	ldr	r3, [pc, #8]	; (1460 <_delay_cycles+0x34>)
    1458:	681b      	ldr	r3, [r3, #0]
    145a:	03db      	lsls	r3, r3, #15
    145c:	d5fb      	bpl.n	1456 <_delay_cycles+0x2a>
		;
}
    145e:	4770      	bx	lr
    1460:	e000e010 	.word	0xe000e010
    1464:	00ffffff 	.word	0x00ffffff
    1468:	ff000001 	.word	0xff000001

0000146c <main>:
void gpio_toggle_pin_green(void);

int variant;

int main(void)
{
    146c:	b570      	push	{r4, r5, r6, lr}
    146e:	b084      	sub	sp, #16
    1470:	4e48      	ldr	r6, [pc, #288]	; (1594 <main+0x128>)
    1472:	447e      	add	r6, pc
	/* Initializes MCU, drivers and middle-ware */
	atmel_start_init();
    1474:	f7fe fe4e 	bl	114 <atmel_start_init>
	((Port *)hw)->Group[submodule_index].OUTSET.reg = mask;
    1478:	2208      	movs	r2, #8
    147a:	23c0      	movs	r3, #192	; 0xc0
    147c:	05db      	lsls	r3, r3, #23
    147e:	619a      	str	r2, [r3, #24]
	
	 gpio_set_pin_level(mcp23008_reset_pin, true);  /**< make the reset pin on the slave device is constantly high during communication */
	
	 mcp23008_basic_initialize(MCP23008_I2C_ADDRESS_PIN_A110);
    1480:	2006      	movs	r0, #6
    1482:	f000 fcd9 	bl	1e38 <mcp23008_basic_initialize>
	 mcp23008_info(&mcp23008_handle);
    1486:	4c44      	ldr	r4, [pc, #272]	; (1598 <main+0x12c>)
    1488:	447c      	add	r4, pc
    148a:	0020      	movs	r0, r4
    148c:	f000 fc9e 	bl	1dcc <mcp23008_info>

	 mcp23008_interface_debug_print("Chip name :\t%s\n\r", mcp23008_handle.info.chip_name);
    1490:	0021      	movs	r1, r4
    1492:	311c      	adds	r1, #28
    1494:	4841      	ldr	r0, [pc, #260]	; (159c <main+0x130>)
    1496:	4478      	add	r0, pc
    1498:	f000 feae 	bl	21f8 <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Manufacturer: \t%s\n\r",  mcp23008_handle.info.manufacturer_name);
    149c:	0021      	movs	r1, r4
    149e:	3126      	adds	r1, #38	; 0x26
    14a0:	483f      	ldr	r0, [pc, #252]	; (15a0 <main+0x134>)
    14a2:	4478      	add	r0, pc
    14a4:	f000 fea8 	bl	21f8 <mcp23008_interface_debug_print>

	 mcp23008_interface_debug_print("Interface: \t%s\n\r",  mcp23008_handle.info.interface);
    14a8:	0021      	movs	r1, r4
    14aa:	313f      	adds	r1, #63	; 0x3f
    14ac:	483d      	ldr	r0, [pc, #244]	; (15a4 <main+0x138>)
    14ae:	4478      	add	r0, pc
    14b0:	f000 fea2 	bl	21f8 <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Supply voltage max : \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_max_v);
    14b4:	6ca0      	ldr	r0, [r4, #72]	; 0x48
    14b6:	f001 fae5 	bl	2a84 <__aeabi_f2d>
    14ba:	0002      	movs	r2, r0
    14bc:	000b      	movs	r3, r1
    14be:	483a      	ldr	r0, [pc, #232]	; (15a8 <main+0x13c>)
    14c0:	4478      	add	r0, pc
    14c2:	f000 fe99 	bl	21f8 <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Supply voltage min: \t%0.2fV\n\r",  mcp23008_handle.info.supply_voltage_min_v);
    14c6:	6c60      	ldr	r0, [r4, #68]	; 0x44
    14c8:	f001 fadc 	bl	2a84 <__aeabi_f2d>
    14cc:	0002      	movs	r2, r0
    14ce:	000b      	movs	r3, r1
    14d0:	4836      	ldr	r0, [pc, #216]	; (15ac <main+0x140>)
    14d2:	4478      	add	r0, pc
    14d4:	f000 fe90 	bl	21f8 <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Maximum current: \t%0.1fmA\n\r",  mcp23008_handle.info.max_current_ma);
    14d8:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    14da:	f001 fad3 	bl	2a84 <__aeabi_f2d>
    14de:	0002      	movs	r2, r0
    14e0:	000b      	movs	r3, r1
    14e2:	4833      	ldr	r0, [pc, #204]	; (15b0 <main+0x144>)
    14e4:	4478      	add	r0, pc
    14e6:	f000 fe87 	bl	21f8 <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Temperature Max: \t%.1fC\n\r",  mcp23008_handle.info.temperature_max);
    14ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
    14ec:	f001 faca 	bl	2a84 <__aeabi_f2d>
    14f0:	0002      	movs	r2, r0
    14f2:	000b      	movs	r3, r1
    14f4:	482f      	ldr	r0, [pc, #188]	; (15b4 <main+0x148>)
    14f6:	4478      	add	r0, pc
    14f8:	f000 fe7e 	bl	21f8 <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Temperature Min: \t%.1fC\n\r",  mcp23008_handle.info.temperature_min);
    14fc:	6d20      	ldr	r0, [r4, #80]	; 0x50
    14fe:	f001 fac1 	bl	2a84 <__aeabi_f2d>
    1502:	0002      	movs	r2, r0
    1504:	000b      	movs	r3, r1
    1506:	482c      	ldr	r0, [pc, #176]	; (15b8 <main+0x14c>)
    1508:	4478      	add	r0, pc
    150a:	f000 fe75 	bl	21f8 <mcp23008_interface_debug_print>
	 mcp23008_interface_debug_print("Driver version: \tV%.1f.%.2d\n\r", ( mcp23008_handle.info.driver_version / 1000), (uint8_t)( mcp23008_handle.info.driver_version - (uint8_t)( mcp23008_handle.info.driver_version / 100)*100));
    150e:	6da4      	ldr	r4, [r4, #88]	; 0x58
    1510:	492a      	ldr	r1, [pc, #168]	; (15bc <main+0x150>)
    1512:	1c20      	adds	r0, r4, #0
    1514:	f000 ff8a 	bl	242c <__aeabi_fmul>
    1518:	1c05      	adds	r5, r0, #0
    151a:	4929      	ldr	r1, [pc, #164]	; (15c0 <main+0x154>)
    151c:	1c20      	adds	r0, r4, #0
    151e:	f000 ff85 	bl	242c <__aeabi_fmul>
    1522:	f000 ff6b 	bl	23fc <__aeabi_f2uiz>
    1526:	b2c3      	uxtb	r3, r0
    1528:	2064      	movs	r0, #100	; 0x64
    152a:	4358      	muls	r0, r3
    152c:	f001 fa5a 	bl	29e4 <__aeabi_i2f>
    1530:	1c01      	adds	r1, r0, #0
    1532:	1c20      	adds	r0, r4, #0
    1534:	f001 f89a 	bl	266c <__aeabi_fsub>
    1538:	f000 ff60 	bl	23fc <__aeabi_f2uiz>
    153c:	b2c4      	uxtb	r4, r0
    153e:	1c28      	adds	r0, r5, #0
    1540:	f001 faa0 	bl	2a84 <__aeabi_f2d>
    1544:	0002      	movs	r2, r0
    1546:	000b      	movs	r3, r1
    1548:	9400      	str	r4, [sp, #0]
    154a:	481e      	ldr	r0, [pc, #120]	; (15c4 <main+0x158>)
    154c:	4478      	add	r0, pc
    154e:	f000 fe53 	bl	21f8 <mcp23008_interface_debug_print>

	 //mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_7, MCP23008_OUTPUT);
	 mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_6, MCP23008_OUTPUT);
    1552:	2100      	movs	r1, #0
    1554:	2006      	movs	r0, #6
    1556:	f000 fde7 	bl	2128 <mcp23008_basic_gpio_set_direction>
	 //mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_5, MCP23008_OUTPUT);
	 
	 /**< enable pin mode GPIO0 and 1 as input pull-up*/
	 mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_0, MCP23008_INPUT_PULLUP);
    155a:	2110      	movs	r1, #16
    155c:	2000      	movs	r0, #0
    155e:	f000 fde3 	bl	2128 <mcp23008_basic_gpio_set_direction>
	 mcp23008_basic_gpio_set_direction(MCP23008_GPIO_PIN_1, MCP23008_INPUT_PULLUP);
    1562:	2110      	movs	r1, #16
    1564:	2001      	movs	r0, #1
    1566:	f000 fddf 	bl	2128 <mcp23008_basic_gpio_set_direction>
	 
	 /**< enable interrupt on GPIO 0 and 1 on falling edge*/
	 mcp23008_basic_INT_enable(MCP23008_GPIO_PIN_0, MCP23008_INT_FALLING_EDGE);
    156a:	2101      	movs	r1, #1
    156c:	2000      	movs	r0, #0
    156e:	f000 fe11 	bl	2194 <mcp23008_basic_INT_enable>
	 mcp23008_basic_INT_enable(MCP23008_GPIO_PIN_1, MCP23008_INT_FALLING_EDGE);
    1572:	2101      	movs	r1, #1
    1574:	2001      	movs	r0, #1
    1576:	f000 fe0d 	bl	2194 <mcp23008_basic_INT_enable>
	 
	 ext_irq_register(PIN_PA24, mcp23008_basic_irq_handler);
    157a:	4b13      	ldr	r3, [pc, #76]	; (15c8 <main+0x15c>)
    157c:	58f3      	ldr	r3, [r6, r3]
    157e:	9303      	str	r3, [sp, #12]
    1580:	0019      	movs	r1, r3
    1582:	2018      	movs	r0, #24
    1584:	f7fe ffaa 	bl	4dc <ext_irq_register>
	 //mcp23008_basic_port_set_direction(MCP23008_OUTPUT);
	  
  
	/* Replace with your application code */
	while (1) {
		mcp23008_interface_delay_ms(1);
    1588:	2001      	movs	r0, #1
    158a:	f000 fe31 	bl	21f0 <mcp23008_interface_delay_ms>
		mcp23008_basic_clr_INT_flag();
    158e:	f000 fe1f 	bl	21d0 <mcp23008_basic_clr_INT_flag>
    1592:	e7f9      	b.n	1588 <main+0x11c>
    1594:	00002952 	.word	0x00002952
    1598:	1fffec08 	.word	0x1fffec08
    159c:	000022a2 	.word	0x000022a2
    15a0:	000022aa 	.word	0x000022aa
    15a4:	000022b2 	.word	0x000022b2
    15a8:	000022b4 	.word	0x000022b4
    15ac:	000022c2 	.word	0x000022c2
    15b0:	000022d0 	.word	0x000022d0
    15b4:	000022da 	.word	0x000022da
    15b8:	000022e4 	.word	0x000022e4
    15bc:	3a83126f 	.word	0x3a83126f
    15c0:	3c23d70a 	.word	0x3c23d70a
    15c4:	000022bc 	.word	0x000022bc
    15c8:	0000002c 	.word	0x0000002c

000015cc <print>:
	 	 //}
	}
}

void print(char *const pBuffer, size_t u8Length)
{
    15cc:	b530      	push	{r4, r5, lr}
    15ce:	b085      	sub	sp, #20
    15d0:	0005      	movs	r5, r0
    15d2:	000c      	movs	r4, r1
    15d4:	4b09      	ldr	r3, [pc, #36]	; (15fc <print+0x30>)
    15d6:	447b      	add	r3, pc
	struct io_descriptor *io;
	usart_sync_get_io_descriptor(&USART_0, &io);
    15d8:	4a09      	ldr	r2, [pc, #36]	; (1600 <print+0x34>)
    15da:	589b      	ldr	r3, [r3, r2]
    15dc:	9301      	str	r3, [sp, #4]
    15de:	a903      	add	r1, sp, #12
    15e0:	0018      	movs	r0, r3
    15e2:	f7ff f927 	bl	834 <usart_sync_get_io_descriptor>
	usart_sync_enable(&USART_0);
    15e6:	9801      	ldr	r0, [sp, #4]
    15e8:	f7ff f912 	bl	810 <usart_sync_enable>

	io_write(io, (char *)pBuffer, u8Length);
    15ec:	b2a2      	uxth	r2, r4
    15ee:	0029      	movs	r1, r5
    15f0:	9803      	ldr	r0, [sp, #12]
    15f2:	f7ff f84d 	bl	690 <io_write>
	
}
    15f6:	b005      	add	sp, #20
    15f8:	bd30      	pop	{r4, r5, pc}
    15fa:	46c0      	nop			; (mov r8, r8)
    15fc:	000027ee 	.word	0x000027ee
    1600:	00000024 	.word	0x00000024

00001604 <i2c_read>:

uint8_t i2c_read(uint8_t addr, uint8_t *buf, uint16_t len)
{
    1604:	b570      	push	{r4, r5, r6, lr}
    1606:	b084      	sub	sp, #16
    1608:	0004      	movs	r4, r0
    160a:	000d      	movs	r5, r1
    160c:	0016      	movs	r6, r2
    160e:	4b0d      	ldr	r3, [pc, #52]	; (1644 <i2c_read+0x40>)
    1610:	447b      	add	r3, pc
	struct io_descriptor *I2C_0_io;

	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    1612:	4a0d      	ldr	r2, [pc, #52]	; (1648 <i2c_read+0x44>)
    1614:	589b      	ldr	r3, [r3, r2]
    1616:	9301      	str	r3, [sp, #4]
    1618:	a903      	add	r1, sp, #12
    161a:	0018      	movs	r0, r3
    161c:	f7ff f833 	bl	686 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&I2C_0);
    1620:	9801      	ldr	r0, [sp, #4]
    1622:	f7ff f823 	bl	66c <i2c_m_sync_enable>
	i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    1626:	b221      	sxth	r1, r4
    1628:	2280      	movs	r2, #128	; 0x80
    162a:	0112      	lsls	r2, r2, #4
    162c:	9801      	ldr	r0, [sp, #4]
    162e:	f7ff f821 	bl	674 <i2c_m_sync_set_slaveaddr>
	io_read(I2C_0_io, buf,  len);
    1632:	0032      	movs	r2, r6
    1634:	0029      	movs	r1, r5
    1636:	9803      	ldr	r0, [sp, #12]
    1638:	f7ff f844 	bl	6c4 <io_read>
	return 0;
}
    163c:	2000      	movs	r0, #0
    163e:	b004      	add	sp, #16
    1640:	bd70      	pop	{r4, r5, r6, pc}
    1642:	46c0      	nop			; (mov r8, r8)
    1644:	000027b4 	.word	0x000027b4
    1648:	00000040 	.word	0x00000040

0000164c <i2c_write>:

uint8_t i2c_write(uint8_t addr, uint8_t *buf, uint16_t len)
{
    164c:	b570      	push	{r4, r5, r6, lr}
    164e:	b084      	sub	sp, #16
    1650:	0004      	movs	r4, r0
    1652:	000d      	movs	r5, r1
    1654:	0016      	movs	r6, r2
    1656:	4b0d      	ldr	r3, [pc, #52]	; (168c <i2c_write+0x40>)
    1658:	447b      	add	r3, pc
	struct io_descriptor *I2C_0_io;
	i2c_m_sync_get_io_descriptor(&I2C_0, &I2C_0_io);
    165a:	4a0d      	ldr	r2, [pc, #52]	; (1690 <i2c_write+0x44>)
    165c:	589b      	ldr	r3, [r3, r2]
    165e:	9301      	str	r3, [sp, #4]
    1660:	a903      	add	r1, sp, #12
    1662:	0018      	movs	r0, r3
    1664:	f7ff f80f 	bl	686 <i2c_m_sync_get_io_descriptor>
	i2c_m_sync_enable(&I2C_0);
    1668:	9801      	ldr	r0, [sp, #4]
    166a:	f7fe ffff 	bl	66c <i2c_m_sync_enable>
	i2c_m_sync_set_slaveaddr(&I2C_0, addr, I2C_M_SEVEN);
    166e:	b221      	sxth	r1, r4
    1670:	2280      	movs	r2, #128	; 0x80
    1672:	0112      	lsls	r2, r2, #4
    1674:	9801      	ldr	r0, [sp, #4]
    1676:	f7fe fffd 	bl	674 <i2c_m_sync_set_slaveaddr>
	io_write(I2C_0_io, (uint8_t *)buf, len);
    167a:	0032      	movs	r2, r6
    167c:	0029      	movs	r1, r5
    167e:	9803      	ldr	r0, [sp, #12]
    1680:	f7ff f806 	bl	690 <io_write>
	return 0;
}
    1684:	2000      	movs	r0, #0
    1686:	b004      	add	sp, #16
    1688:	bd70      	pop	{r4, r5, r6, pc}
    168a:	46c0      	nop			; (mov r8, r8)
    168c:	0000276c 	.word	0x0000276c
    1690:	00000040 	.word	0x00000040

00001694 <gpio_toggle_pin_green>:
	((Port *)hw)->Group[submodule_index].OUTTGL.reg = mask;
    1694:	2280      	movs	r2, #128	; 0x80
    1696:	0352      	lsls	r2, r2, #13
    1698:	23c0      	movs	r3, #192	; 0xc0
    169a:	05db      	lsls	r3, r3, #23
    169c:	61da      	str	r2, [r3, #28]

void gpio_toggle_pin_green(void)
{
	gpio_toggle_pin_level(user_led_green);
}
    169e:	4770      	bx	lr

000016a0 <gpio_toggle_pin_blue>:
    16a0:	2280      	movs	r2, #128	; 0x80
    16a2:	0492      	lsls	r2, r2, #18
    16a4:	23c0      	movs	r3, #192	; 0xc0
    16a6:	05db      	lsls	r3, r3, #23
    16a8:	61da      	str	r2, [r3, #28]

void gpio_toggle_pin_blue(void)
{
	gpio_toggle_pin_level(user_led_blue);
    16aa:	4770      	bx	lr

000016ac <a_mcp23008_i2c_write>:
 *          - 0 success
 *          - 1 failed to write
 * @note none
 */

uint8_t a_mcp23008_i2c_write(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
    16ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    16ae:	af00      	add	r7, sp, #0
    16b0:	000d      	movs	r5, r1

    uint8_t temp_buffer[u8Length + 1];
    16b2:	1c5e      	adds	r6, r3, #1
    16b4:	001c      	movs	r4, r3
    16b6:	3408      	adds	r4, #8
    16b8:	08e4      	lsrs	r4, r4, #3
    16ba:	00e4      	lsls	r4, r4, #3
    16bc:	4669      	mov	r1, sp
    16be:	1b09      	subs	r1, r1, r4
    16c0:	468d      	mov	sp, r1
	temp_buffer[0] = u8Reg;
    16c2:	700d      	strb	r5, [r1, #0]
	for(int index = 1; index < u8Length + 1; index++){
    16c4:	2401      	movs	r4, #1
    16c6:	e004      	b.n	16d2 <a_mcp23008_i2c_write+0x26>
		temp_buffer[index] = pBuf[index - 1];
    16c8:	1915      	adds	r5, r2, r4
    16ca:	3d01      	subs	r5, #1
    16cc:	782d      	ldrb	r5, [r5, #0]
    16ce:	550d      	strb	r5, [r1, r4]
	for(int index = 1; index < u8Length + 1; index++){
    16d0:	3401      	adds	r4, #1
    16d2:	42b4      	cmp	r4, r6
    16d4:	dbf8      	blt.n	16c8 <a_mcp23008_i2c_write+0x1c>
	}

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)temp_buffer, (u8Length + 1)) != 0) /**< write data */ {
    16d6:	6884      	ldr	r4, [r0, #8]
    16d8:	1c5a      	adds	r2, r3, #1
    16da:	235c      	movs	r3, #92	; 0x5c
    16dc:	5cc0      	ldrb	r0, [r0, r3]
    16de:	47a0      	blx	r4
    16e0:	2800      	cmp	r0, #0
    16e2:	d101      	bne.n	16e8 <a_mcp23008_i2c_write+0x3c>
            return 1; /**< write fail */
        }
    return 0; /**< success */
}
    16e4:	46bd      	mov	sp, r7
    16e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            return 1; /**< write fail */
    16e8:	2001      	movs	r0, #1
    16ea:	e7fb      	b.n	16e4 <a_mcp23008_i2c_write+0x38>

000016ec <a_mcp23008_i2c_read>:
 * @return status code
 *          - 0 success
 *          - 1 failed to read
 * @note none
 */
uint8_t a_mcp23008_i2c_read(mcp23008_handle_t *const pHandle, uint8_t u8Reg, uint8_t *pBuf, uint8_t u8Length) {
    16ec:	b570      	push	{r4, r5, r6, lr}
    16ee:	b082      	sub	sp, #8
    16f0:	0004      	movs	r4, r0
    16f2:	0016      	movs	r6, r2
    16f4:	001d      	movs	r5, r3
    16f6:	466b      	mov	r3, sp
    16f8:	71d9      	strb	r1, [r3, #7]
    16fa:	3307      	adds	r3, #7

    if (pHandle->i2c_write(pHandle->i2c_address, (uint8_t *)&u8Reg, 1) != 0) /**< write reg */ {
    16fc:	225c      	movs	r2, #92	; 0x5c
    16fe:	5c80      	ldrb	r0, [r0, r2]
    1700:	3a5b      	subs	r2, #91	; 0x5b
    1702:	0019      	movs	r1, r3
    1704:	68a3      	ldr	r3, [r4, #8]
    1706:	4798      	blx	r3
    1708:	2800      	cmp	r0, #0
    170a:	d002      	beq.n	1712 <a_mcp23008_i2c_read+0x26>
            return 1; /**< write fail */
    170c:	2001      	movs	r0, #1

    if (pHandle->i2c_read(pHandle->i2c_address, pBuf, u8Length) != 0) /**< read data */ {
            return 1; /**< read fail */
        }
    return 0;
}
    170e:	b002      	add	sp, #8
    1710:	bd70      	pop	{r4, r5, r6, pc}
    if (pHandle->i2c_read(pHandle->i2c_address, pBuf, u8Length) != 0) /**< read data */ {
    1712:	68e3      	ldr	r3, [r4, #12]
    1714:	b2aa      	uxth	r2, r5
    1716:	215c      	movs	r1, #92	; 0x5c
    1718:	5c60      	ldrb	r0, [r4, r1]
    171a:	0031      	movs	r1, r6
    171c:	4798      	blx	r3
    171e:	2800      	cmp	r0, #0
    1720:	d0f5      	beq.n	170e <a_mcp23008_i2c_read+0x22>
            return 1; /**< read fail */
    1722:	2001      	movs	r0, #1
    1724:	e7f3      	b.n	170e <a_mcp23008_i2c_read+0x22>
	...

00001728 <a_mcp23008_print_error_msg>:
* @param[in] *pBuffer point to the string to be printed
* @return none
* @note   none
*/
void a_mcp23008_print_error_msg(mcp23008_handle_t *const pHandle, char *const pBuffer)
{
    1728:	b510      	push	{r4, lr}
#ifdef MCP23008_DEBUG_MODE
    pHandle->debug_print("MCP23008: failed to %s.\r\n", pBuffer);
    172a:	6943      	ldr	r3, [r0, #20]
    172c:	4801      	ldr	r0, [pc, #4]	; (1734 <a_mcp23008_print_error_msg+0xc>)
    172e:	4478      	add	r0, pc
    1730:	4798      	blx	r3
#endif // mcp23008_DEBUG_MODE
}
    1732:	bd10      	pop	{r4, pc}
    1734:	000020fa 	.word	0x000020fa

00001738 <mcp23008_init>:
 *            - 1 i2c or spi initialization failed
 *            - 2 handle is NULL
 *            - 3 linked functions is NULL
 * @note      none
 */
uint8_t mcp23008_init(mcp23008_handle_t *const pHandle) {
    1738:	b510      	push	{r4, lr}
    173a:	1e04      	subs	r4, r0, #0

    if (pHandle == NULL)
    173c:	d042      	beq.n	17c4 <mcp23008_init+0x8c>
        return 2;
    if (pHandle->debug_print == NULL)
    173e:	6943      	ldr	r3, [r0, #20]
    1740:	2b00      	cmp	r3, #0
    1742:	d041      	beq.n	17c8 <mcp23008_init+0x90>
        return 3;

    if (pHandle->receive_callback == NULL) {
    1744:	6982      	ldr	r2, [r0, #24]
    1746:	2a00      	cmp	r2, #0
    1748:	d015      	beq.n	1776 <mcp23008_init+0x3e>
        pHandle->debug_print("mcp23008: receive_callback\n");
        return 3;
    }
    if (pHandle->delay_ms == NULL) {
    174a:	6902      	ldr	r2, [r0, #16]
    174c:	2a00      	cmp	r2, #0
    174e:	d017      	beq.n	1780 <mcp23008_init+0x48>
        pHandle->debug_print("mcp23008: delay_ms\n");
    }

    if (pHandle->i2c_init == NULL) {
    1750:	6823      	ldr	r3, [r4, #0]
    1752:	2b00      	cmp	r3, #0
    1754:	d018      	beq.n	1788 <mcp23008_init+0x50>
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
        return 3;
    }

    if (pHandle->i2c_deinit == NULL) {
    1756:	6862      	ldr	r2, [r4, #4]
    1758:	2a00      	cmp	r2, #0
    175a:	d01b      	beq.n	1794 <mcp23008_init+0x5c>
        pHandle->debug_print("mcp23008: i2c_deint is null\n");
        return 3;
    }

    if (pHandle->i2c_read == NULL) {
    175c:	68e2      	ldr	r2, [r4, #12]
    175e:	2a00      	cmp	r2, #0
    1760:	d01e      	beq.n	17a0 <mcp23008_init+0x68>
        pHandle->debug_print("mcp23008: i2c_read is null\n");
        return 3;
    }
    if (pHandle->i2c_write == NULL) {
    1762:	68a2      	ldr	r2, [r4, #8]
    1764:	2a00      	cmp	r2, #0
    1766:	d021      	beq.n	17ac <mcp23008_init+0x74>
        pHandle->debug_print("mcp23008: i2c_write is null\n");
        return 3;
    }
    if (pHandle->i2c_init()) {
    1768:	4798      	blx	r3
    176a:	2800      	cmp	r0, #0
    176c:	d124      	bne.n	17b8 <mcp23008_init+0x80>
        pHandle->debug_print("mcp23008: i2c initialize failed\n");
        return 1;
    }

    pHandle->inited = 1; /* flag complete initialization */
    176e:	2201      	movs	r2, #1
    1770:	235d      	movs	r3, #93	; 0x5d
    1772:	54e2      	strb	r2, [r4, r3]

    return 0;
    1774:	e027      	b.n	17c6 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: receive_callback\n");
    1776:	4815      	ldr	r0, [pc, #84]	; (17cc <mcp23008_init+0x94>)
    1778:	4478      	add	r0, pc
    177a:	4798      	blx	r3
        return 3;
    177c:	2003      	movs	r0, #3
    177e:	e022      	b.n	17c6 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: delay_ms\n");
    1780:	4813      	ldr	r0, [pc, #76]	; (17d0 <mcp23008_init+0x98>)
    1782:	4478      	add	r0, pc
    1784:	4798      	blx	r3
    1786:	e7e3      	b.n	1750 <mcp23008_init+0x18>
        pHandle->debug_print("mcp23008: i2c initialize is null\n");
    1788:	6963      	ldr	r3, [r4, #20]
    178a:	4812      	ldr	r0, [pc, #72]	; (17d4 <mcp23008_init+0x9c>)
    178c:	4478      	add	r0, pc
    178e:	4798      	blx	r3
        return 3;
    1790:	2003      	movs	r0, #3
    1792:	e018      	b.n	17c6 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c_deint is null\n");
    1794:	6963      	ldr	r3, [r4, #20]
    1796:	4810      	ldr	r0, [pc, #64]	; (17d8 <mcp23008_init+0xa0>)
    1798:	4478      	add	r0, pc
    179a:	4798      	blx	r3
        return 3;
    179c:	2003      	movs	r0, #3
    179e:	e012      	b.n	17c6 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c_read is null\n");
    17a0:	6963      	ldr	r3, [r4, #20]
    17a2:	480e      	ldr	r0, [pc, #56]	; (17dc <mcp23008_init+0xa4>)
    17a4:	4478      	add	r0, pc
    17a6:	4798      	blx	r3
        return 3;
    17a8:	2003      	movs	r0, #3
    17aa:	e00c      	b.n	17c6 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c_write is null\n");
    17ac:	6963      	ldr	r3, [r4, #20]
    17ae:	480c      	ldr	r0, [pc, #48]	; (17e0 <mcp23008_init+0xa8>)
    17b0:	4478      	add	r0, pc
    17b2:	4798      	blx	r3
        return 3;
    17b4:	2003      	movs	r0, #3
    17b6:	e006      	b.n	17c6 <mcp23008_init+0x8e>
        pHandle->debug_print("mcp23008: i2c initialize failed\n");
    17b8:	6963      	ldr	r3, [r4, #20]
    17ba:	480a      	ldr	r0, [pc, #40]	; (17e4 <mcp23008_init+0xac>)
    17bc:	4478      	add	r0, pc
    17be:	4798      	blx	r3
        return 1;
    17c0:	2001      	movs	r0, #1
    17c2:	e000      	b.n	17c6 <mcp23008_init+0x8e>
        return 2;
    17c4:	2002      	movs	r0, #2
}
    17c6:	bd10      	pop	{r4, pc}
        return 3;
    17c8:	2003      	movs	r0, #3
    17ca:	e7fc      	b.n	17c6 <mcp23008_init+0x8e>
    17cc:	000020cc 	.word	0x000020cc
    17d0:	000020de 	.word	0x000020de
    17d4:	000020e8 	.word	0x000020e8
    17d8:	00002100 	.word	0x00002100
    17dc:	00002114 	.word	0x00002114
    17e0:	00002124 	.word	0x00002124
    17e4:	00002138 	.word	0x00002138

000017e8 <mcp23008_irq_handler>:
 *            - 1 run failed
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t mcp23008_irq_handler(mcp23008_handle_t *const pHandle) {
    17e8:	b570      	push	{r4, r5, r6, lr}
    17ea:	b082      	sub	sp, #8
    17ec:	1e04      	subs	r4, r0, #0

    uint8_t err;
    uint8_t status;
    uint8_t index;

    if (pHandle == NULL) /**< check handle */
    17ee:	d026      	beq.n	183e <mcp23008_irq_handler+0x56>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    17f0:	235d      	movs	r3, #93	; 0x5d
    17f2:	5cc5      	ldrb	r5, [r0, r3]
    17f4:	2d01      	cmp	r5, #1
    17f6:	d003      	beq.n	1800 <mcp23008_irq_handler+0x18>
        return 3; /**< return error */
    17f8:	2603      	movs	r6, #3
	
	

    return 0;

}
    17fa:	0030      	movs	r0, r6
    17fc:	b002      	add	sp, #8
    17fe:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_FLAG_REG, (uint8_t*) &status,1);
    1800:	3b5c      	subs	r3, #92	; 0x5c
    1802:	466a      	mov	r2, sp
    1804:	3207      	adds	r2, #7
    1806:	2107      	movs	r1, #7
    1808:	f7ff ff70 	bl	16ec <a_mcp23008_i2c_read>
    180c:	1e06      	subs	r6, r0, #0
    if (err != 0) {
    180e:	d101      	bne.n	1814 <mcp23008_irq_handler+0x2c>
    1810:	0005      	movs	r5, r0
    1812:	e008      	b.n	1826 <mcp23008_irq_handler+0x3e>
        a_mcp23008_print_error_msg(pHandle, "failed to execute irq routine");
    1814:	490b      	ldr	r1, [pc, #44]	; (1844 <mcp23008_irq_handler+0x5c>)
    1816:	4479      	add	r1, pc
    1818:	0020      	movs	r0, r4
    181a:	f7ff ff85 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    181e:	002e      	movs	r6, r5
    1820:	e7eb      	b.n	17fa <mcp23008_irq_handler+0x12>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1822:	3501      	adds	r5, #1
    1824:	b2ed      	uxtb	r5, r5
    1826:	2d07      	cmp	r5, #7
    1828:	d8e7      	bhi.n	17fa <mcp23008_irq_handler+0x12>
        if (status & (0x01 << index)) {
    182a:	466b      	mov	r3, sp
    182c:	3307      	adds	r3, #7
    182e:	781b      	ldrb	r3, [r3, #0]
    1830:	412b      	asrs	r3, r5
    1832:	07db      	lsls	r3, r3, #31
    1834:	d5f5      	bpl.n	1822 <mcp23008_irq_handler+0x3a>
            pHandle->receive_callback(index);
    1836:	0028      	movs	r0, r5
    1838:	69a3      	ldr	r3, [r4, #24]
    183a:	4798      	blx	r3
    183c:	e7f1      	b.n	1822 <mcp23008_irq_handler+0x3a>
        return 2; /**< return error */
    183e:	2602      	movs	r6, #2
    1840:	e7db      	b.n	17fa <mcp23008_irq_handler+0x12>
    1842:	46c0      	nop			; (mov r8, r8)
    1844:	00002116 	.word	0x00002116

00001848 <mcp23008_set_addr_pin>:
 *            - 2 handle is NULL
 * @note      none
 */
uint8_t mcp23008_set_addr_pin(mcp23008_handle_t *const pHandle, mcp23008_address_pin_t address_pin)
{
    if (pHandle == NULL) /**< check handle */
    1848:	2800      	cmp	r0, #0
    184a:	d00b      	beq.n	1864 <mcp23008_set_addr_pin+0x1c>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    184c:	235d      	movs	r3, #93	; 0x5d
    184e:	5cc3      	ldrb	r3, [r0, r3]
    1850:	2b01      	cmp	r3, #1
    1852:	d001      	beq.n	1858 <mcp23008_set_addr_pin+0x10>
        return 3; /**< return error */
    1854:	2003      	movs	r0, #3

    pHandle->i2c_address = (MCP23008_ADDRESS_DEFAULT | address_pin);

    return 0;
}
    1856:	4770      	bx	lr
    pHandle->i2c_address = (MCP23008_ADDRESS_DEFAULT | address_pin);
    1858:	2320      	movs	r3, #32
    185a:	4319      	orrs	r1, r3
    185c:	235c      	movs	r3, #92	; 0x5c
    185e:	54c1      	strb	r1, [r0, r3]
    return 0;
    1860:	2000      	movs	r0, #0
    1862:	e7f8      	b.n	1856 <mcp23008_set_addr_pin+0xe>
        return 2; /**< return error */
    1864:	2002      	movs	r0, #2
    1866:	e7f6      	b.n	1856 <mcp23008_set_addr_pin+0xe>

00001868 <mcp23008_set_pin_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set pin mode
 * @note   none
 */
uint8_t mcp23008_set_pin_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_mode_t mode) {
    1868:	b5f0      	push	{r4, r5, r6, r7, lr}
    186a:	b083      	sub	sp, #12
    186c:	0004      	movs	r4, r0
    186e:	000f      	movs	r7, r1
    1870:	0016      	movs	r6, r2

    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1872:	2800      	cmp	r0, #0
    1874:	d02d      	beq.n	18d2 <mcp23008_set_pin_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1876:	235d      	movs	r3, #93	; 0x5d
    1878:	5cc5      	ldrb	r5, [r0, r3]
    187a:	2d01      	cmp	r5, #1
    187c:	d002      	beq.n	1884 <mcp23008_set_pin_mode+0x1c>
        return 3; /**< return error */
    187e:	2003      	movs	r0, #3
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin mode");
        return 1;
    }
    return 0;
}
    1880:	b003      	add	sp, #12
    1882:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
    1884:	3b5c      	subs	r3, #92	; 0x5c
    1886:	466a      	mov	r2, sp
    1888:	3207      	adds	r2, #7
    188a:	2100      	movs	r1, #0
    188c:	f7ff ff2e 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1890:	2800      	cmp	r0, #0
    1892:	d117      	bne.n	18c4 <mcp23008_set_pin_mode+0x5c>
    status &= ~(1 << pin);
    1894:	2101      	movs	r1, #1
    1896:	40b9      	lsls	r1, r7
    1898:	466b      	mov	r3, sp
    189a:	1dda      	adds	r2, r3, #7
    189c:	7813      	ldrb	r3, [r2, #0]
    189e:	438b      	bics	r3, r1
    18a0:	b25b      	sxtb	r3, r3
    status |= (mode << pin);
    18a2:	40be      	lsls	r6, r7
    18a4:	431e      	orrs	r6, r3
    18a6:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DIRECTION_REG, (uint8_t *) &status, 1);
    18a8:	2301      	movs	r3, #1
    18aa:	2100      	movs	r1, #0
    18ac:	0020      	movs	r0, r4
    18ae:	f7ff fefd 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    18b2:	2800      	cmp	r0, #0
    18b4:	d0e4      	beq.n	1880 <mcp23008_set_pin_mode+0x18>
       a_mcp23008_print_error_msg(pHandle, "set pin mode");
    18b6:	4908      	ldr	r1, [pc, #32]	; (18d8 <mcp23008_set_pin_mode+0x70>)
    18b8:	4479      	add	r1, pc
    18ba:	0020      	movs	r0, r4
    18bc:	f7ff ff34 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    18c0:	0028      	movs	r0, r5
    18c2:	e7dd      	b.n	1880 <mcp23008_set_pin_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin mode");
    18c4:	4905      	ldr	r1, [pc, #20]	; (18dc <mcp23008_set_pin_mode+0x74>)
    18c6:	4479      	add	r1, pc
    18c8:	0020      	movs	r0, r4
    18ca:	f7ff ff2d 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    18ce:	0028      	movs	r0, r5
    18d0:	e7d6      	b.n	1880 <mcp23008_set_pin_mode+0x18>
        return 2; /**< return error */
    18d2:	2002      	movs	r0, #2
    18d4:	e7d4      	b.n	1880 <mcp23008_set_pin_mode+0x18>
    18d6:	46c0      	nop			; (mov r8, r8)
    18d8:	00002094 	.word	0x00002094
    18dc:	00002086 	.word	0x00002086

000018e0 <mcp23008_pin_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed to write pin
 * @note    none
 */
uint8_t mcp23008_pin_write(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_logic_level_t logic_level) {
    18e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    18e2:	b083      	sub	sp, #12
    18e4:	0004      	movs	r4, r0
    18e6:	000f      	movs	r7, r1
    18e8:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    18ea:	2800      	cmp	r0, #0
    18ec:	d02d      	beq.n	194a <mcp23008_pin_write+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    18ee:	235d      	movs	r3, #93	; 0x5d
    18f0:	5cc5      	ldrb	r5, [r0, r3]
    18f2:	2d01      	cmp	r5, #1
    18f4:	d002      	beq.n	18fc <mcp23008_pin_write+0x1c>
        return 3; /**< return error */
    18f6:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "write pin");
        return 1;
    }
    return 0;
}
    18f8:	b003      	add	sp, #12
    18fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    18fc:	3b5c      	subs	r3, #92	; 0x5c
    18fe:	466a      	mov	r2, sp
    1900:	3207      	adds	r2, #7
    1902:	210a      	movs	r1, #10
    1904:	f7ff fef2 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1908:	2800      	cmp	r0, #0
    190a:	d117      	bne.n	193c <mcp23008_pin_write+0x5c>
    status &= ~(1 << pin);
    190c:	2101      	movs	r1, #1
    190e:	40b9      	lsls	r1, r7
    1910:	466b      	mov	r3, sp
    1912:	1dda      	adds	r2, r3, #7
    1914:	7813      	ldrb	r3, [r2, #0]
    1916:	438b      	bics	r3, r1
    1918:	b25b      	sxtb	r3, r3
    status |= (logic_level << pin);
    191a:	40be      	lsls	r6, r7
    191c:	431e      	orrs	r6, r3
    191e:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_OUTPUT_LATCH_REG, (uint8_t *) &status, 1);
    1920:	2301      	movs	r3, #1
    1922:	210a      	movs	r1, #10
    1924:	0020      	movs	r0, r4
    1926:	f7ff fec1 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    192a:	2800      	cmp	r0, #0
    192c:	d0e4      	beq.n	18f8 <mcp23008_pin_write+0x18>
        a_mcp23008_print_error_msg(pHandle, "write pin");
    192e:	4908      	ldr	r1, [pc, #32]	; (1950 <mcp23008_pin_write+0x70>)
    1930:	4479      	add	r1, pc
    1932:	0020      	movs	r0, r4
    1934:	f7ff fef8 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1938:	0028      	movs	r0, r5
    193a:	e7dd      	b.n	18f8 <mcp23008_pin_write+0x18>
        a_mcp23008_print_error_msg(pHandle,"read latch register");
    193c:	4905      	ldr	r1, [pc, #20]	; (1954 <mcp23008_pin_write+0x74>)
    193e:	4479      	add	r1, pc
    1940:	0020      	movs	r0, r4
    1942:	f7ff fef1 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1946:	0028      	movs	r0, r5
    1948:	e7d6      	b.n	18f8 <mcp23008_pin_write+0x18>
        return 2; /**< return error */
    194a:	2002      	movs	r0, #2
    194c:	e7d4      	b.n	18f8 <mcp23008_pin_write+0x18>
    194e:	46c0      	nop			; (mov r8, r8)
    1950:	00002068 	.word	0x00002068
    1954:	00002046 	.word	0x00002046

00001958 <mcp23008_set_pin_pullup_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set pull-up mode
 * @note    none
 */
uint8_t mcp23008_set_pin_pullup_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
    1958:	b5f0      	push	{r4, r5, r6, r7, lr}
    195a:	b083      	sub	sp, #12
    195c:	0004      	movs	r4, r0
    195e:	000f      	movs	r7, r1
    1960:	0016      	movs	r6, r2

    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1962:	2800      	cmp	r0, #0
    1964:	d02d      	beq.n	19c2 <mcp23008_set_pin_pullup_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1966:	235d      	movs	r3, #93	; 0x5d
    1968:	5cc5      	ldrb	r5, [r0, r3]
    196a:	2d01      	cmp	r5, #1
    196c:	d002      	beq.n	1974 <mcp23008_set_pin_pullup_mode+0x1c>
        return 3; /**< return error */
    196e:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
        return 1;
    }
    return 0;
}
    1970:	b003      	add	sp, #12
    1972:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *)&status, 1);
    1974:	3b5c      	subs	r3, #92	; 0x5c
    1976:	466a      	mov	r2, sp
    1978:	3207      	adds	r2, #7
    197a:	2106      	movs	r1, #6
    197c:	f7ff feb6 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1980:	2800      	cmp	r0, #0
    1982:	d117      	bne.n	19b4 <mcp23008_set_pin_pullup_mode+0x5c>
    status &= ~(1 << pin);
    1984:	2101      	movs	r1, #1
    1986:	40b9      	lsls	r1, r7
    1988:	466b      	mov	r3, sp
    198a:	1dda      	adds	r2, r3, #7
    198c:	7813      	ldrb	r3, [r2, #0]
    198e:	438b      	bics	r3, r1
    1990:	b25b      	sxtb	r3, r3
    status |= (enable << pin);
    1992:	40be      	lsls	r6, r7
    1994:	431e      	orrs	r6, r3
    1996:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_GPIO_PULLUP_REG, (uint8_t *) &status, 1);
    1998:	2301      	movs	r3, #1
    199a:	2106      	movs	r1, #6
    199c:	0020      	movs	r0, r4
    199e:	f7ff fe85 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    19a2:	2800      	cmp	r0, #0
    19a4:	d0e4      	beq.n	1970 <mcp23008_set_pin_pullup_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin pull-up");
    19a6:	4908      	ldr	r1, [pc, #32]	; (19c8 <mcp23008_set_pin_pullup_mode+0x70>)
    19a8:	4479      	add	r1, pc
    19aa:	0020      	movs	r0, r4
    19ac:	f7ff febc 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    19b0:	0028      	movs	r0, r5
    19b2:	e7dd      	b.n	1970 <mcp23008_set_pin_pullup_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "read pull-up register");
    19b4:	4905      	ldr	r1, [pc, #20]	; (19cc <mcp23008_set_pin_pullup_mode+0x74>)
    19b6:	4479      	add	r1, pc
    19b8:	0020      	movs	r0, r4
    19ba:	f7ff feb5 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    19be:	0028      	movs	r0, r5
    19c0:	e7d6      	b.n	1970 <mcp23008_set_pin_pullup_mode+0x18>
        return 2; /**< return error */
    19c2:	2002      	movs	r0, #2
    19c4:	e7d4      	b.n	1970 <mcp23008_set_pin_pullup_mode+0x18>
    19c6:	46c0      	nop			; (mov r8, r8)
    19c8:	00002024 	.word	0x00002024
    19cc:	00001ffe 	.word	0x00001ffe

000019d0 <mcp23008_set_pin_input_polarity_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set polarity
 * @note    none
 */
uint8_t mcp23008_set_pin_input_polarity_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_port_polarity_t polarity) {
    19d0:	b5f0      	push	{r4, r5, r6, r7, lr}
    19d2:	b083      	sub	sp, #12
    19d4:	0004      	movs	r4, r0
    19d6:	000f      	movs	r7, r1
    19d8:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    19da:	2800      	cmp	r0, #0
    19dc:	d02d      	beq.n	1a3a <mcp23008_set_pin_input_polarity_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    19de:	235d      	movs	r3, #93	; 0x5d
    19e0:	5cc5      	ldrb	r5, [r0, r3]
    19e2:	2d01      	cmp	r5, #1
    19e4:	d002      	beq.n	19ec <mcp23008_set_pin_input_polarity_mode+0x1c>
        return 3; /**< return error */
    19e6:	2003      	movs	r0, #3
    if (err != 0) {
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
        return 1;
    }
    return 0;
}
    19e8:	b003      	add	sp, #12
    19ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
    19ec:	3b5c      	subs	r3, #92	; 0x5c
    19ee:	466a      	mov	r2, sp
    19f0:	3207      	adds	r2, #7
    19f2:	2101      	movs	r1, #1
    19f4:	f7ff fe7a 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    19f8:	2800      	cmp	r0, #0
    19fa:	d117      	bne.n	1a2c <mcp23008_set_pin_input_polarity_mode+0x5c>
    status &= ~(1 << pin);
    19fc:	2101      	movs	r1, #1
    19fe:	40b9      	lsls	r1, r7
    1a00:	466b      	mov	r3, sp
    1a02:	1dda      	adds	r2, r3, #7
    1a04:	7813      	ldrb	r3, [r2, #0]
    1a06:	438b      	bics	r3, r1
    1a08:	b25b      	sxtb	r3, r3
    status |= (polarity << pin);
    1a0a:	40be      	lsls	r6, r7
    1a0c:	431e      	orrs	r6, r3
    1a0e:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INPUT_POLARITY_REG, (uint8_t *) &status, 1);
    1a10:	2301      	movs	r3, #1
    1a12:	2101      	movs	r1, #1
    1a14:	0020      	movs	r0, r4
    1a16:	f7ff fe49 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1a1a:	2800      	cmp	r0, #0
    1a1c:	d0e4      	beq.n	19e8 <mcp23008_set_pin_input_polarity_mode+0x18>
       a_mcp23008_print_error_msg(pHandle, "set pin input polarity");
    1a1e:	4908      	ldr	r1, [pc, #32]	; (1a40 <mcp23008_set_pin_input_polarity_mode+0x70>)
    1a20:	4479      	add	r1, pc
    1a22:	0020      	movs	r0, r4
    1a24:	f7ff fe80 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1a28:	0028      	movs	r0, r5
    1a2a:	e7dd      	b.n	19e8 <mcp23008_set_pin_input_polarity_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "read input polarity");
    1a2c:	4905      	ldr	r1, [pc, #20]	; (1a44 <mcp23008_set_pin_input_polarity_mode+0x74>)
    1a2e:	4479      	add	r1, pc
    1a30:	0020      	movs	r0, r4
    1a32:	f7ff fe79 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1a36:	0028      	movs	r0, r5
    1a38:	e7d6      	b.n	19e8 <mcp23008_set_pin_input_polarity_mode+0x18>
        return 2; /**< return error */
    1a3a:	2002      	movs	r0, #2
    1a3c:	e7d4      	b.n	19e8 <mcp23008_set_pin_input_polarity_mode+0x18>
    1a3e:	46c0      	nop			; (mov r8, r8)
    1a40:	00001fe4 	.word	0x00001fe4
    1a44:	00001fc2 	.word	0x00001fc2

00001a48 <mcp23008_set_pin_interrupt>:
 * @return status code
 *          - 0 success
 *          - 1 failed failed to set interrupt
 * @note    none
 */
uint8_t mcp23008_set_pin_interrupt(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_bool_t enable) {
    1a48:	b5f0      	push	{r4, r5, r6, r7, lr}
    1a4a:	b083      	sub	sp, #12
    1a4c:	0004      	movs	r4, r0
    1a4e:	000f      	movs	r7, r1
    1a50:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1a52:	2800      	cmp	r0, #0
    1a54:	d02d      	beq.n	1ab2 <mcp23008_set_pin_interrupt+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1a56:	235d      	movs	r3, #93	; 0x5d
    1a58:	5cc5      	ldrb	r5, [r0, r3]
    1a5a:	2d01      	cmp	r5, #1
    1a5c:	d002      	beq.n	1a64 <mcp23008_set_pin_interrupt+0x1c>
        return 3; /**< return error */
    1a5e:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
        return 1;
    }
    return 0;
}
    1a60:	b003      	add	sp, #12
    1a62:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
    1a64:	3b5c      	subs	r3, #92	; 0x5c
    1a66:	466a      	mov	r2, sp
    1a68:	3207      	adds	r2, #7
    1a6a:	2102      	movs	r1, #2
    1a6c:	f7ff fe3e 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1a70:	2800      	cmp	r0, #0
    1a72:	d117      	bne.n	1aa4 <mcp23008_set_pin_interrupt+0x5c>
    status &= ~(1 << pin);
    1a74:	2101      	movs	r1, #1
    1a76:	40b9      	lsls	r1, r7
    1a78:	466b      	mov	r3, sp
    1a7a:	1dda      	adds	r2, r3, #7
    1a7c:	7813      	ldrb	r3, [r2, #0]
    1a7e:	438b      	bics	r3, r1
    1a80:	b25b      	sxtb	r3, r3
    status |= (enable << pin);
    1a82:	40be      	lsls	r6, r7
    1a84:	431e      	orrs	r6, r3
    1a86:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_REG, (uint8_t *) &status, 1);
    1a88:	2301      	movs	r3, #1
    1a8a:	2102      	movs	r1, #2
    1a8c:	0020      	movs	r0, r4
    1a8e:	f7ff fe0d 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1a92:	2800      	cmp	r0, #0
    1a94:	d0e4      	beq.n	1a60 <mcp23008_set_pin_interrupt+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin interrupt");
    1a96:	4908      	ldr	r1, [pc, #32]	; (1ab8 <mcp23008_set_pin_interrupt+0x70>)
    1a98:	4479      	add	r1, pc
    1a9a:	0020      	movs	r0, r4
    1a9c:	f7ff fe44 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1aa0:	0028      	movs	r0, r5
    1aa2:	e7dd      	b.n	1a60 <mcp23008_set_pin_interrupt+0x18>
        a_mcp23008_print_error_msg(pHandle, "read interrupt");
    1aa4:	4905      	ldr	r1, [pc, #20]	; (1abc <mcp23008_set_pin_interrupt+0x74>)
    1aa6:	4479      	add	r1, pc
    1aa8:	0020      	movs	r0, r4
    1aaa:	f7ff fe3d 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1aae:	0028      	movs	r0, r5
    1ab0:	e7d6      	b.n	1a60 <mcp23008_set_pin_interrupt+0x18>
        return 2; /**< return error */
    1ab2:	2002      	movs	r0, #2
    1ab4:	e7d4      	b.n	1a60 <mcp23008_set_pin_interrupt+0x18>
    1ab6:	46c0      	nop			; (mov r8, r8)
    1ab8:	00001fa8 	.word	0x00001fa8
    1abc:	00001f8a 	.word	0x00001f8a

00001ac0 <mcp23008_clear_interrupt_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed to get interrupt flag status
 * @note    none
 */
uint8_t mcp23008_clear_interrupt_flag(mcp23008_handle_t *const pHandle/*, mcp23008_gpio_port_t pin, mcp23008_int_flag_t flag*/) {
    1ac0:	b570      	push	{r4, r5, r6, lr}
    1ac2:	b082      	sub	sp, #8
    1ac4:	1e04      	subs	r4, r0, #0
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1ac6:	d01c      	beq.n	1b02 <mcp23008_clear_interrupt_flag+0x42>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1ac8:	235d      	movs	r3, #93	; 0x5d
    1aca:	5cc5      	ldrb	r5, [r0, r3]
    1acc:	2d01      	cmp	r5, #1
    1ace:	d002      	beq.n	1ad6 <mcp23008_clear_interrupt_flag+0x16>
        return 3; /**< return error */
    1ad0:	2003      	movs	r0, #3
    {
        pHandle->debug_print("mcp23008: failed to clear pin interrupt flag\n\r");
        return 1;
    }*/
    return 0;
}
    1ad2:	b002      	add	sp, #8
    1ad4:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_FLAG_REG, (uint8_t *) &status, 1);
    1ad6:	3b5c      	subs	r3, #92	; 0x5c
    1ad8:	466a      	mov	r2, sp
    1ada:	1dd6      	adds	r6, r2, #7
    1adc:	0032      	movs	r2, r6
    1ade:	2107      	movs	r1, #7
    1ae0:	f7ff fe04 	bl	16ec <a_mcp23008_i2c_read>
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_CAPTURED_REG, (uint8_t *) &status, 1);
    1ae4:	2301      	movs	r3, #1
    1ae6:	0032      	movs	r2, r6
    1ae8:	2108      	movs	r1, #8
    1aea:	0020      	movs	r0, r4
    1aec:	f7ff fdfe 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1af0:	2800      	cmp	r0, #0
    1af2:	d0ee      	beq.n	1ad2 <mcp23008_clear_interrupt_flag+0x12>
        a_mcp23008_print_error_msg(pHandle, "read interrupt flag");
    1af4:	4904      	ldr	r1, [pc, #16]	; (1b08 <mcp23008_clear_interrupt_flag+0x48>)
    1af6:	4479      	add	r1, pc
    1af8:	0020      	movs	r0, r4
    1afa:	f7ff fe15 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1afe:	0028      	movs	r0, r5
    1b00:	e7e7      	b.n	1ad2 <mcp23008_clear_interrupt_flag+0x12>
        return 2; /**< return error */
    1b02:	2002      	movs	r0, #2
    1b04:	e7e5      	b.n	1ad2 <mcp23008_clear_interrupt_flag+0x12>
    1b06:	46c0      	nop			; (mov r8, r8)
    1b08:	00001f7a 	.word	0x00001f7a

00001b0c <mcp23008_set_intrrupt_pin_output_level>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set interrupt logic output logic level
 * @note    none
 */
uint8_t mcp23008_set_intrrupt_pin_output_level(mcp23008_handle_t *const pHandle, mcp23008_int_polarity_t logic_level) {
    1b0c:	b570      	push	{r4, r5, r6, lr}
    1b0e:	b082      	sub	sp, #8
    1b10:	0004      	movs	r4, r0
    1b12:	000e      	movs	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1b14:	2800      	cmp	r0, #0
    1b16:	d02b      	beq.n	1b70 <mcp23008_set_intrrupt_pin_output_level+0x64>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1b18:	235d      	movs	r3, #93	; 0x5d
    1b1a:	5cc5      	ldrb	r5, [r0, r3]
    1b1c:	2d01      	cmp	r5, #1
    1b1e:	d002      	beq.n	1b26 <mcp23008_set_intrrupt_pin_output_level+0x1a>
        return 3; /**< return error */
    1b20:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
        return 1;
    }
    return 0;
}
    1b22:	b002      	add	sp, #8
    1b24:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1b26:	3b5c      	subs	r3, #92	; 0x5c
    1b28:	466a      	mov	r2, sp
    1b2a:	3207      	adds	r2, #7
    1b2c:	2105      	movs	r1, #5
    1b2e:	f7ff fddd 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1b32:	2800      	cmp	r0, #0
    1b34:	d115      	bne.n	1b62 <mcp23008_set_intrrupt_pin_output_level+0x56>
    status &= ~(1 << 1);
    1b36:	466b      	mov	r3, sp
    1b38:	1dda      	adds	r2, r3, #7
    1b3a:	7813      	ldrb	r3, [r2, #0]
    1b3c:	2102      	movs	r1, #2
    1b3e:	438b      	bics	r3, r1
    status |= (logic_level << 1);
    1b40:	0076      	lsls	r6, r6, #1
    1b42:	431e      	orrs	r6, r3
    1b44:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1b46:	2301      	movs	r3, #1
    1b48:	3103      	adds	r1, #3
    1b4a:	0020      	movs	r0, r4
    1b4c:	f7ff fdae 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1b50:	2800      	cmp	r0, #0
    1b52:	d0e6      	beq.n	1b22 <mcp23008_set_intrrupt_pin_output_level+0x16>
        a_mcp23008_print_error_msg(pHandle,"interrupt pin output level");
    1b54:	4907      	ldr	r1, [pc, #28]	; (1b74 <mcp23008_set_intrrupt_pin_output_level+0x68>)
    1b56:	4479      	add	r1, pc
    1b58:	0020      	movs	r0, r4
    1b5a:	f7ff fde5 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1b5e:	0028      	movs	r0, r5
    1b60:	e7df      	b.n	1b22 <mcp23008_set_intrrupt_pin_output_level+0x16>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    1b62:	4905      	ldr	r1, [pc, #20]	; (1b78 <mcp23008_set_intrrupt_pin_output_level+0x6c>)
    1b64:	4479      	add	r1, pc
    1b66:	0020      	movs	r0, r4
    1b68:	f7ff fdde 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1b6c:	0028      	movs	r0, r5
    1b6e:	e7d8      	b.n	1b22 <mcp23008_set_intrrupt_pin_output_level+0x16>
        return 2; /**< return error */
    1b70:	2002      	movs	r0, #2
    1b72:	e7d6      	b.n	1b22 <mcp23008_set_intrrupt_pin_output_level+0x16>
    1b74:	00001f42 	.word	0x00001f42
    1b78:	00001f20 	.word	0x00001f20

00001b7c <mcp23008_set_interrupt_pin_output_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt putput mode
 * @note    none
 */
uint8_t mcp23008_set_interrupt_pin_output_mode(mcp23008_handle_t *const pHandle, mcp23008_int_open_drain_mode_t mode) {
    1b7c:	b570      	push	{r4, r5, r6, lr}
    1b7e:	b082      	sub	sp, #8
    1b80:	0004      	movs	r4, r0
    1b82:	000e      	movs	r6, r1
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1b84:	2800      	cmp	r0, #0
    1b86:	d02b      	beq.n	1be0 <mcp23008_set_interrupt_pin_output_mode+0x64>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1b88:	235d      	movs	r3, #93	; 0x5d
    1b8a:	5cc5      	ldrb	r5, [r0, r3]
    1b8c:	2d01      	cmp	r5, #1
    1b8e:	d002      	beq.n	1b96 <mcp23008_set_interrupt_pin_output_mode+0x1a>
        return 3; /**< return error */
    1b90:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
        return 1;
    }
    return 0;
}
    1b92:	b002      	add	sp, #8
    1b94:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1b96:	3b5c      	subs	r3, #92	; 0x5c
    1b98:	466a      	mov	r2, sp
    1b9a:	3207      	adds	r2, #7
    1b9c:	2105      	movs	r1, #5
    1b9e:	f7ff fda5 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1ba2:	2800      	cmp	r0, #0
    1ba4:	d115      	bne.n	1bd2 <mcp23008_set_interrupt_pin_output_mode+0x56>
    status &= ~(1 << 2);
    1ba6:	466b      	mov	r3, sp
    1ba8:	1dda      	adds	r2, r3, #7
    1baa:	7813      	ldrb	r3, [r2, #0]
    1bac:	2104      	movs	r1, #4
    1bae:	438b      	bics	r3, r1
    status |= (mode << 2);
    1bb0:	00b6      	lsls	r6, r6, #2
    1bb2:	431e      	orrs	r6, r3
    1bb4:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1bb6:	2301      	movs	r3, #1
    1bb8:	3101      	adds	r1, #1
    1bba:	0020      	movs	r0, r4
    1bbc:	f7ff fd76 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1bc0:	2800      	cmp	r0, #0
    1bc2:	d0e6      	beq.n	1b92 <mcp23008_set_interrupt_pin_output_mode+0x16>
        a_mcp23008_print_error_msg(pHandle, "set interrupt pin output mode");
    1bc4:	4907      	ldr	r1, [pc, #28]	; (1be4 <mcp23008_set_interrupt_pin_output_mode+0x68>)
    1bc6:	4479      	add	r1, pc
    1bc8:	0020      	movs	r0, r4
    1bca:	f7ff fdad 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1bce:	0028      	movs	r0, r5
    1bd0:	e7df      	b.n	1b92 <mcp23008_set_interrupt_pin_output_mode+0x16>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    1bd2:	4905      	ldr	r1, [pc, #20]	; (1be8 <mcp23008_set_interrupt_pin_output_mode+0x6c>)
    1bd4:	4479      	add	r1, pc
    1bd6:	0020      	movs	r0, r4
    1bd8:	f7ff fda6 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1bdc:	0028      	movs	r0, r5
    1bde:	e7d8      	b.n	1b92 <mcp23008_set_interrupt_pin_output_mode+0x16>
        return 2; /**< return error */
    1be0:	2002      	movs	r0, #2
    1be2:	e7d6      	b.n	1b92 <mcp23008_set_interrupt_pin_output_mode+0x16>
    1be4:	00001f0e 	.word	0x00001f0e
    1be8:	00001eb0 	.word	0x00001eb0

00001bec <mcp23008_set_ineterrupt_compare_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed set interrupt compare mode
 * @note    none
 */
uint8_t mcp23008_set_ineterrupt_compare_mode(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_int_compare_value_t mode) {
    1bec:	b5f0      	push	{r4, r5, r6, r7, lr}
    1bee:	b083      	sub	sp, #12
    1bf0:	0004      	movs	r4, r0
    1bf2:	000f      	movs	r7, r1
    1bf4:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1bf6:	2800      	cmp	r0, #0
    1bf8:	d02d      	beq.n	1c56 <mcp23008_set_ineterrupt_compare_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1bfa:	235d      	movs	r3, #93	; 0x5d
    1bfc:	5cc5      	ldrb	r5, [r0, r3]
    1bfe:	2d01      	cmp	r5, #1
    1c00:	d002      	beq.n	1c08 <mcp23008_set_ineterrupt_compare_mode+0x1c>
        return 3; /**< return error */
    1c02:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
        return 1;
    }
    return 0;
}
    1c04:	b003      	add	sp, #12
    1c06:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
    1c08:	3b5c      	subs	r3, #92	; 0x5c
    1c0a:	466a      	mov	r2, sp
    1c0c:	3207      	adds	r2, #7
    1c0e:	2104      	movs	r1, #4
    1c10:	f7ff fd6c 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1c14:	2800      	cmp	r0, #0
    1c16:	d117      	bne.n	1c48 <mcp23008_set_ineterrupt_compare_mode+0x5c>
    status &= ~(1 << pin);
    1c18:	2101      	movs	r1, #1
    1c1a:	40b9      	lsls	r1, r7
    1c1c:	466b      	mov	r3, sp
    1c1e:	1dda      	adds	r2, r3, #7
    1c20:	7813      	ldrb	r3, [r2, #0]
    1c22:	438b      	bics	r3, r1
    1c24:	b25b      	sxtb	r3, r3
    status |= (mode << pin);
    1c26:	40be      	lsls	r6, r7
    1c28:	431e      	orrs	r6, r3
    1c2a:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_INTERRUPT_ON_CHANGE_CONTROL_REG, (uint8_t *) &status, 1);
    1c2c:	2301      	movs	r3, #1
    1c2e:	2104      	movs	r1, #4
    1c30:	0020      	movs	r0, r4
    1c32:	f7ff fd3b 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1c36:	2800      	cmp	r0, #0
    1c38:	d0e4      	beq.n	1c04 <mcp23008_set_ineterrupt_compare_mode+0x18>
        a_mcp23008_print_error_msg(pHandle,"set interrupt compare mode");
    1c3a:	4908      	ldr	r1, [pc, #32]	; (1c5c <mcp23008_set_ineterrupt_compare_mode+0x70>)
    1c3c:	4479      	add	r1, pc
    1c3e:	0020      	movs	r0, r4
    1c40:	f7ff fd72 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1c44:	0028      	movs	r0, r5
    1c46:	e7dd      	b.n	1c04 <mcp23008_set_ineterrupt_compare_mode+0x18>
        a_mcp23008_print_error_msg(pHandle, "read interrupt on change control reg");
    1c48:	4905      	ldr	r1, [pc, #20]	; (1c60 <mcp23008_set_ineterrupt_compare_mode+0x74>)
    1c4a:	4479      	add	r1, pc
    1c4c:	0020      	movs	r0, r4
    1c4e:	f7ff fd6b 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1c52:	0028      	movs	r0, r5
    1c54:	e7d6      	b.n	1c04 <mcp23008_set_ineterrupt_compare_mode+0x18>
        return 2; /**< return error */
    1c56:	2002      	movs	r0, #2
    1c58:	e7d4      	b.n	1c04 <mcp23008_set_ineterrupt_compare_mode+0x18>
    1c5a:	46c0      	nop			; (mov r8, r8)
    1c5c:	00001ee0 	.word	0x00001ee0
    1c60:	00001eaa 	.word	0x00001eaa

00001c64 <mcp23008_set_default_compare_value>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set interrupt default value
 * @note    none
 */
uint8_t mcp23008_set_default_compare_value(mcp23008_handle_t *const pHandle, mcp23008_gpio_port_t pin, mcp23008_int_default_value_t value) {
    1c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    1c66:	b083      	sub	sp, #12
    1c68:	0004      	movs	r4, r0
    1c6a:	000f      	movs	r7, r1
    1c6c:	0016      	movs	r6, r2
    uint8_t err;
    uint8_t status;

    if (pHandle == NULL) /**< check handle */
    1c6e:	2800      	cmp	r0, #0
    1c70:	d02d      	beq.n	1cce <mcp23008_set_default_compare_value+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1c72:	235d      	movs	r3, #93	; 0x5d
    1c74:	5cc5      	ldrb	r5, [r0, r3]
    1c76:	2d01      	cmp	r5, #1
    1c78:	d002      	beq.n	1c80 <mcp23008_set_default_compare_value+0x1c>
        return 3; /**< return error */
    1c7a:	2003      	movs	r0, #3
        a_mcp23008_print_error_msg(pHandle, "set pin default compare value");
        return 1;
    }
    return 0;

}
    1c7c:	b003      	add	sp, #12
    1c7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_DEFAULT_VALUE_REG, (uint8_t *) &status, 1);
    1c80:	3b5c      	subs	r3, #92	; 0x5c
    1c82:	466a      	mov	r2, sp
    1c84:	3207      	adds	r2, #7
    1c86:	2103      	movs	r1, #3
    1c88:	f7ff fd30 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1c8c:	2800      	cmp	r0, #0
    1c8e:	d117      	bne.n	1cc0 <mcp23008_set_default_compare_value+0x5c>
    status &= ~(1 << pin);
    1c90:	2101      	movs	r1, #1
    1c92:	40b9      	lsls	r1, r7
    1c94:	466b      	mov	r3, sp
    1c96:	1dda      	adds	r2, r3, #7
    1c98:	7813      	ldrb	r3, [r2, #0]
    1c9a:	438b      	bics	r3, r1
    1c9c:	b25b      	sxtb	r3, r3
    status |= (value << pin);
    1c9e:	40be      	lsls	r6, r7
    1ca0:	431e      	orrs	r6, r3
    1ca2:	7016      	strb	r6, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_DEFAULT_VALUE_REG, (uint8_t *) &status, 1);
    1ca4:	2301      	movs	r3, #1
    1ca6:	2103      	movs	r1, #3
    1ca8:	0020      	movs	r0, r4
    1caa:	f7ff fcff 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1cae:	2800      	cmp	r0, #0
    1cb0:	d0e4      	beq.n	1c7c <mcp23008_set_default_compare_value+0x18>
        a_mcp23008_print_error_msg(pHandle, "set pin default compare value");
    1cb2:	4908      	ldr	r1, [pc, #32]	; (1cd4 <mcp23008_set_default_compare_value+0x70>)
    1cb4:	4479      	add	r1, pc
    1cb6:	0020      	movs	r0, r4
    1cb8:	f7ff fd36 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1cbc:	0028      	movs	r0, r5
    1cbe:	e7dd      	b.n	1c7c <mcp23008_set_default_compare_value+0x18>
        a_mcp23008_print_error_msg(pHandle, "read default compare value reg");
    1cc0:	4905      	ldr	r1, [pc, #20]	; (1cd8 <mcp23008_set_default_compare_value+0x74>)
    1cc2:	4479      	add	r1, pc
    1cc4:	0020      	movs	r0, r4
    1cc6:	f7ff fd2f 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1cca:	0028      	movs	r0, r5
    1ccc:	e7d6      	b.n	1c7c <mcp23008_set_default_compare_value+0x18>
        return 2; /**< return error */
    1cce:	2002      	movs	r0, #2
    1cd0:	e7d4      	b.n	1c7c <mcp23008_set_default_compare_value+0x18>
    1cd2:	46c0      	nop			; (mov r8, r8)
    1cd4:	00001ea4 	.word	0x00001ea4
    1cd8:	00001e76 	.word	0x00001e76

00001cdc <mcp23008_set_slew_rate>:
 * @return status code
 *          - 0 success
 *          - 1 failed set slew rate
 * @note    none
 */
uint8_t mcp23008_set_slew_rate(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
    1cdc:	b570      	push	{r4, r5, r6, lr}
    1cde:	b082      	sub	sp, #8
    1ce0:	0005      	movs	r5, r0
    uint8_t err;
    uint8_t status;

    enable = !enable;
    1ce2:	424b      	negs	r3, r1
    1ce4:	4159      	adcs	r1, r3
    1ce6:	b2cc      	uxtb	r4, r1

    if (pHandle == NULL) /**< check handle */
    1ce8:	2800      	cmp	r0, #0
    1cea:	d02c      	beq.n	1d46 <mcp23008_set_slew_rate+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1cec:	235d      	movs	r3, #93	; 0x5d
    1cee:	5cc6      	ldrb	r6, [r0, r3]
    1cf0:	2e01      	cmp	r6, #1
    1cf2:	d002      	beq.n	1cfa <mcp23008_set_slew_rate+0x1e>
        return 3; /**< return error */
    1cf4:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
        return 1;
    }
    return 0;
}
    1cf6:	b002      	add	sp, #8
    1cf8:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1cfa:	3b5c      	subs	r3, #92	; 0x5c
    1cfc:	466a      	mov	r2, sp
    1cfe:	3207      	adds	r2, #7
    1d00:	2105      	movs	r1, #5
    1d02:	f7ff fcf3 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1d06:	2800      	cmp	r0, #0
    1d08:	d116      	bne.n	1d38 <mcp23008_set_slew_rate+0x5c>
    status &= ~(1 << 4);
    1d0a:	466b      	mov	r3, sp
    1d0c:	1dda      	adds	r2, r3, #7
    1d0e:	7811      	ldrb	r1, [r2, #0]
    1d10:	2310      	movs	r3, #16
    1d12:	4399      	bics	r1, r3
    1d14:	000b      	movs	r3, r1
    status |= (enable << 4);
    1d16:	0121      	lsls	r1, r4, #4
    1d18:	4319      	orrs	r1, r3
    1d1a:	7011      	strb	r1, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1d1c:	2301      	movs	r3, #1
    1d1e:	2105      	movs	r1, #5
    1d20:	0028      	movs	r0, r5
    1d22:	f7ff fcc3 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1d26:	2800      	cmp	r0, #0
    1d28:	d0e5      	beq.n	1cf6 <mcp23008_set_slew_rate+0x1a>
        a_mcp23008_print_error_msg(pHandle, "set slew rate");
    1d2a:	4908      	ldr	r1, [pc, #32]	; (1d4c <mcp23008_set_slew_rate+0x70>)
    1d2c:	4479      	add	r1, pc
    1d2e:	0028      	movs	r0, r5
    1d30:	f7ff fcfa 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1d34:	0030      	movs	r0, r6
    1d36:	e7de      	b.n	1cf6 <mcp23008_set_slew_rate+0x1a>
        a_mcp23008_print_error_msg(pHandle,"read expander reg");
    1d38:	4905      	ldr	r1, [pc, #20]	; (1d50 <mcp23008_set_slew_rate+0x74>)
    1d3a:	4479      	add	r1, pc
    1d3c:	0028      	movs	r0, r5
    1d3e:	f7ff fcf3 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1d42:	0030      	movs	r0, r6
    1d44:	e7d7      	b.n	1cf6 <mcp23008_set_slew_rate+0x1a>
        return 2; /**< return error */
    1d46:	2002      	movs	r0, #2
    1d48:	e7d5      	b.n	1cf6 <mcp23008_set_slew_rate+0x1a>
    1d4a:	46c0      	nop			; (mov r8, r8)
    1d4c:	00001e74 	.word	0x00001e74
    1d50:	00001d4a 	.word	0x00001d4a

00001d54 <mcp23008_set_sequencial_mode>:
 * @return status code
 *          - 0 success
 *          - 1 failed to set sequential operation mode
 * @note    none
 */
uint8_t mcp23008_set_sequencial_mode(mcp23008_handle_t *const pHandle, mcp23008_bool_t enable) {
    1d54:	b570      	push	{r4, r5, r6, lr}
    1d56:	b082      	sub	sp, #8
    1d58:	0005      	movs	r5, r0
    uint8_t err;
    uint8_t status;

    enable = !enable;
    1d5a:	424b      	negs	r3, r1
    1d5c:	4159      	adcs	r1, r3
    1d5e:	b2cc      	uxtb	r4, r1

    if (pHandle == NULL) /**< check handle */
    1d60:	2800      	cmp	r0, #0
    1d62:	d02c      	beq.n	1dbe <mcp23008_set_sequencial_mode+0x6a>
        return 2; /**< return error */
    if (pHandle->inited != 1) /**< check initialize status */
    1d64:	235d      	movs	r3, #93	; 0x5d
    1d66:	5cc6      	ldrb	r6, [r0, r3]
    1d68:	2e01      	cmp	r6, #1
    1d6a:	d002      	beq.n	1d72 <mcp23008_set_sequencial_mode+0x1e>
        return 3; /**< return error */
    1d6c:	2003      	movs	r0, #3
    if (err != 0) {
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
        return 1;
    }
    return 0;
}
    1d6e:	b002      	add	sp, #8
    1d70:	bd70      	pop	{r4, r5, r6, pc}
    err = a_mcp23008_i2c_read(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1d72:	3b5c      	subs	r3, #92	; 0x5c
    1d74:	466a      	mov	r2, sp
    1d76:	3207      	adds	r2, #7
    1d78:	2105      	movs	r1, #5
    1d7a:	f7ff fcb7 	bl	16ec <a_mcp23008_i2c_read>
    if (err != 0) {
    1d7e:	2800      	cmp	r0, #0
    1d80:	d116      	bne.n	1db0 <mcp23008_set_sequencial_mode+0x5c>
    status &= ~(1 << 5);
    1d82:	466b      	mov	r3, sp
    1d84:	1dda      	adds	r2, r3, #7
    1d86:	7811      	ldrb	r1, [r2, #0]
    1d88:	2320      	movs	r3, #32
    1d8a:	4399      	bics	r1, r3
    1d8c:	000b      	movs	r3, r1
    status |= (enable << 5);
    1d8e:	0161      	lsls	r1, r4, #5
    1d90:	4319      	orrs	r1, r3
    1d92:	7011      	strb	r1, [r2, #0]
    err = a_mcp23008_i2c_write(pHandle, MCP23008_EXPANDER_CONFIGURATION_REG, (uint8_t *) &status, 1);
    1d94:	2301      	movs	r3, #1
    1d96:	2105      	movs	r1, #5
    1d98:	0028      	movs	r0, r5
    1d9a:	f7ff fc87 	bl	16ac <a_mcp23008_i2c_write>
    if (err != 0) {
    1d9e:	2800      	cmp	r0, #0
    1da0:	d0e5      	beq.n	1d6e <mcp23008_set_sequencial_mode+0x1a>
        a_mcp23008_print_error_msg(pHandle, "set sequential operation mode");
    1da2:	4908      	ldr	r1, [pc, #32]	; (1dc4 <mcp23008_set_sequencial_mode+0x70>)
    1da4:	4479      	add	r1, pc
    1da6:	0028      	movs	r0, r5
    1da8:	f7ff fcbe 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1dac:	0030      	movs	r0, r6
    1dae:	e7de      	b.n	1d6e <mcp23008_set_sequencial_mode+0x1a>
        a_mcp23008_print_error_msg(pHandle, "read expander reg");
    1db0:	4905      	ldr	r1, [pc, #20]	; (1dc8 <mcp23008_set_sequencial_mode+0x74>)
    1db2:	4479      	add	r1, pc
    1db4:	0028      	movs	r0, r5
    1db6:	f7ff fcb7 	bl	1728 <a_mcp23008_print_error_msg>
        return 1;
    1dba:	0030      	movs	r0, r6
    1dbc:	e7d7      	b.n	1d6e <mcp23008_set_sequencial_mode+0x1a>
        return 2; /**< return error */
    1dbe:	2002      	movs	r0, #2
    1dc0:	e7d5      	b.n	1d6e <mcp23008_set_sequencial_mode+0x1a>
    1dc2:	46c0      	nop			; (mov r8, r8)
    1dc4:	00001e24 	.word	0x00001e24
    1dc8:	00001cd2 	.word	0x00001cd2

00001dcc <mcp23008_info>:
 * @return     status code
 *             - 0 success
 *             - 2 handle is NULL
 * @note       none
 */
uint8_t mcp23008_info(mcp23008_handle_t *const pHandle) {
    1dcc:	b510      	push	{r4, lr}
    1dce:	0004      	movs	r4, r0

    strncpy(pHandle->info.chip_name, CHIP_NAME, 10); /**< copy chip name */
    1dd0:	301c      	adds	r0, #28
    1dd2:	220a      	movs	r2, #10
    1dd4:	490f      	ldr	r1, [pc, #60]	; (1e14 <mcp23008_info+0x48>)
    1dd6:	4479      	add	r1, pc
    1dd8:	f000 fff9 	bl	2dce <strncpy>
    strncpy(pHandle->info.interface, INTERFACE, 5); /**< copy interface name */
    1ddc:	0020      	movs	r0, r4
    1dde:	303f      	adds	r0, #63	; 0x3f
    1de0:	2205      	movs	r2, #5
    1de2:	490d      	ldr	r1, [pc, #52]	; (1e18 <mcp23008_info+0x4c>)
    1de4:	4479      	add	r1, pc
    1de6:	f000 fff2 	bl	2dce <strncpy>
    strncpy(pHandle->info.manufacturer_name, MANUFACTURER_NAME, 25); /**< copy manufacturer name */
    1dea:	0020      	movs	r0, r4
    1dec:	3026      	adds	r0, #38	; 0x26
    1dee:	2219      	movs	r2, #25
    1df0:	490a      	ldr	r1, [pc, #40]	; (1e1c <mcp23008_info+0x50>)
    1df2:	4479      	add	r1, pc
    1df4:	f000 ffeb 	bl	2dce <strncpy>
    pHandle->info.supply_voltage_max_v = SUPPLY_VOLTAGE_MAX; /**< set minimal supply voltage */
    1df8:	4b09      	ldr	r3, [pc, #36]	; (1e20 <mcp23008_info+0x54>)
    1dfa:	64a3      	str	r3, [r4, #72]	; 0x48
    pHandle->info.supply_voltage_min_v = SUPPLY_VOLTAGE_MIN; /**< set maximum supply voltage */
    1dfc:	4b09      	ldr	r3, [pc, #36]	; (1e24 <mcp23008_info+0x58>)
    1dfe:	6463      	str	r3, [r4, #68]	; 0x44
    pHandle->info.max_current_ma = MAX_CURRENT; /**< set maximum current */
    1e00:	4b09      	ldr	r3, [pc, #36]	; (1e28 <mcp23008_info+0x5c>)
    1e02:	64e3      	str	r3, [r4, #76]	; 0x4c
    pHandle->info.temperature_max = TEMPERATURE_MAX; /**< set minimal temperature */
    1e04:	4b09      	ldr	r3, [pc, #36]	; (1e2c <mcp23008_info+0x60>)
    1e06:	6563      	str	r3, [r4, #84]	; 0x54
    pHandle->info.temperature_min = TEMPERATURE_MIN; /**< set maximum temperature */
    1e08:	4b09      	ldr	r3, [pc, #36]	; (1e30 <mcp23008_info+0x64>)
    1e0a:	6523      	str	r3, [r4, #80]	; 0x50
    pHandle->info.driver_version = DRIVER_VERSION; /**< set driver version */
    1e0c:	4b09      	ldr	r3, [pc, #36]	; (1e34 <mcp23008_info+0x68>)
    1e0e:	65a3      	str	r3, [r4, #88]	; 0x58

    return 0; /**< success */
}
    1e10:	2000      	movs	r0, #0
    1e12:	bd10      	pop	{r4, pc}
    1e14:	00001e3a 	.word	0x00001e3a
    1e18:	00001e38 	.word	0x00001e38
    1e1c:	00001e2e 	.word	0x00001e2e
    1e20:	40b00000 	.word	0x40b00000
    1e24:	3e99999a 	.word	0x3e99999a
    1e28:	43160000 	.word	0x43160000
    1e2c:	42fa0000 	.word	0x42fa0000
    1e30:	c2200000 	.word	0xc2200000
    1e34:	44a2c000 	.word	0x44a2c000

00001e38 <mcp23008_basic_initialize>:
 * @return status code
 *          - 0 success
 *          - 1 initialize failed
 * @note    none
 */
uint8_t mcp23008_basic_initialize(mcp23008_address_pin_t addr_pin) {
    1e38:	b570      	push	{r4, r5, r6, lr}
    1e3a:	b084      	sub	sp, #16
    1e3c:	0006      	movs	r6, r0
    1e3e:	4d97      	ldr	r5, [pc, #604]	; (209c <STACK_SIZE+0x9c>)
    1e40:	447d      	add	r5, pc

    volatile uint8_t err;
    volatile uint8_t index;

    /*link function*/
    DRIVER_MCP23008_LINK_INIT(&mcp23008_handle, mcp23008_handle_t);
    1e42:	4c97      	ldr	r4, [pc, #604]	; (20a0 <STACK_SIZE+0xa0>)
    1e44:	447c      	add	r4, pc
    1e46:	2260      	movs	r2, #96	; 0x60
    1e48:	2100      	movs	r1, #0
    1e4a:	0020      	movs	r0, r4
    1e4c:	f000 ffb0 	bl	2db0 <memset>
    DRIVER_MCP23008_LINK_I2C_INIT(&mcp23008_handle, mcp23008_interface_i2c_init);
    1e50:	4b94      	ldr	r3, [pc, #592]	; (20a4 <STACK_SIZE+0xa4>)
    1e52:	58eb      	ldr	r3, [r5, r3]
    1e54:	9301      	str	r3, [sp, #4]
    1e56:	6023      	str	r3, [r4, #0]
    DRIVER_MCP23008_LINK_I2C_DEINIT(&mcp23008_handle, mcp23008_interface_i2c_deinit);
    1e58:	4b93      	ldr	r3, [pc, #588]	; (20a8 <STACK_SIZE+0xa8>)
    1e5a:	58eb      	ldr	r3, [r5, r3]
    1e5c:	9301      	str	r3, [sp, #4]
    1e5e:	6063      	str	r3, [r4, #4]
    DRIVER_MCP23008_LINK_I2C_READ(&mcp23008_handle, mcp23008_interface_i2c_read);
    1e60:	4b92      	ldr	r3, [pc, #584]	; (20ac <STACK_SIZE+0xac>)
    1e62:	58eb      	ldr	r3, [r5, r3]
    1e64:	9301      	str	r3, [sp, #4]
    1e66:	60e3      	str	r3, [r4, #12]
    DRIVER_MCP23008_LINK_I2C_WRITE(&mcp23008_handle, mcp23008_interface_i2c_write);
    1e68:	4b91      	ldr	r3, [pc, #580]	; (20b0 <STACK_SIZE+0xb0>)
    1e6a:	58eb      	ldr	r3, [r5, r3]
    1e6c:	9301      	str	r3, [sp, #4]
    1e6e:	60a3      	str	r3, [r4, #8]
    DRIVER_MCP23008_LINK_DELAY_MS(&mcp23008_handle, mcp23008_interface_delay_ms);
    1e70:	4b90      	ldr	r3, [pc, #576]	; (20b4 <STACK_SIZE+0xb4>)
    1e72:	58eb      	ldr	r3, [r5, r3]
    1e74:	9301      	str	r3, [sp, #4]
    1e76:	6123      	str	r3, [r4, #16]
    DRIVER_MCP23008_LINK_DEBUG_PRINT(&mcp23008_handle, mcp23008_interface_debug_print);
    1e78:	4b8f      	ldr	r3, [pc, #572]	; (20b8 <STACK_SIZE+0xb8>)
    1e7a:	58eb      	ldr	r3, [r5, r3]
    1e7c:	9301      	str	r3, [sp, #4]
    1e7e:	6163      	str	r3, [r4, #20]
    DRIVER_MCP23008_LINK_RECEIVE_CALLBACK(&mcp23008_handle, mcp23008_interface_receive_callback);
    1e80:	4b8e      	ldr	r3, [pc, #568]	; (20bc <STACK_SIZE+0xbc>)
    1e82:	58eb      	ldr	r3, [r5, r3]
    1e84:	9301      	str	r3, [sp, #4]
    1e86:	61a3      	str	r3, [r4, #24]

    /*mcp23008 initialize*/
    err = mcp23008_init(&mcp23008_handle);
    1e88:	0020      	movs	r0, r4
    1e8a:	f7ff fc55 	bl	1738 <mcp23008_init>
    1e8e:	ab02      	add	r3, sp, #8
    1e90:	71d8      	strb	r0, [r3, #7]
    1e92:	3307      	adds	r3, #7
    if (err) {
    1e94:	781b      	ldrb	r3, [r3, #0]
    1e96:	2b00      	cmp	r3, #0
    1e98:	d004      	beq.n	1ea4 <mcp23008_basic_initialize+0x6c>
        return err;
    1e9a:	ab02      	add	r3, sp, #8
    1e9c:	79d8      	ldrb	r0, [r3, #7]
    1e9e:	b2c0      	uxtb	r0, r0

    /* wait 10 ms */
    mcp23008_interface_delay_ms(10);

    return 0; /**< Initialize success */
}
    1ea0:	b004      	add	sp, #16
    1ea2:	bd70      	pop	{r4, r5, r6, pc}
    err = mcp23008_set_addr_pin(&mcp23008_handle, addr_pin);
    1ea4:	0031      	movs	r1, r6
    1ea6:	4886      	ldr	r0, [pc, #536]	; (20c0 <STACK_SIZE+0xc0>)
    1ea8:	4478      	add	r0, pc
    1eaa:	f7ff fccd 	bl	1848 <mcp23008_set_addr_pin>
    1eae:	ab02      	add	r3, sp, #8
    1eb0:	71d8      	strb	r0, [r3, #7]
    1eb2:	3307      	adds	r3, #7
    if (err) {
    1eb4:	781b      	ldrb	r3, [r3, #0]
    1eb6:	2b00      	cmp	r3, #0
    1eb8:	d003      	beq.n	1ec2 <mcp23008_basic_initialize+0x8a>
        return err;
    1eba:	ab02      	add	r3, sp, #8
    1ebc:	79d8      	ldrb	r0, [r3, #7]
    1ebe:	b2c0      	uxtb	r0, r0
    1ec0:	e7ee      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_intrrupt_pin_output_level(&mcp23008_handle, MCP23008_INT_ACTIVE_LOW);
    1ec2:	2100      	movs	r1, #0
    1ec4:	487f      	ldr	r0, [pc, #508]	; (20c4 <STACK_SIZE+0xc4>)
    1ec6:	4478      	add	r0, pc
    1ec8:	f7ff fe20 	bl	1b0c <mcp23008_set_intrrupt_pin_output_level>
    1ecc:	ab02      	add	r3, sp, #8
    1ece:	71d8      	strb	r0, [r3, #7]
    1ed0:	3307      	adds	r3, #7
    if (err) {
    1ed2:	781b      	ldrb	r3, [r3, #0]
    1ed4:	2b00      	cmp	r3, #0
    1ed6:	d003      	beq.n	1ee0 <mcp23008_basic_initialize+0xa8>
        return err;
    1ed8:	ab02      	add	r3, sp, #8
    1eda:	79d8      	ldrb	r0, [r3, #7]
    1edc:	b2c0      	uxtb	r0, r0
    1ede:	e7df      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_interrupt_pin_output_mode(&mcp23008_handle, MCP23008_INT_OPEN_DRAIN_OUTPUT);
    1ee0:	2101      	movs	r1, #1
    1ee2:	4879      	ldr	r0, [pc, #484]	; (20c8 <STACK_SIZE+0xc8>)
    1ee4:	4478      	add	r0, pc
    1ee6:	f7ff fe49 	bl	1b7c <mcp23008_set_interrupt_pin_output_mode>
    1eea:	ab02      	add	r3, sp, #8
    1eec:	71d8      	strb	r0, [r3, #7]
    1eee:	3307      	adds	r3, #7
    if (err) {
    1ef0:	781b      	ldrb	r3, [r3, #0]
    1ef2:	2b00      	cmp	r3, #0
    1ef4:	d003      	beq.n	1efe <mcp23008_basic_initialize+0xc6>
        return err;
    1ef6:	ab02      	add	r3, sp, #8
    1ef8:	79d8      	ldrb	r0, [r3, #7]
    1efa:	b2c0      	uxtb	r0, r0
    1efc:	e7d0      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_slew_rate(&mcp23008_handle, MCP23008_BOOL_FALSE);
    1efe:	2100      	movs	r1, #0
    1f00:	4872      	ldr	r0, [pc, #456]	; (20cc <STACK_SIZE+0xcc>)
    1f02:	4478      	add	r0, pc
    1f04:	f7ff feea 	bl	1cdc <mcp23008_set_slew_rate>
    1f08:	ab02      	add	r3, sp, #8
    1f0a:	71d8      	strb	r0, [r3, #7]
    1f0c:	3307      	adds	r3, #7
    if (err) {
    1f0e:	781b      	ldrb	r3, [r3, #0]
    1f10:	2b00      	cmp	r3, #0
    1f12:	d003      	beq.n	1f1c <mcp23008_basic_initialize+0xe4>
        return err;
    1f14:	ab02      	add	r3, sp, #8
    1f16:	79d8      	ldrb	r0, [r3, #7]
    1f18:	b2c0      	uxtb	r0, r0
    1f1a:	e7c1      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    err = mcp23008_set_sequencial_mode(&mcp23008_handle, MCP23008_BOOL_TRUE);
    1f1c:	2101      	movs	r1, #1
    1f1e:	486c      	ldr	r0, [pc, #432]	; (20d0 <STACK_SIZE+0xd0>)
    1f20:	4478      	add	r0, pc
    1f22:	f7ff ff17 	bl	1d54 <mcp23008_set_sequencial_mode>
    1f26:	ab02      	add	r3, sp, #8
    1f28:	71d8      	strb	r0, [r3, #7]
    1f2a:	3307      	adds	r3, #7
    if (err) {
    1f2c:	781b      	ldrb	r3, [r3, #0]
    1f2e:	2b00      	cmp	r3, #0
    1f30:	d11d      	bne.n	1f6e <mcp23008_basic_initialize+0x136>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1f32:	2200      	movs	r2, #0
    1f34:	ab02      	add	r3, sp, #8
    1f36:	719a      	strb	r2, [r3, #6]
    1f38:	ab02      	add	r3, sp, #8
    1f3a:	3306      	adds	r3, #6
    1f3c:	781b      	ldrb	r3, [r3, #0]
    1f3e:	b2db      	uxtb	r3, r3
    1f40:	2b07      	cmp	r3, #7
    1f42:	d81c      	bhi.n	1f7e <mcp23008_basic_initialize+0x146>
        err = mcp23008_set_ineterrupt_compare_mode(&mcp23008_handle, index, MCP23008_INT_COMP_TO_DEFAULT_VALUE);
    1f44:	ab02      	add	r3, sp, #8
    1f46:	7999      	ldrb	r1, [r3, #6]
    1f48:	b2c9      	uxtb	r1, r1
    1f4a:	2201      	movs	r2, #1
    1f4c:	4861      	ldr	r0, [pc, #388]	; (20d4 <STACK_SIZE+0xd4>)
    1f4e:	4478      	add	r0, pc
    1f50:	f7ff fe4c 	bl	1bec <mcp23008_set_ineterrupt_compare_mode>
    1f54:	ab02      	add	r3, sp, #8
    1f56:	71d8      	strb	r0, [r3, #7]
    1f58:	3307      	adds	r3, #7
        if (err) {
    1f5a:	781b      	ldrb	r3, [r3, #0]
    1f5c:	2b00      	cmp	r3, #0
    1f5e:	d10a      	bne.n	1f76 <mcp23008_basic_initialize+0x13e>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1f60:	ab02      	add	r3, sp, #8
    1f62:	1d9a      	adds	r2, r3, #6
    1f64:	799b      	ldrb	r3, [r3, #6]
    1f66:	3301      	adds	r3, #1
    1f68:	b2db      	uxtb	r3, r3
    1f6a:	7013      	strb	r3, [r2, #0]
    1f6c:	e7e4      	b.n	1f38 <mcp23008_basic_initialize+0x100>
        return err;
    1f6e:	ab02      	add	r3, sp, #8
    1f70:	79d8      	ldrb	r0, [r3, #7]
    1f72:	b2c0      	uxtb	r0, r0
    1f74:	e794      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
            return err;
    1f76:	ab02      	add	r3, sp, #8
    1f78:	79d8      	ldrb	r0, [r3, #7]
    1f7a:	b2c0      	uxtb	r0, r0
    1f7c:	e790      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1f7e:	2200      	movs	r2, #0
    1f80:	ab02      	add	r3, sp, #8
    1f82:	719a      	strb	r2, [r3, #6]
    1f84:	ab02      	add	r3, sp, #8
    1f86:	3306      	adds	r3, #6
    1f88:	781b      	ldrb	r3, [r3, #0]
    1f8a:	b2db      	uxtb	r3, r3
    1f8c:	2b07      	cmp	r3, #7
    1f8e:	d818      	bhi.n	1fc2 <mcp23008_basic_initialize+0x18a>
        err = mcp23008_set_pin_input_polarity_mode(&mcp23008_handle, index, MCP23008_POLARITY_SAME_LOGIC_STATE);
    1f90:	ab02      	add	r3, sp, #8
    1f92:	7999      	ldrb	r1, [r3, #6]
    1f94:	b2c9      	uxtb	r1, r1
    1f96:	2200      	movs	r2, #0
    1f98:	484f      	ldr	r0, [pc, #316]	; (20d8 <STACK_SIZE+0xd8>)
    1f9a:	4478      	add	r0, pc
    1f9c:	f7ff fd18 	bl	19d0 <mcp23008_set_pin_input_polarity_mode>
    1fa0:	ab02      	add	r3, sp, #8
    1fa2:	71d8      	strb	r0, [r3, #7]
    1fa4:	3307      	adds	r3, #7
        if (err) {
    1fa6:	781b      	ldrb	r3, [r3, #0]
    1fa8:	2b00      	cmp	r3, #0
    1faa:	d106      	bne.n	1fba <mcp23008_basic_initialize+0x182>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1fac:	ab02      	add	r3, sp, #8
    1fae:	1d9a      	adds	r2, r3, #6
    1fb0:	799b      	ldrb	r3, [r3, #6]
    1fb2:	3301      	adds	r3, #1
    1fb4:	b2db      	uxtb	r3, r3
    1fb6:	7013      	strb	r3, [r2, #0]
    1fb8:	e7e4      	b.n	1f84 <mcp23008_basic_initialize+0x14c>
            return err;
    1fba:	ab02      	add	r3, sp, #8
    1fbc:	79d8      	ldrb	r0, [r3, #7]
    1fbe:	b2c0      	uxtb	r0, r0
    1fc0:	e76e      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1fc2:	2200      	movs	r2, #0
    1fc4:	ab02      	add	r3, sp, #8
    1fc6:	719a      	strb	r2, [r3, #6]
    1fc8:	ab02      	add	r3, sp, #8
    1fca:	3306      	adds	r3, #6
    1fcc:	781b      	ldrb	r3, [r3, #0]
    1fce:	b2db      	uxtb	r3, r3
    1fd0:	2b07      	cmp	r3, #7
    1fd2:	d81a      	bhi.n	200a <STACK_SIZE+0xa>
        err = (mcp23008_set_pin_pullup_mode(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
    1fd4:	ab02      	add	r3, sp, #8
    1fd6:	7999      	ldrb	r1, [r3, #6]
    1fd8:	b2c9      	uxtb	r1, r1
    1fda:	2200      	movs	r2, #0
    1fdc:	483f      	ldr	r0, [pc, #252]	; (20dc <STACK_SIZE+0xdc>)
    1fde:	4478      	add	r0, pc
    1fe0:	f7ff fcba 	bl	1958 <mcp23008_set_pin_pullup_mode>
    1fe4:	1e43      	subs	r3, r0, #1
    1fe6:	4198      	sbcs	r0, r3
    1fe8:	b2c0      	uxtb	r0, r0
    1fea:	ab02      	add	r3, sp, #8
    1fec:	1dda      	adds	r2, r3, #7
    1fee:	71d8      	strb	r0, [r3, #7]
        if (err) {
    1ff0:	79db      	ldrb	r3, [r3, #7]
    1ff2:	2b00      	cmp	r3, #0
    1ff4:	d106      	bne.n	2004 <STACK_SIZE+0x4>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    1ff6:	ab02      	add	r3, sp, #8
    1ff8:	1d9a      	adds	r2, r3, #6
    1ffa:	799b      	ldrb	r3, [r3, #6]
    1ffc:	3301      	adds	r3, #1
    1ffe:	b2db      	uxtb	r3, r3
    2000:	7013      	strb	r3, [r2, #0]
    2002:	e7e1      	b.n	1fc8 <mcp23008_basic_initialize+0x190>
            return err;
    2004:	7810      	ldrb	r0, [r2, #0]
    2006:	b2c0      	uxtb	r0, r0
    2008:	e74a      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    200a:	2200      	movs	r2, #0
    200c:	ab02      	add	r3, sp, #8
    200e:	719a      	strb	r2, [r3, #6]
    2010:	ab02      	add	r3, sp, #8
    2012:	3306      	adds	r3, #6
    2014:	781b      	ldrb	r3, [r3, #0]
    2016:	b2db      	uxtb	r3, r3
    2018:	2b07      	cmp	r3, #7
    201a:	d81a      	bhi.n	2052 <STACK_SIZE+0x52>
        err = (mcp23008_set_pin_interrupt(&mcp23008_handle, index, MCP23008_BOOL_FALSE) != 0);
    201c:	ab02      	add	r3, sp, #8
    201e:	7999      	ldrb	r1, [r3, #6]
    2020:	b2c9      	uxtb	r1, r1
    2022:	2200      	movs	r2, #0
    2024:	482e      	ldr	r0, [pc, #184]	; (20e0 <STACK_SIZE+0xe0>)
    2026:	4478      	add	r0, pc
    2028:	f7ff fd0e 	bl	1a48 <mcp23008_set_pin_interrupt>
    202c:	1e43      	subs	r3, r0, #1
    202e:	4198      	sbcs	r0, r3
    2030:	b2c0      	uxtb	r0, r0
    2032:	ab02      	add	r3, sp, #8
    2034:	1dda      	adds	r2, r3, #7
    2036:	71d8      	strb	r0, [r3, #7]
        if (err) {
    2038:	79db      	ldrb	r3, [r3, #7]
    203a:	2b00      	cmp	r3, #0
    203c:	d106      	bne.n	204c <STACK_SIZE+0x4c>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    203e:	ab02      	add	r3, sp, #8
    2040:	1d9a      	adds	r2, r3, #6
    2042:	799b      	ldrb	r3, [r3, #6]
    2044:	3301      	adds	r3, #1
    2046:	b2db      	uxtb	r3, r3
    2048:	7013      	strb	r3, [r2, #0]
    204a:	e7e1      	b.n	2010 <STACK_SIZE+0x10>
            return err;
    204c:	7810      	ldrb	r0, [r2, #0]
    204e:	b2c0      	uxtb	r0, r0
    2050:	e726      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    2052:	2200      	movs	r2, #0
    2054:	ab02      	add	r3, sp, #8
    2056:	719a      	strb	r2, [r3, #6]
    2058:	ab02      	add	r3, sp, #8
    205a:	3306      	adds	r3, #6
    205c:	781b      	ldrb	r3, [r3, #0]
    205e:	b2db      	uxtb	r3, r3
    2060:	2b07      	cmp	r3, #7
    2062:	d816      	bhi.n	2092 <STACK_SIZE+0x92>
        err = (mcp23008_clear_interrupt_flag(&mcp23008_handle/*, index, MCP23008_BOOL_FALSE*/) != 0);
    2064:	481f      	ldr	r0, [pc, #124]	; (20e4 <STACK_SIZE+0xe4>)
    2066:	4478      	add	r0, pc
    2068:	f7ff fd2a 	bl	1ac0 <mcp23008_clear_interrupt_flag>
    206c:	1e43      	subs	r3, r0, #1
    206e:	4198      	sbcs	r0, r3
    2070:	b2c0      	uxtb	r0, r0
    2072:	ab02      	add	r3, sp, #8
    2074:	1dda      	adds	r2, r3, #7
    2076:	71d8      	strb	r0, [r3, #7]
        if (err) {
    2078:	79db      	ldrb	r3, [r3, #7]
    207a:	2b00      	cmp	r3, #0
    207c:	d106      	bne.n	208c <STACK_SIZE+0x8c>
    for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) {
    207e:	ab02      	add	r3, sp, #8
    2080:	1d9a      	adds	r2, r3, #6
    2082:	799b      	ldrb	r3, [r3, #6]
    2084:	3301      	adds	r3, #1
    2086:	b2db      	uxtb	r3, r3
    2088:	7013      	strb	r3, [r2, #0]
    208a:	e7e5      	b.n	2058 <STACK_SIZE+0x58>
            return err;
    208c:	7810      	ldrb	r0, [r2, #0]
    208e:	b2c0      	uxtb	r0, r0
    2090:	e706      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    mcp23008_interface_delay_ms(10);
    2092:	200a      	movs	r0, #10
    2094:	f000 f8ac 	bl	21f0 <mcp23008_interface_delay_ms>
    return 0; /**< Initialize success */
    2098:	2000      	movs	r0, #0
    209a:	e701      	b.n	1ea0 <mcp23008_basic_initialize+0x68>
    209c:	00001f84 	.word	0x00001f84
    20a0:	1fffe2ac 	.word	0x1fffe2ac
    20a4:	00000034 	.word	0x00000034
    20a8:	00000000 	.word	0x00000000
    20ac:	00000014 	.word	0x00000014
    20b0:	00000030 	.word	0x00000030
    20b4:	0000001c 	.word	0x0000001c
    20b8:	00000018 	.word	0x00000018
    20bc:	00000020 	.word	0x00000020
    20c0:	1fffe248 	.word	0x1fffe248
    20c4:	1fffe22a 	.word	0x1fffe22a
    20c8:	1fffe20c 	.word	0x1fffe20c
    20cc:	1fffe1ee 	.word	0x1fffe1ee
    20d0:	1fffe1d0 	.word	0x1fffe1d0
    20d4:	1fffe1a2 	.word	0x1fffe1a2
    20d8:	1fffe156 	.word	0x1fffe156
    20dc:	1fffe112 	.word	0x1fffe112
    20e0:	1fffe0ca 	.word	0x1fffe0ca
    20e4:	1fffe08a 	.word	0x1fffe08a

000020e8 <mcp23008_basic_irq_handler>:
 * @param[in] *irq_callback point to the callback function
 * @return status code
 *          - 0 success
 *          - 1 fail to run handler
 */
uint8_t mcp23008_basic_irq_handler(void) {
    20e8:	b510      	push	{r4, lr}
    if (mcp23008_irq_handler(&mcp23008_handle) != 0) {
    20ea:	4806      	ldr	r0, [pc, #24]	; (2104 <mcp23008_basic_irq_handler+0x1c>)
    20ec:	4478      	add	r0, pc
    20ee:	f7ff fb7b 	bl	17e8 <mcp23008_irq_handler>
    20f2:	2800      	cmp	r0, #0
    20f4:	d100      	bne.n	20f8 <mcp23008_basic_irq_handler+0x10>
        mcp23008_interface_debug_print("no interrupt\n\r");
        return 1; /**< failed to execute irq */
    }
    return 0; /**< success */
}
    20f6:	bd10      	pop	{r4, pc}
        mcp23008_interface_debug_print("no interrupt\n\r");
    20f8:	4803      	ldr	r0, [pc, #12]	; (2108 <mcp23008_basic_irq_handler+0x20>)
    20fa:	4478      	add	r0, pc
    20fc:	f000 f87c 	bl	21f8 <mcp23008_interface_debug_print>
        return 1; /**< failed to execute irq */
    2100:	2001      	movs	r0, #1
    2102:	e7f8      	b.n	20f6 <mcp23008_basic_irq_handler+0xe>
    2104:	1fffe004 	.word	0x1fffe004
    2108:	00001b3e 	.word	0x00001b3e

0000210c <mcp23008_basic_gpio_write>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_gpio_write(mcp23008_gpio_port_t GPIOx, mcp23008_port_logic_level_t level) {
    210c:	b510      	push	{r4, lr}
    210e:	000a      	movs	r2, r1

    err = mcp23008_pin_write(&mcp23008_handle, GPIOx, level) != 0;
    2110:	0001      	movs	r1, r0
    2112:	4804      	ldr	r0, [pc, #16]	; (2124 <mcp23008_basic_gpio_write+0x18>)
    2114:	4478      	add	r0, pc
    2116:	f7ff fbe3 	bl	18e0 <mcp23008_pin_write>
    211a:	1e43      	subs	r3, r0, #1
    211c:	4198      	sbcs	r0, r3
    211e:	b2c0      	uxtb	r0, r0
    if(err)
    {
        return err; /**< failed to execute routine */
    }
    return 0; /**< success */
}
    2120:	bd10      	pop	{r4, pc}
    2122:	46c0      	nop			; (mov r8, r8)
    2124:	1fffdfdc 	.word	0x1fffdfdc

00002128 <mcp23008_basic_gpio_set_direction>:
uint8_t mcp23008_basic_gpio_set_direction(mcp23008_gpio_port_t GPIOx, mcp23008_port_mode_t direction) {
    2128:	b510      	push	{r4, lr}
    212a:	0004      	movs	r4, r0
    if (direction == MCP23008_INPUT_PULLUP) {
    212c:	2910      	cmp	r1, #16
    212e:	d009      	beq.n	2144 <mcp23008_basic_gpio_set_direction+0x1c>
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, direction) != 0) {
    2130:	000a      	movs	r2, r1
    2132:	0001      	movs	r1, r0
    2134:	4814      	ldr	r0, [pc, #80]	; (2188 <mcp23008_basic_gpio_set_direction+0x60>)
    2136:	4478      	add	r0, pc
    2138:	f7ff fb96 	bl	1868 <mcp23008_set_pin_mode>
    213c:	1e04      	subs	r4, r0, #0
    213e:	d01b      	beq.n	2178 <mcp23008_basic_gpio_set_direction+0x50>
            return 1; /**< failed to execute routine */
    2140:	2001      	movs	r0, #1
    2142:	e01f      	b.n	2184 <mcp23008_basic_gpio_set_direction+0x5c>
        if (mcp23008_set_pin_pullup_mode(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE) != 0) {
    2144:	2201      	movs	r2, #1
    2146:	0001      	movs	r1, r0
    2148:	4810      	ldr	r0, [pc, #64]	; (218c <mcp23008_basic_gpio_set_direction+0x64>)
    214a:	4478      	add	r0, pc
    214c:	f7ff fc04 	bl	1958 <mcp23008_set_pin_pullup_mode>
    2150:	2800      	cmp	r0, #0
    2152:	d001      	beq.n	2158 <mcp23008_basic_gpio_set_direction+0x30>
            return 1; /**< failed to execute routine */
    2154:	2001      	movs	r0, #1
    2156:	e015      	b.n	2184 <mcp23008_basic_gpio_set_direction+0x5c>
        if (mcp23008_set_pin_mode(&mcp23008_handle, GPIOx, MCP23008_INPUT) != 0) {
    2158:	2201      	movs	r2, #1
    215a:	0021      	movs	r1, r4
    215c:	480c      	ldr	r0, [pc, #48]	; (2190 <mcp23008_basic_gpio_set_direction+0x68>)
    215e:	4478      	add	r0, pc
    2160:	f7ff fb82 	bl	1868 <mcp23008_set_pin_mode>
    2164:	2800      	cmp	r0, #0
    2166:	d009      	beq.n	217c <mcp23008_basic_gpio_set_direction+0x54>
            return 1; /**< failed to execute routine */
    2168:	2001      	movs	r0, #1
    216a:	e00b      	b.n	2184 <mcp23008_basic_gpio_set_direction+0x5c>
            mcp23008_basic_gpio_write(index, MCP23008_GPIO_LOW);
    216c:	2100      	movs	r1, #0
    216e:	0020      	movs	r0, r4
    2170:	f7ff ffcc 	bl	210c <mcp23008_basic_gpio_write>
        for (index = 0; index < MCP23008_MAX_NUM_GPIO_PIN; index++) /**< clear port after setting the direction */
    2174:	3401      	adds	r4, #1
    2176:	b2e4      	uxtb	r4, r4
    2178:	2c07      	cmp	r4, #7
    217a:	d9f7      	bls.n	216c <mcp23008_basic_gpio_set_direction+0x44>
    mcp23008_interface_delay_ms(50);
    217c:	2032      	movs	r0, #50	; 0x32
    217e:	f000 f837 	bl	21f0 <mcp23008_interface_delay_ms>
    return 0; /**< success */
    2182:	2000      	movs	r0, #0
}
    2184:	bd10      	pop	{r4, pc}
    2186:	46c0      	nop			; (mov r8, r8)
    2188:	1fffdfba 	.word	0x1fffdfba
    218c:	1fffdfa6 	.word	0x1fffdfa6
    2190:	1fffdf92 	.word	0x1fffdf92

00002194 <mcp23008_basic_INT_enable>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_INT_enable(mcp23008_gpio_port_t GPIOx, mcp23008_int_default_value_t edge_select) {
    2194:	b570      	push	{r4, r5, r6, lr}
    2196:	0004      	movs	r4, r0
    2198:	000d      	movs	r5, r1

    err = mcp23008_set_pin_interrupt(&mcp23008_handle, GPIOx, MCP23008_BOOL_TRUE) != 0;
    219a:	2201      	movs	r2, #1
    219c:	0001      	movs	r1, r0
    219e:	480a      	ldr	r0, [pc, #40]	; (21c8 <mcp23008_basic_INT_enable+0x34>)
    21a0:	4478      	add	r0, pc
    21a2:	f7ff fc51 	bl	1a48 <mcp23008_set_pin_interrupt>
    21a6:	1e43      	subs	r3, r0, #1
    21a8:	4198      	sbcs	r0, r3
    21aa:	b2c0      	uxtb	r0, r0
    if(err)
    21ac:	2800      	cmp	r0, #0
    21ae:	d000      	beq.n	21b2 <mcp23008_basic_INT_enable+0x1e>
    {
        return err; /**< failed to execute routine */
    }

    return 0; /**< success */
}
    21b0:	bd70      	pop	{r4, r5, r6, pc}
    err = mcp23008_set_default_compare_value(&mcp23008_handle, GPIOx, edge_select) != 0;
    21b2:	002a      	movs	r2, r5
    21b4:	0021      	movs	r1, r4
    21b6:	4805      	ldr	r0, [pc, #20]	; (21cc <mcp23008_basic_INT_enable+0x38>)
    21b8:	4478      	add	r0, pc
    21ba:	f7ff fd53 	bl	1c64 <mcp23008_set_default_compare_value>
    21be:	1e43      	subs	r3, r0, #1
    21c0:	4198      	sbcs	r0, r3
    21c2:	b2c0      	uxtb	r0, r0
    21c4:	e7f4      	b.n	21b0 <mcp23008_basic_INT_enable+0x1c>
    21c6:	46c0      	nop			; (mov r8, r8)
    21c8:	1fffdf50 	.word	0x1fffdf50
    21cc:	1fffdf38 	.word	0x1fffdf38

000021d0 <mcp23008_basic_clr_INT_flag>:
 * @return status code
 *          - 0 success
 *          - 1 failed
 * @note    none
 */
uint8_t mcp23008_basic_clr_INT_flag(void) {
    21d0:	b510      	push	{r4, lr}
     err = mcp23008_clear_interrupt_flag(&mcp23008_handle/*, GPIOx, MCP23008_INT_CLEAR*/) != 0;
    21d2:	4804      	ldr	r0, [pc, #16]	; (21e4 <mcp23008_basic_clr_INT_flag+0x14>)
    21d4:	4478      	add	r0, pc
    21d6:	f7ff fc73 	bl	1ac0 <mcp23008_clear_interrupt_flag>
    21da:	1e43      	subs	r3, r0, #1
    21dc:	4198      	sbcs	r0, r3
    21de:	b2c0      	uxtb	r0, r0
    if(err)
    {
        return err; /**< failed to execute routine */
    }
    return 0; /**< success */
}
    21e0:	bd10      	pop	{r4, pc}
    21e2:	46c0      	nop			; (mov r8, r8)
    21e4:	1fffdf1c 	.word	0x1fffdf1c

000021e8 <mcp23008_interface_i2c_init>:
    /*call your i2c initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
    21e8:	2000      	movs	r0, #0
    21ea:	4770      	bx	lr

000021ec <mcp23008_interface_i2c_deinit>:
    /*call your i2c de-initialize function here*/
    /*user code begin */

    /*user code end*/
    return 0; /**< success */
}
    21ec:	2000      	movs	r0, #0
    21ee:	4770      	bx	lr

000021f0 <mcp23008_interface_delay_ms>:
/**
 * @brief     interface delay ms
 * @param[in] U32Ms
 * @note      none
 */
void mcp23008_interface_delay_ms(uint32_t U32Ms){
    21f0:	b510      	push	{r4, lr}
    /*call your delay function here*/
    /*user code begin */
	delay_ms(U32Ms);
    21f2:	f7fe f925 	bl	440 <delay_ms>
    /*user code end*/
}
    21f6:	bd10      	pop	{r4, pc}

000021f8 <mcp23008_interface_debug_print>:
/**
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void mcp23008_interface_debug_print(const char *const fmt, ...) {
    21f8:	b40f      	push	{r0, r1, r2, r3}
    21fa:	b5f0      	push	{r4, r5, r6, r7, lr}
    21fc:	b0c3      	sub	sp, #268	; 0x10c
    21fe:	ad48      	add	r5, sp, #288	; 0x120
    2200:	cd80      	ldmia	r5!, {r7}
#ifdef MCP23008_DEBUG_MODE
    volatile char str[256];
    volatile uint8_t len;
    va_list args;

    memset((char *) str, 0, sizeof (char)*256);
    2202:	2680      	movs	r6, #128	; 0x80
    2204:	0076      	lsls	r6, r6, #1
    2206:	0032      	movs	r2, r6
    2208:	2100      	movs	r1, #0
    220a:	ac02      	add	r4, sp, #8
    220c:	0020      	movs	r0, r4
    220e:	f000 fdcf 	bl	2db0 <memset>
    va_start(args, fmt);
    2212:	9500      	str	r5, [sp, #0]
    vsnprintf((char *) str, 256, (char const *) fmt, args);
    2214:	002b      	movs	r3, r5
    2216:	003a      	movs	r2, r7
    2218:	0031      	movs	r1, r6
    221a:	0020      	movs	r0, r4
    221c:	f000 fe18 	bl	2e50 <vsniprintf>
    va_end(args);

    len = strlen((char *) str);
    2220:	0020      	movs	r0, r4
    2222:	f000 fdcd 	bl	2dc0 <strlen>
    2226:	b2c0      	uxtb	r0, r0
    2228:	466b      	mov	r3, sp
    222a:	71d8      	strb	r0, [r3, #7]
//    EUSART1_Write_Text((const char *) str, len);
    (void)print((uint8_t *)str, len);
    222c:	79d9      	ldrb	r1, [r3, #7]
    222e:	b2c9      	uxtb	r1, r1
    2230:	0020      	movs	r0, r4
    2232:	f7ff f9cb 	bl	15cc <print>

    /*user code end*/
#endif
}
    2236:	b043      	add	sp, #268	; 0x10c
    2238:	bcf0      	pop	{r4, r5, r6, r7}
    223a:	bc08      	pop	{r3}
    223c:	b004      	add	sp, #16
    223e:	4718      	bx	r3

00002240 <mcp23008_interface_i2c_read>:
uint8_t mcp23008_interface_i2c_read(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
    2240:	b510      	push	{r4, lr}
 if(i2c_read(u8Addr, pBuf, u8Length) !=  0)
    2242:	f7ff f9df 	bl	1604 <i2c_read>
    2246:	2800      	cmp	r0, #0
    2248:	d100      	bne.n	224c <mcp23008_interface_i2c_read+0xc>
}
    224a:	bd10      	pop	{r4, pc}
	 mcp23008_interface_debug_print("i2c write failed, check the i2c address or wiring\n");
    224c:	4802      	ldr	r0, [pc, #8]	; (2258 <mcp23008_interface_i2c_read+0x18>)
    224e:	4478      	add	r0, pc
    2250:	f7ff ffd2 	bl	21f8 <mcp23008_interface_debug_print>
	 return 1;
    2254:	2001      	movs	r0, #1
    2256:	e7f8      	b.n	224a <mcp23008_interface_i2c_read+0xa>
    2258:	000019fa 	.word	0x000019fa

0000225c <mcp23008_interface_i2c_write>:
uint8_t mcp23008_interface_i2c_write(uint8_t u8Addr, uint8_t *pBuf, uint16_t u8Length) {
    225c:	b510      	push	{r4, lr}
    if(i2c_write(u8Addr, pBuf, u8Length) !=  0)
    225e:	f7ff f9f5 	bl	164c <i2c_write>
    2262:	2800      	cmp	r0, #0
    2264:	d100      	bne.n	2268 <mcp23008_interface_i2c_write+0xc>
}
    2266:	bd10      	pop	{r4, pc}
	    mcp23008_interface_debug_print("i2c write failed, check the i2c address or wiring\n");
    2268:	4802      	ldr	r0, [pc, #8]	; (2274 <mcp23008_interface_i2c_write+0x18>)
    226a:	4478      	add	r0, pc
    226c:	f7ff ffc4 	bl	21f8 <mcp23008_interface_debug_print>
	    return 1;
    2270:	2001      	movs	r0, #1
    2272:	e7f8      	b.n	2266 <mcp23008_interface_i2c_write+0xa>
    2274:	000019de 	.word	0x000019de

00002278 <mcp23008_interface_receive_callback>:
/**
 * @brief     interface receive callback
 * @param[in] type is the interrupt type
 * @note      none
 */
void mcp23008_interface_receive_callback(uint8_t type) {
    2278:	b510      	push	{r4, lr}
    /*call your interrupt callback function here*/
    /*user code begin */
    switch (type) {
    227a:	2807      	cmp	r0, #7
    227c:	d813      	bhi.n	22a6 <mcp23008_interface_receive_callback+0x2e>
    227e:	f000 f81d 	bl	22bc <__gnu_thumb1_case_uqi>
    2282:	0b04      	.short	0x0b04
    2284:	0a0a0a0a 	.word	0x0a0a0a0a
    2288:	0a0a      	.short	0x0a0a
        case MCP23008_GPIO_PIN_0:
        {
            mcp23008_interface_debug_print("mcp23008: GP0 interrupt\n");
    228a:	4809      	ldr	r0, [pc, #36]	; (22b0 <mcp23008_interface_receive_callback+0x38>)
    228c:	4478      	add	r0, pc
    228e:	f7ff ffb3 	bl	21f8 <mcp23008_interface_debug_print>
			gpio_toggle_pin_blue();
    2292:	f7ff fa05 	bl	16a0 <gpio_toggle_pin_blue>
            break;
    }

    /*user code end*/

}
    2296:	bd10      	pop	{r4, pc}
            mcp23008_interface_debug_print("mcp23008: GP1 interrupt\n");
    2298:	4806      	ldr	r0, [pc, #24]	; (22b4 <mcp23008_interface_receive_callback+0x3c>)
    229a:	4478      	add	r0, pc
    229c:	f7ff ffac 	bl	21f8 <mcp23008_interface_debug_print>
			gpio_toggle_pin_green();
    22a0:	f7ff f9f8 	bl	1694 <gpio_toggle_pin_green>
            break;
    22a4:	e7f7      	b.n	2296 <mcp23008_interface_receive_callback+0x1e>
            mcp23008_interface_debug_print("mcp23008:false interrupt t\n");
    22a6:	4804      	ldr	r0, [pc, #16]	; (22b8 <mcp23008_interface_receive_callback+0x40>)
    22a8:	4478      	add	r0, pc
    22aa:	f7ff ffa5 	bl	21f8 <mcp23008_interface_debug_print>
}
    22ae:	e7f2      	b.n	2296 <mcp23008_interface_receive_callback+0x1e>
    22b0:	000019f0 	.word	0x000019f0
    22b4:	000019fe 	.word	0x000019fe
    22b8:	00001a0c 	.word	0x00001a0c

000022bc <__gnu_thumb1_case_uqi>:
    22bc:	b402      	push	{r1}
    22be:	4671      	mov	r1, lr
    22c0:	0849      	lsrs	r1, r1, #1
    22c2:	0049      	lsls	r1, r1, #1
    22c4:	5c09      	ldrb	r1, [r1, r0]
    22c6:	0049      	lsls	r1, r1, #1
    22c8:	448e      	add	lr, r1
    22ca:	bc02      	pop	{r1}
    22cc:	4770      	bx	lr
    22ce:	46c0      	nop			; (mov r8, r8)

000022d0 <__udivsi3>:
    22d0:	2200      	movs	r2, #0
    22d2:	0843      	lsrs	r3, r0, #1
    22d4:	428b      	cmp	r3, r1
    22d6:	d374      	bcc.n	23c2 <__udivsi3+0xf2>
    22d8:	0903      	lsrs	r3, r0, #4
    22da:	428b      	cmp	r3, r1
    22dc:	d35f      	bcc.n	239e <__udivsi3+0xce>
    22de:	0a03      	lsrs	r3, r0, #8
    22e0:	428b      	cmp	r3, r1
    22e2:	d344      	bcc.n	236e <__udivsi3+0x9e>
    22e4:	0b03      	lsrs	r3, r0, #12
    22e6:	428b      	cmp	r3, r1
    22e8:	d328      	bcc.n	233c <__udivsi3+0x6c>
    22ea:	0c03      	lsrs	r3, r0, #16
    22ec:	428b      	cmp	r3, r1
    22ee:	d30d      	bcc.n	230c <__udivsi3+0x3c>
    22f0:	22ff      	movs	r2, #255	; 0xff
    22f2:	0209      	lsls	r1, r1, #8
    22f4:	ba12      	rev	r2, r2
    22f6:	0c03      	lsrs	r3, r0, #16
    22f8:	428b      	cmp	r3, r1
    22fa:	d302      	bcc.n	2302 <__udivsi3+0x32>
    22fc:	1212      	asrs	r2, r2, #8
    22fe:	0209      	lsls	r1, r1, #8
    2300:	d065      	beq.n	23ce <__udivsi3+0xfe>
    2302:	0b03      	lsrs	r3, r0, #12
    2304:	428b      	cmp	r3, r1
    2306:	d319      	bcc.n	233c <__udivsi3+0x6c>
    2308:	e000      	b.n	230c <__udivsi3+0x3c>
    230a:	0a09      	lsrs	r1, r1, #8
    230c:	0bc3      	lsrs	r3, r0, #15
    230e:	428b      	cmp	r3, r1
    2310:	d301      	bcc.n	2316 <__udivsi3+0x46>
    2312:	03cb      	lsls	r3, r1, #15
    2314:	1ac0      	subs	r0, r0, r3
    2316:	4152      	adcs	r2, r2
    2318:	0b83      	lsrs	r3, r0, #14
    231a:	428b      	cmp	r3, r1
    231c:	d301      	bcc.n	2322 <__udivsi3+0x52>
    231e:	038b      	lsls	r3, r1, #14
    2320:	1ac0      	subs	r0, r0, r3
    2322:	4152      	adcs	r2, r2
    2324:	0b43      	lsrs	r3, r0, #13
    2326:	428b      	cmp	r3, r1
    2328:	d301      	bcc.n	232e <__udivsi3+0x5e>
    232a:	034b      	lsls	r3, r1, #13
    232c:	1ac0      	subs	r0, r0, r3
    232e:	4152      	adcs	r2, r2
    2330:	0b03      	lsrs	r3, r0, #12
    2332:	428b      	cmp	r3, r1
    2334:	d301      	bcc.n	233a <__udivsi3+0x6a>
    2336:	030b      	lsls	r3, r1, #12
    2338:	1ac0      	subs	r0, r0, r3
    233a:	4152      	adcs	r2, r2
    233c:	0ac3      	lsrs	r3, r0, #11
    233e:	428b      	cmp	r3, r1
    2340:	d301      	bcc.n	2346 <__udivsi3+0x76>
    2342:	02cb      	lsls	r3, r1, #11
    2344:	1ac0      	subs	r0, r0, r3
    2346:	4152      	adcs	r2, r2
    2348:	0a83      	lsrs	r3, r0, #10
    234a:	428b      	cmp	r3, r1
    234c:	d301      	bcc.n	2352 <__udivsi3+0x82>
    234e:	028b      	lsls	r3, r1, #10
    2350:	1ac0      	subs	r0, r0, r3
    2352:	4152      	adcs	r2, r2
    2354:	0a43      	lsrs	r3, r0, #9
    2356:	428b      	cmp	r3, r1
    2358:	d301      	bcc.n	235e <__udivsi3+0x8e>
    235a:	024b      	lsls	r3, r1, #9
    235c:	1ac0      	subs	r0, r0, r3
    235e:	4152      	adcs	r2, r2
    2360:	0a03      	lsrs	r3, r0, #8
    2362:	428b      	cmp	r3, r1
    2364:	d301      	bcc.n	236a <__udivsi3+0x9a>
    2366:	020b      	lsls	r3, r1, #8
    2368:	1ac0      	subs	r0, r0, r3
    236a:	4152      	adcs	r2, r2
    236c:	d2cd      	bcs.n	230a <__udivsi3+0x3a>
    236e:	09c3      	lsrs	r3, r0, #7
    2370:	428b      	cmp	r3, r1
    2372:	d301      	bcc.n	2378 <__udivsi3+0xa8>
    2374:	01cb      	lsls	r3, r1, #7
    2376:	1ac0      	subs	r0, r0, r3
    2378:	4152      	adcs	r2, r2
    237a:	0983      	lsrs	r3, r0, #6
    237c:	428b      	cmp	r3, r1
    237e:	d301      	bcc.n	2384 <__udivsi3+0xb4>
    2380:	018b      	lsls	r3, r1, #6
    2382:	1ac0      	subs	r0, r0, r3
    2384:	4152      	adcs	r2, r2
    2386:	0943      	lsrs	r3, r0, #5
    2388:	428b      	cmp	r3, r1
    238a:	d301      	bcc.n	2390 <__udivsi3+0xc0>
    238c:	014b      	lsls	r3, r1, #5
    238e:	1ac0      	subs	r0, r0, r3
    2390:	4152      	adcs	r2, r2
    2392:	0903      	lsrs	r3, r0, #4
    2394:	428b      	cmp	r3, r1
    2396:	d301      	bcc.n	239c <__udivsi3+0xcc>
    2398:	010b      	lsls	r3, r1, #4
    239a:	1ac0      	subs	r0, r0, r3
    239c:	4152      	adcs	r2, r2
    239e:	08c3      	lsrs	r3, r0, #3
    23a0:	428b      	cmp	r3, r1
    23a2:	d301      	bcc.n	23a8 <__udivsi3+0xd8>
    23a4:	00cb      	lsls	r3, r1, #3
    23a6:	1ac0      	subs	r0, r0, r3
    23a8:	4152      	adcs	r2, r2
    23aa:	0883      	lsrs	r3, r0, #2
    23ac:	428b      	cmp	r3, r1
    23ae:	d301      	bcc.n	23b4 <__udivsi3+0xe4>
    23b0:	008b      	lsls	r3, r1, #2
    23b2:	1ac0      	subs	r0, r0, r3
    23b4:	4152      	adcs	r2, r2
    23b6:	0843      	lsrs	r3, r0, #1
    23b8:	428b      	cmp	r3, r1
    23ba:	d301      	bcc.n	23c0 <__udivsi3+0xf0>
    23bc:	004b      	lsls	r3, r1, #1
    23be:	1ac0      	subs	r0, r0, r3
    23c0:	4152      	adcs	r2, r2
    23c2:	1a41      	subs	r1, r0, r1
    23c4:	d200      	bcs.n	23c8 <__udivsi3+0xf8>
    23c6:	4601      	mov	r1, r0
    23c8:	4152      	adcs	r2, r2
    23ca:	4610      	mov	r0, r2
    23cc:	4770      	bx	lr
    23ce:	e7ff      	b.n	23d0 <__udivsi3+0x100>
    23d0:	b501      	push	{r0, lr}
    23d2:	2000      	movs	r0, #0
    23d4:	f000 f806 	bl	23e4 <__aeabi_idiv0>
    23d8:	bd02      	pop	{r1, pc}
    23da:	46c0      	nop			; (mov r8, r8)

000023dc <__aeabi_uidivmod>:
    23dc:	2900      	cmp	r1, #0
    23de:	d0f7      	beq.n	23d0 <__udivsi3+0x100>
    23e0:	e776      	b.n	22d0 <__udivsi3>
    23e2:	4770      	bx	lr

000023e4 <__aeabi_idiv0>:
    23e4:	4770      	bx	lr
    23e6:	46c0      	nop			; (mov r8, r8)

000023e8 <__ffssi2>:
    23e8:	b510      	push	{r4, lr}
    23ea:	2300      	movs	r3, #0
    23ec:	2800      	cmp	r0, #0
    23ee:	d002      	beq.n	23f6 <__ffssi2+0xe>
    23f0:	f000 fbf2 	bl	2bd8 <__ctzsi2>
    23f4:	1c43      	adds	r3, r0, #1
    23f6:	0018      	movs	r0, r3
    23f8:	bd10      	pop	{r4, pc}
    23fa:	46c0      	nop			; (mov r8, r8)

000023fc <__aeabi_f2uiz>:
    23fc:	219e      	movs	r1, #158	; 0x9e
    23fe:	b510      	push	{r4, lr}
    2400:	05c9      	lsls	r1, r1, #23
    2402:	1c04      	adds	r4, r0, #0
    2404:	f000 fbc0 	bl	2b88 <__aeabi_fcmpge>
    2408:	2800      	cmp	r0, #0
    240a:	d103      	bne.n	2414 <__aeabi_f2uiz+0x18>
    240c:	1c20      	adds	r0, r4, #0
    240e:	f000 fac9 	bl	29a4 <__aeabi_f2iz>
    2412:	bd10      	pop	{r4, pc}
    2414:	219e      	movs	r1, #158	; 0x9e
    2416:	1c20      	adds	r0, r4, #0
    2418:	05c9      	lsls	r1, r1, #23
    241a:	f000 f927 	bl	266c <__aeabi_fsub>
    241e:	f000 fac1 	bl	29a4 <__aeabi_f2iz>
    2422:	2380      	movs	r3, #128	; 0x80
    2424:	061b      	lsls	r3, r3, #24
    2426:	469c      	mov	ip, r3
    2428:	4460      	add	r0, ip
    242a:	e7f2      	b.n	2412 <__aeabi_f2uiz+0x16>

0000242c <__aeabi_fmul>:
    242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    242e:	4657      	mov	r7, sl
    2430:	464e      	mov	r6, r9
    2432:	4645      	mov	r5, r8
    2434:	46de      	mov	lr, fp
    2436:	b5e0      	push	{r5, r6, r7, lr}
    2438:	0247      	lsls	r7, r0, #9
    243a:	0046      	lsls	r6, r0, #1
    243c:	4688      	mov	r8, r1
    243e:	0a7f      	lsrs	r7, r7, #9
    2440:	0e36      	lsrs	r6, r6, #24
    2442:	0fc4      	lsrs	r4, r0, #31
    2444:	2e00      	cmp	r6, #0
    2446:	d047      	beq.n	24d8 <__aeabi_fmul+0xac>
    2448:	2eff      	cmp	r6, #255	; 0xff
    244a:	d024      	beq.n	2496 <__aeabi_fmul+0x6a>
    244c:	00fb      	lsls	r3, r7, #3
    244e:	2780      	movs	r7, #128	; 0x80
    2450:	04ff      	lsls	r7, r7, #19
    2452:	431f      	orrs	r7, r3
    2454:	2300      	movs	r3, #0
    2456:	4699      	mov	r9, r3
    2458:	469a      	mov	sl, r3
    245a:	3e7f      	subs	r6, #127	; 0x7f
    245c:	4643      	mov	r3, r8
    245e:	025d      	lsls	r5, r3, #9
    2460:	0058      	lsls	r0, r3, #1
    2462:	0fdb      	lsrs	r3, r3, #31
    2464:	0a6d      	lsrs	r5, r5, #9
    2466:	0e00      	lsrs	r0, r0, #24
    2468:	4698      	mov	r8, r3
    246a:	d043      	beq.n	24f4 <__aeabi_fmul+0xc8>
    246c:	28ff      	cmp	r0, #255	; 0xff
    246e:	d03b      	beq.n	24e8 <__aeabi_fmul+0xbc>
    2470:	00eb      	lsls	r3, r5, #3
    2472:	2580      	movs	r5, #128	; 0x80
    2474:	2200      	movs	r2, #0
    2476:	04ed      	lsls	r5, r5, #19
    2478:	431d      	orrs	r5, r3
    247a:	387f      	subs	r0, #127	; 0x7f
    247c:	1836      	adds	r6, r6, r0
    247e:	1c73      	adds	r3, r6, #1
    2480:	4641      	mov	r1, r8
    2482:	469b      	mov	fp, r3
    2484:	464b      	mov	r3, r9
    2486:	4061      	eors	r1, r4
    2488:	4313      	orrs	r3, r2
    248a:	2b0f      	cmp	r3, #15
    248c:	d864      	bhi.n	2558 <__aeabi_fmul+0x12c>
    248e:	4875      	ldr	r0, [pc, #468]	; (2664 <__aeabi_fmul+0x238>)
    2490:	009b      	lsls	r3, r3, #2
    2492:	58c3      	ldr	r3, [r0, r3]
    2494:	469f      	mov	pc, r3
    2496:	2f00      	cmp	r7, #0
    2498:	d142      	bne.n	2520 <__aeabi_fmul+0xf4>
    249a:	2308      	movs	r3, #8
    249c:	4699      	mov	r9, r3
    249e:	3b06      	subs	r3, #6
    24a0:	26ff      	movs	r6, #255	; 0xff
    24a2:	469a      	mov	sl, r3
    24a4:	e7da      	b.n	245c <__aeabi_fmul+0x30>
    24a6:	4641      	mov	r1, r8
    24a8:	2a02      	cmp	r2, #2
    24aa:	d028      	beq.n	24fe <__aeabi_fmul+0xd2>
    24ac:	2a03      	cmp	r2, #3
    24ae:	d100      	bne.n	24b2 <__aeabi_fmul+0x86>
    24b0:	e0ce      	b.n	2650 <__aeabi_fmul+0x224>
    24b2:	2a01      	cmp	r2, #1
    24b4:	d000      	beq.n	24b8 <__aeabi_fmul+0x8c>
    24b6:	e0ac      	b.n	2612 <__aeabi_fmul+0x1e6>
    24b8:	4011      	ands	r1, r2
    24ba:	2000      	movs	r0, #0
    24bc:	2200      	movs	r2, #0
    24be:	b2cc      	uxtb	r4, r1
    24c0:	0240      	lsls	r0, r0, #9
    24c2:	05d2      	lsls	r2, r2, #23
    24c4:	0a40      	lsrs	r0, r0, #9
    24c6:	07e4      	lsls	r4, r4, #31
    24c8:	4310      	orrs	r0, r2
    24ca:	4320      	orrs	r0, r4
    24cc:	bc3c      	pop	{r2, r3, r4, r5}
    24ce:	4690      	mov	r8, r2
    24d0:	4699      	mov	r9, r3
    24d2:	46a2      	mov	sl, r4
    24d4:	46ab      	mov	fp, r5
    24d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    24d8:	2f00      	cmp	r7, #0
    24da:	d115      	bne.n	2508 <__aeabi_fmul+0xdc>
    24dc:	2304      	movs	r3, #4
    24de:	4699      	mov	r9, r3
    24e0:	3b03      	subs	r3, #3
    24e2:	2600      	movs	r6, #0
    24e4:	469a      	mov	sl, r3
    24e6:	e7b9      	b.n	245c <__aeabi_fmul+0x30>
    24e8:	20ff      	movs	r0, #255	; 0xff
    24ea:	2202      	movs	r2, #2
    24ec:	2d00      	cmp	r5, #0
    24ee:	d0c5      	beq.n	247c <__aeabi_fmul+0x50>
    24f0:	2203      	movs	r2, #3
    24f2:	e7c3      	b.n	247c <__aeabi_fmul+0x50>
    24f4:	2d00      	cmp	r5, #0
    24f6:	d119      	bne.n	252c <__aeabi_fmul+0x100>
    24f8:	2000      	movs	r0, #0
    24fa:	2201      	movs	r2, #1
    24fc:	e7be      	b.n	247c <__aeabi_fmul+0x50>
    24fe:	2401      	movs	r4, #1
    2500:	22ff      	movs	r2, #255	; 0xff
    2502:	400c      	ands	r4, r1
    2504:	2000      	movs	r0, #0
    2506:	e7db      	b.n	24c0 <__aeabi_fmul+0x94>
    2508:	0038      	movs	r0, r7
    250a:	f000 fb47 	bl	2b9c <__clzsi2>
    250e:	2676      	movs	r6, #118	; 0x76
    2510:	1f43      	subs	r3, r0, #5
    2512:	409f      	lsls	r7, r3
    2514:	2300      	movs	r3, #0
    2516:	4276      	negs	r6, r6
    2518:	1a36      	subs	r6, r6, r0
    251a:	4699      	mov	r9, r3
    251c:	469a      	mov	sl, r3
    251e:	e79d      	b.n	245c <__aeabi_fmul+0x30>
    2520:	230c      	movs	r3, #12
    2522:	4699      	mov	r9, r3
    2524:	3b09      	subs	r3, #9
    2526:	26ff      	movs	r6, #255	; 0xff
    2528:	469a      	mov	sl, r3
    252a:	e797      	b.n	245c <__aeabi_fmul+0x30>
    252c:	0028      	movs	r0, r5
    252e:	f000 fb35 	bl	2b9c <__clzsi2>
    2532:	1f43      	subs	r3, r0, #5
    2534:	409d      	lsls	r5, r3
    2536:	2376      	movs	r3, #118	; 0x76
    2538:	425b      	negs	r3, r3
    253a:	1a18      	subs	r0, r3, r0
    253c:	2200      	movs	r2, #0
    253e:	e79d      	b.n	247c <__aeabi_fmul+0x50>
    2540:	2080      	movs	r0, #128	; 0x80
    2542:	2400      	movs	r4, #0
    2544:	03c0      	lsls	r0, r0, #15
    2546:	22ff      	movs	r2, #255	; 0xff
    2548:	e7ba      	b.n	24c0 <__aeabi_fmul+0x94>
    254a:	003d      	movs	r5, r7
    254c:	4652      	mov	r2, sl
    254e:	e7ab      	b.n	24a8 <__aeabi_fmul+0x7c>
    2550:	003d      	movs	r5, r7
    2552:	0021      	movs	r1, r4
    2554:	4652      	mov	r2, sl
    2556:	e7a7      	b.n	24a8 <__aeabi_fmul+0x7c>
    2558:	0c3b      	lsrs	r3, r7, #16
    255a:	469c      	mov	ip, r3
    255c:	042a      	lsls	r2, r5, #16
    255e:	0c12      	lsrs	r2, r2, #16
    2560:	0c2b      	lsrs	r3, r5, #16
    2562:	0014      	movs	r4, r2
    2564:	4660      	mov	r0, ip
    2566:	4665      	mov	r5, ip
    2568:	043f      	lsls	r7, r7, #16
    256a:	0c3f      	lsrs	r7, r7, #16
    256c:	437c      	muls	r4, r7
    256e:	4342      	muls	r2, r0
    2570:	435d      	muls	r5, r3
    2572:	437b      	muls	r3, r7
    2574:	0c27      	lsrs	r7, r4, #16
    2576:	189b      	adds	r3, r3, r2
    2578:	18ff      	adds	r7, r7, r3
    257a:	42ba      	cmp	r2, r7
    257c:	d903      	bls.n	2586 <__aeabi_fmul+0x15a>
    257e:	2380      	movs	r3, #128	; 0x80
    2580:	025b      	lsls	r3, r3, #9
    2582:	469c      	mov	ip, r3
    2584:	4465      	add	r5, ip
    2586:	0424      	lsls	r4, r4, #16
    2588:	043a      	lsls	r2, r7, #16
    258a:	0c24      	lsrs	r4, r4, #16
    258c:	1912      	adds	r2, r2, r4
    258e:	0193      	lsls	r3, r2, #6
    2590:	1e5c      	subs	r4, r3, #1
    2592:	41a3      	sbcs	r3, r4
    2594:	0c3f      	lsrs	r7, r7, #16
    2596:	0e92      	lsrs	r2, r2, #26
    2598:	197d      	adds	r5, r7, r5
    259a:	431a      	orrs	r2, r3
    259c:	01ad      	lsls	r5, r5, #6
    259e:	4315      	orrs	r5, r2
    25a0:	012b      	lsls	r3, r5, #4
    25a2:	d504      	bpl.n	25ae <__aeabi_fmul+0x182>
    25a4:	2301      	movs	r3, #1
    25a6:	465e      	mov	r6, fp
    25a8:	086a      	lsrs	r2, r5, #1
    25aa:	401d      	ands	r5, r3
    25ac:	4315      	orrs	r5, r2
    25ae:	0032      	movs	r2, r6
    25b0:	327f      	adds	r2, #127	; 0x7f
    25b2:	2a00      	cmp	r2, #0
    25b4:	dd25      	ble.n	2602 <__aeabi_fmul+0x1d6>
    25b6:	076b      	lsls	r3, r5, #29
    25b8:	d004      	beq.n	25c4 <__aeabi_fmul+0x198>
    25ba:	230f      	movs	r3, #15
    25bc:	402b      	ands	r3, r5
    25be:	2b04      	cmp	r3, #4
    25c0:	d000      	beq.n	25c4 <__aeabi_fmul+0x198>
    25c2:	3504      	adds	r5, #4
    25c4:	012b      	lsls	r3, r5, #4
    25c6:	d503      	bpl.n	25d0 <__aeabi_fmul+0x1a4>
    25c8:	0032      	movs	r2, r6
    25ca:	4b27      	ldr	r3, [pc, #156]	; (2668 <__aeabi_fmul+0x23c>)
    25cc:	3280      	adds	r2, #128	; 0x80
    25ce:	401d      	ands	r5, r3
    25d0:	2afe      	cmp	r2, #254	; 0xfe
    25d2:	dc94      	bgt.n	24fe <__aeabi_fmul+0xd2>
    25d4:	2401      	movs	r4, #1
    25d6:	01a8      	lsls	r0, r5, #6
    25d8:	0a40      	lsrs	r0, r0, #9
    25da:	b2d2      	uxtb	r2, r2
    25dc:	400c      	ands	r4, r1
    25de:	e76f      	b.n	24c0 <__aeabi_fmul+0x94>
    25e0:	2080      	movs	r0, #128	; 0x80
    25e2:	03c0      	lsls	r0, r0, #15
    25e4:	4207      	tst	r7, r0
    25e6:	d007      	beq.n	25f8 <__aeabi_fmul+0x1cc>
    25e8:	4205      	tst	r5, r0
    25ea:	d105      	bne.n	25f8 <__aeabi_fmul+0x1cc>
    25ec:	4328      	orrs	r0, r5
    25ee:	0240      	lsls	r0, r0, #9
    25f0:	0a40      	lsrs	r0, r0, #9
    25f2:	4644      	mov	r4, r8
    25f4:	22ff      	movs	r2, #255	; 0xff
    25f6:	e763      	b.n	24c0 <__aeabi_fmul+0x94>
    25f8:	4338      	orrs	r0, r7
    25fa:	0240      	lsls	r0, r0, #9
    25fc:	0a40      	lsrs	r0, r0, #9
    25fe:	22ff      	movs	r2, #255	; 0xff
    2600:	e75e      	b.n	24c0 <__aeabi_fmul+0x94>
    2602:	2401      	movs	r4, #1
    2604:	1aa3      	subs	r3, r4, r2
    2606:	2b1b      	cmp	r3, #27
    2608:	dd05      	ble.n	2616 <__aeabi_fmul+0x1ea>
    260a:	400c      	ands	r4, r1
    260c:	2200      	movs	r2, #0
    260e:	2000      	movs	r0, #0
    2610:	e756      	b.n	24c0 <__aeabi_fmul+0x94>
    2612:	465e      	mov	r6, fp
    2614:	e7cb      	b.n	25ae <__aeabi_fmul+0x182>
    2616:	002a      	movs	r2, r5
    2618:	2020      	movs	r0, #32
    261a:	40da      	lsrs	r2, r3
    261c:	1ac3      	subs	r3, r0, r3
    261e:	409d      	lsls	r5, r3
    2620:	002b      	movs	r3, r5
    2622:	1e5d      	subs	r5, r3, #1
    2624:	41ab      	sbcs	r3, r5
    2626:	4313      	orrs	r3, r2
    2628:	075a      	lsls	r2, r3, #29
    262a:	d004      	beq.n	2636 <__aeabi_fmul+0x20a>
    262c:	220f      	movs	r2, #15
    262e:	401a      	ands	r2, r3
    2630:	2a04      	cmp	r2, #4
    2632:	d000      	beq.n	2636 <__aeabi_fmul+0x20a>
    2634:	3304      	adds	r3, #4
    2636:	015a      	lsls	r2, r3, #5
    2638:	d504      	bpl.n	2644 <__aeabi_fmul+0x218>
    263a:	2401      	movs	r4, #1
    263c:	2201      	movs	r2, #1
    263e:	400c      	ands	r4, r1
    2640:	2000      	movs	r0, #0
    2642:	e73d      	b.n	24c0 <__aeabi_fmul+0x94>
    2644:	2401      	movs	r4, #1
    2646:	019b      	lsls	r3, r3, #6
    2648:	0a58      	lsrs	r0, r3, #9
    264a:	400c      	ands	r4, r1
    264c:	2200      	movs	r2, #0
    264e:	e737      	b.n	24c0 <__aeabi_fmul+0x94>
    2650:	2080      	movs	r0, #128	; 0x80
    2652:	2401      	movs	r4, #1
    2654:	03c0      	lsls	r0, r0, #15
    2656:	4328      	orrs	r0, r5
    2658:	0240      	lsls	r0, r0, #9
    265a:	0a40      	lsrs	r0, r0, #9
    265c:	400c      	ands	r4, r1
    265e:	22ff      	movs	r2, #255	; 0xff
    2660:	e72e      	b.n	24c0 <__aeabi_fmul+0x94>
    2662:	46c0      	nop			; (mov r8, r8)
    2664:	00003cd4 	.word	0x00003cd4
    2668:	f7ffffff 	.word	0xf7ffffff

0000266c <__aeabi_fsub>:
    266c:	b5f0      	push	{r4, r5, r6, r7, lr}
    266e:	464f      	mov	r7, r9
    2670:	46d6      	mov	lr, sl
    2672:	4646      	mov	r6, r8
    2674:	0044      	lsls	r4, r0, #1
    2676:	b5c0      	push	{r6, r7, lr}
    2678:	0fc2      	lsrs	r2, r0, #31
    267a:	0247      	lsls	r7, r0, #9
    267c:	0248      	lsls	r0, r1, #9
    267e:	0a40      	lsrs	r0, r0, #9
    2680:	4684      	mov	ip, r0
    2682:	4666      	mov	r6, ip
    2684:	0a7b      	lsrs	r3, r7, #9
    2686:	0048      	lsls	r0, r1, #1
    2688:	0fc9      	lsrs	r1, r1, #31
    268a:	469a      	mov	sl, r3
    268c:	0e24      	lsrs	r4, r4, #24
    268e:	0015      	movs	r5, r2
    2690:	00db      	lsls	r3, r3, #3
    2692:	0e00      	lsrs	r0, r0, #24
    2694:	4689      	mov	r9, r1
    2696:	00f6      	lsls	r6, r6, #3
    2698:	28ff      	cmp	r0, #255	; 0xff
    269a:	d100      	bne.n	269e <__aeabi_fsub+0x32>
    269c:	e08f      	b.n	27be <__aeabi_fsub+0x152>
    269e:	2101      	movs	r1, #1
    26a0:	464f      	mov	r7, r9
    26a2:	404f      	eors	r7, r1
    26a4:	0039      	movs	r1, r7
    26a6:	4291      	cmp	r1, r2
    26a8:	d066      	beq.n	2778 <__aeabi_fsub+0x10c>
    26aa:	1a22      	subs	r2, r4, r0
    26ac:	2a00      	cmp	r2, #0
    26ae:	dc00      	bgt.n	26b2 <__aeabi_fsub+0x46>
    26b0:	e09d      	b.n	27ee <__aeabi_fsub+0x182>
    26b2:	2800      	cmp	r0, #0
    26b4:	d13d      	bne.n	2732 <__aeabi_fsub+0xc6>
    26b6:	2e00      	cmp	r6, #0
    26b8:	d100      	bne.n	26bc <__aeabi_fsub+0x50>
    26ba:	e08b      	b.n	27d4 <__aeabi_fsub+0x168>
    26bc:	1e51      	subs	r1, r2, #1
    26be:	2900      	cmp	r1, #0
    26c0:	d000      	beq.n	26c4 <__aeabi_fsub+0x58>
    26c2:	e0b5      	b.n	2830 <__aeabi_fsub+0x1c4>
    26c4:	2401      	movs	r4, #1
    26c6:	1b9b      	subs	r3, r3, r6
    26c8:	015a      	lsls	r2, r3, #5
    26ca:	d544      	bpl.n	2756 <__aeabi_fsub+0xea>
    26cc:	019b      	lsls	r3, r3, #6
    26ce:	099f      	lsrs	r7, r3, #6
    26d0:	0038      	movs	r0, r7
    26d2:	f000 fa63 	bl	2b9c <__clzsi2>
    26d6:	3805      	subs	r0, #5
    26d8:	4087      	lsls	r7, r0
    26da:	4284      	cmp	r4, r0
    26dc:	dd00      	ble.n	26e0 <__aeabi_fsub+0x74>
    26de:	e096      	b.n	280e <__aeabi_fsub+0x1a2>
    26e0:	1b04      	subs	r4, r0, r4
    26e2:	003a      	movs	r2, r7
    26e4:	2020      	movs	r0, #32
    26e6:	3401      	adds	r4, #1
    26e8:	40e2      	lsrs	r2, r4
    26ea:	1b04      	subs	r4, r0, r4
    26ec:	40a7      	lsls	r7, r4
    26ee:	003b      	movs	r3, r7
    26f0:	1e5f      	subs	r7, r3, #1
    26f2:	41bb      	sbcs	r3, r7
    26f4:	2400      	movs	r4, #0
    26f6:	4313      	orrs	r3, r2
    26f8:	075a      	lsls	r2, r3, #29
    26fa:	d004      	beq.n	2706 <__aeabi_fsub+0x9a>
    26fc:	220f      	movs	r2, #15
    26fe:	401a      	ands	r2, r3
    2700:	2a04      	cmp	r2, #4
    2702:	d000      	beq.n	2706 <__aeabi_fsub+0x9a>
    2704:	3304      	adds	r3, #4
    2706:	015a      	lsls	r2, r3, #5
    2708:	d527      	bpl.n	275a <__aeabi_fsub+0xee>
    270a:	3401      	adds	r4, #1
    270c:	2cff      	cmp	r4, #255	; 0xff
    270e:	d100      	bne.n	2712 <__aeabi_fsub+0xa6>
    2710:	e079      	b.n	2806 <__aeabi_fsub+0x19a>
    2712:	2201      	movs	r2, #1
    2714:	019b      	lsls	r3, r3, #6
    2716:	0a5b      	lsrs	r3, r3, #9
    2718:	b2e4      	uxtb	r4, r4
    271a:	402a      	ands	r2, r5
    271c:	025b      	lsls	r3, r3, #9
    271e:	05e4      	lsls	r4, r4, #23
    2720:	0a58      	lsrs	r0, r3, #9
    2722:	07d2      	lsls	r2, r2, #31
    2724:	4320      	orrs	r0, r4
    2726:	4310      	orrs	r0, r2
    2728:	bc1c      	pop	{r2, r3, r4}
    272a:	4690      	mov	r8, r2
    272c:	4699      	mov	r9, r3
    272e:	46a2      	mov	sl, r4
    2730:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2732:	2cff      	cmp	r4, #255	; 0xff
    2734:	d0e0      	beq.n	26f8 <__aeabi_fsub+0x8c>
    2736:	2180      	movs	r1, #128	; 0x80
    2738:	04c9      	lsls	r1, r1, #19
    273a:	430e      	orrs	r6, r1
    273c:	2a1b      	cmp	r2, #27
    273e:	dc7b      	bgt.n	2838 <__aeabi_fsub+0x1cc>
    2740:	0031      	movs	r1, r6
    2742:	2020      	movs	r0, #32
    2744:	40d1      	lsrs	r1, r2
    2746:	1a82      	subs	r2, r0, r2
    2748:	4096      	lsls	r6, r2
    274a:	1e72      	subs	r2, r6, #1
    274c:	4196      	sbcs	r6, r2
    274e:	430e      	orrs	r6, r1
    2750:	1b9b      	subs	r3, r3, r6
    2752:	015a      	lsls	r2, r3, #5
    2754:	d4ba      	bmi.n	26cc <__aeabi_fsub+0x60>
    2756:	075a      	lsls	r2, r3, #29
    2758:	d1d0      	bne.n	26fc <__aeabi_fsub+0x90>
    275a:	2201      	movs	r2, #1
    275c:	08df      	lsrs	r7, r3, #3
    275e:	402a      	ands	r2, r5
    2760:	2cff      	cmp	r4, #255	; 0xff
    2762:	d133      	bne.n	27cc <__aeabi_fsub+0x160>
    2764:	2f00      	cmp	r7, #0
    2766:	d100      	bne.n	276a <__aeabi_fsub+0xfe>
    2768:	e0a8      	b.n	28bc <__aeabi_fsub+0x250>
    276a:	2380      	movs	r3, #128	; 0x80
    276c:	03db      	lsls	r3, r3, #15
    276e:	433b      	orrs	r3, r7
    2770:	025b      	lsls	r3, r3, #9
    2772:	0a5b      	lsrs	r3, r3, #9
    2774:	24ff      	movs	r4, #255	; 0xff
    2776:	e7d1      	b.n	271c <__aeabi_fsub+0xb0>
    2778:	1a21      	subs	r1, r4, r0
    277a:	2900      	cmp	r1, #0
    277c:	dd4c      	ble.n	2818 <__aeabi_fsub+0x1ac>
    277e:	2800      	cmp	r0, #0
    2780:	d02a      	beq.n	27d8 <__aeabi_fsub+0x16c>
    2782:	2cff      	cmp	r4, #255	; 0xff
    2784:	d0b8      	beq.n	26f8 <__aeabi_fsub+0x8c>
    2786:	2080      	movs	r0, #128	; 0x80
    2788:	04c0      	lsls	r0, r0, #19
    278a:	4306      	orrs	r6, r0
    278c:	291b      	cmp	r1, #27
    278e:	dd00      	ble.n	2792 <__aeabi_fsub+0x126>
    2790:	e0af      	b.n	28f2 <__aeabi_fsub+0x286>
    2792:	0030      	movs	r0, r6
    2794:	2720      	movs	r7, #32
    2796:	40c8      	lsrs	r0, r1
    2798:	1a79      	subs	r1, r7, r1
    279a:	408e      	lsls	r6, r1
    279c:	1e71      	subs	r1, r6, #1
    279e:	418e      	sbcs	r6, r1
    27a0:	4306      	orrs	r6, r0
    27a2:	199b      	adds	r3, r3, r6
    27a4:	0159      	lsls	r1, r3, #5
    27a6:	d5d6      	bpl.n	2756 <__aeabi_fsub+0xea>
    27a8:	3401      	adds	r4, #1
    27aa:	2cff      	cmp	r4, #255	; 0xff
    27ac:	d100      	bne.n	27b0 <__aeabi_fsub+0x144>
    27ae:	e085      	b.n	28bc <__aeabi_fsub+0x250>
    27b0:	2201      	movs	r2, #1
    27b2:	497a      	ldr	r1, [pc, #488]	; (299c <__aeabi_fsub+0x330>)
    27b4:	401a      	ands	r2, r3
    27b6:	085b      	lsrs	r3, r3, #1
    27b8:	400b      	ands	r3, r1
    27ba:	4313      	orrs	r3, r2
    27bc:	e79c      	b.n	26f8 <__aeabi_fsub+0x8c>
    27be:	2e00      	cmp	r6, #0
    27c0:	d000      	beq.n	27c4 <__aeabi_fsub+0x158>
    27c2:	e770      	b.n	26a6 <__aeabi_fsub+0x3a>
    27c4:	e76b      	b.n	269e <__aeabi_fsub+0x32>
    27c6:	1e3b      	subs	r3, r7, #0
    27c8:	d1c5      	bne.n	2756 <__aeabi_fsub+0xea>
    27ca:	2200      	movs	r2, #0
    27cc:	027b      	lsls	r3, r7, #9
    27ce:	0a5b      	lsrs	r3, r3, #9
    27d0:	b2e4      	uxtb	r4, r4
    27d2:	e7a3      	b.n	271c <__aeabi_fsub+0xb0>
    27d4:	0014      	movs	r4, r2
    27d6:	e78f      	b.n	26f8 <__aeabi_fsub+0x8c>
    27d8:	2e00      	cmp	r6, #0
    27da:	d04d      	beq.n	2878 <__aeabi_fsub+0x20c>
    27dc:	1e48      	subs	r0, r1, #1
    27de:	2800      	cmp	r0, #0
    27e0:	d157      	bne.n	2892 <__aeabi_fsub+0x226>
    27e2:	199b      	adds	r3, r3, r6
    27e4:	2401      	movs	r4, #1
    27e6:	015a      	lsls	r2, r3, #5
    27e8:	d5b5      	bpl.n	2756 <__aeabi_fsub+0xea>
    27ea:	2402      	movs	r4, #2
    27ec:	e7e0      	b.n	27b0 <__aeabi_fsub+0x144>
    27ee:	2a00      	cmp	r2, #0
    27f0:	d125      	bne.n	283e <__aeabi_fsub+0x1d2>
    27f2:	1c62      	adds	r2, r4, #1
    27f4:	b2d2      	uxtb	r2, r2
    27f6:	2a01      	cmp	r2, #1
    27f8:	dd72      	ble.n	28e0 <__aeabi_fsub+0x274>
    27fa:	1b9f      	subs	r7, r3, r6
    27fc:	017a      	lsls	r2, r7, #5
    27fe:	d535      	bpl.n	286c <__aeabi_fsub+0x200>
    2800:	1af7      	subs	r7, r6, r3
    2802:	000d      	movs	r5, r1
    2804:	e764      	b.n	26d0 <__aeabi_fsub+0x64>
    2806:	2201      	movs	r2, #1
    2808:	2300      	movs	r3, #0
    280a:	402a      	ands	r2, r5
    280c:	e786      	b.n	271c <__aeabi_fsub+0xb0>
    280e:	003b      	movs	r3, r7
    2810:	4a63      	ldr	r2, [pc, #396]	; (29a0 <__aeabi_fsub+0x334>)
    2812:	1a24      	subs	r4, r4, r0
    2814:	4013      	ands	r3, r2
    2816:	e76f      	b.n	26f8 <__aeabi_fsub+0x8c>
    2818:	2900      	cmp	r1, #0
    281a:	d16c      	bne.n	28f6 <__aeabi_fsub+0x28a>
    281c:	1c61      	adds	r1, r4, #1
    281e:	b2c8      	uxtb	r0, r1
    2820:	2801      	cmp	r0, #1
    2822:	dd4e      	ble.n	28c2 <__aeabi_fsub+0x256>
    2824:	29ff      	cmp	r1, #255	; 0xff
    2826:	d049      	beq.n	28bc <__aeabi_fsub+0x250>
    2828:	199b      	adds	r3, r3, r6
    282a:	085b      	lsrs	r3, r3, #1
    282c:	000c      	movs	r4, r1
    282e:	e763      	b.n	26f8 <__aeabi_fsub+0x8c>
    2830:	2aff      	cmp	r2, #255	; 0xff
    2832:	d041      	beq.n	28b8 <__aeabi_fsub+0x24c>
    2834:	000a      	movs	r2, r1
    2836:	e781      	b.n	273c <__aeabi_fsub+0xd0>
    2838:	2601      	movs	r6, #1
    283a:	1b9b      	subs	r3, r3, r6
    283c:	e789      	b.n	2752 <__aeabi_fsub+0xe6>
    283e:	2c00      	cmp	r4, #0
    2840:	d01c      	beq.n	287c <__aeabi_fsub+0x210>
    2842:	28ff      	cmp	r0, #255	; 0xff
    2844:	d021      	beq.n	288a <__aeabi_fsub+0x21e>
    2846:	2480      	movs	r4, #128	; 0x80
    2848:	04e4      	lsls	r4, r4, #19
    284a:	4252      	negs	r2, r2
    284c:	4323      	orrs	r3, r4
    284e:	2a1b      	cmp	r2, #27
    2850:	dd00      	ble.n	2854 <__aeabi_fsub+0x1e8>
    2852:	e096      	b.n	2982 <__aeabi_fsub+0x316>
    2854:	001c      	movs	r4, r3
    2856:	2520      	movs	r5, #32
    2858:	40d4      	lsrs	r4, r2
    285a:	1aaa      	subs	r2, r5, r2
    285c:	4093      	lsls	r3, r2
    285e:	1e5a      	subs	r2, r3, #1
    2860:	4193      	sbcs	r3, r2
    2862:	4323      	orrs	r3, r4
    2864:	1af3      	subs	r3, r6, r3
    2866:	0004      	movs	r4, r0
    2868:	000d      	movs	r5, r1
    286a:	e72d      	b.n	26c8 <__aeabi_fsub+0x5c>
    286c:	2f00      	cmp	r7, #0
    286e:	d000      	beq.n	2872 <__aeabi_fsub+0x206>
    2870:	e72e      	b.n	26d0 <__aeabi_fsub+0x64>
    2872:	2200      	movs	r2, #0
    2874:	2400      	movs	r4, #0
    2876:	e7a9      	b.n	27cc <__aeabi_fsub+0x160>
    2878:	000c      	movs	r4, r1
    287a:	e73d      	b.n	26f8 <__aeabi_fsub+0x8c>
    287c:	2b00      	cmp	r3, #0
    287e:	d058      	beq.n	2932 <__aeabi_fsub+0x2c6>
    2880:	43d2      	mvns	r2, r2
    2882:	2a00      	cmp	r2, #0
    2884:	d0ee      	beq.n	2864 <__aeabi_fsub+0x1f8>
    2886:	28ff      	cmp	r0, #255	; 0xff
    2888:	d1e1      	bne.n	284e <__aeabi_fsub+0x1e2>
    288a:	0033      	movs	r3, r6
    288c:	24ff      	movs	r4, #255	; 0xff
    288e:	000d      	movs	r5, r1
    2890:	e732      	b.n	26f8 <__aeabi_fsub+0x8c>
    2892:	29ff      	cmp	r1, #255	; 0xff
    2894:	d010      	beq.n	28b8 <__aeabi_fsub+0x24c>
    2896:	0001      	movs	r1, r0
    2898:	e778      	b.n	278c <__aeabi_fsub+0x120>
    289a:	2b00      	cmp	r3, #0
    289c:	d06e      	beq.n	297c <__aeabi_fsub+0x310>
    289e:	24ff      	movs	r4, #255	; 0xff
    28a0:	2e00      	cmp	r6, #0
    28a2:	d100      	bne.n	28a6 <__aeabi_fsub+0x23a>
    28a4:	e728      	b.n	26f8 <__aeabi_fsub+0x8c>
    28a6:	2280      	movs	r2, #128	; 0x80
    28a8:	4651      	mov	r1, sl
    28aa:	03d2      	lsls	r2, r2, #15
    28ac:	4211      	tst	r1, r2
    28ae:	d003      	beq.n	28b8 <__aeabi_fsub+0x24c>
    28b0:	4661      	mov	r1, ip
    28b2:	4211      	tst	r1, r2
    28b4:	d100      	bne.n	28b8 <__aeabi_fsub+0x24c>
    28b6:	0033      	movs	r3, r6
    28b8:	24ff      	movs	r4, #255	; 0xff
    28ba:	e71d      	b.n	26f8 <__aeabi_fsub+0x8c>
    28bc:	24ff      	movs	r4, #255	; 0xff
    28be:	2300      	movs	r3, #0
    28c0:	e72c      	b.n	271c <__aeabi_fsub+0xb0>
    28c2:	2c00      	cmp	r4, #0
    28c4:	d1e9      	bne.n	289a <__aeabi_fsub+0x22e>
    28c6:	2b00      	cmp	r3, #0
    28c8:	d063      	beq.n	2992 <__aeabi_fsub+0x326>
    28ca:	2e00      	cmp	r6, #0
    28cc:	d100      	bne.n	28d0 <__aeabi_fsub+0x264>
    28ce:	e713      	b.n	26f8 <__aeabi_fsub+0x8c>
    28d0:	199b      	adds	r3, r3, r6
    28d2:	015a      	lsls	r2, r3, #5
    28d4:	d400      	bmi.n	28d8 <__aeabi_fsub+0x26c>
    28d6:	e73e      	b.n	2756 <__aeabi_fsub+0xea>
    28d8:	4a31      	ldr	r2, [pc, #196]	; (29a0 <__aeabi_fsub+0x334>)
    28da:	000c      	movs	r4, r1
    28dc:	4013      	ands	r3, r2
    28de:	e70b      	b.n	26f8 <__aeabi_fsub+0x8c>
    28e0:	2c00      	cmp	r4, #0
    28e2:	d11e      	bne.n	2922 <__aeabi_fsub+0x2b6>
    28e4:	2b00      	cmp	r3, #0
    28e6:	d12f      	bne.n	2948 <__aeabi_fsub+0x2dc>
    28e8:	2e00      	cmp	r6, #0
    28ea:	d04f      	beq.n	298c <__aeabi_fsub+0x320>
    28ec:	0033      	movs	r3, r6
    28ee:	000d      	movs	r5, r1
    28f0:	e702      	b.n	26f8 <__aeabi_fsub+0x8c>
    28f2:	2601      	movs	r6, #1
    28f4:	e755      	b.n	27a2 <__aeabi_fsub+0x136>
    28f6:	2c00      	cmp	r4, #0
    28f8:	d11f      	bne.n	293a <__aeabi_fsub+0x2ce>
    28fa:	2b00      	cmp	r3, #0
    28fc:	d043      	beq.n	2986 <__aeabi_fsub+0x31a>
    28fe:	43c9      	mvns	r1, r1
    2900:	2900      	cmp	r1, #0
    2902:	d00b      	beq.n	291c <__aeabi_fsub+0x2b0>
    2904:	28ff      	cmp	r0, #255	; 0xff
    2906:	d039      	beq.n	297c <__aeabi_fsub+0x310>
    2908:	291b      	cmp	r1, #27
    290a:	dc44      	bgt.n	2996 <__aeabi_fsub+0x32a>
    290c:	001c      	movs	r4, r3
    290e:	2720      	movs	r7, #32
    2910:	40cc      	lsrs	r4, r1
    2912:	1a79      	subs	r1, r7, r1
    2914:	408b      	lsls	r3, r1
    2916:	1e59      	subs	r1, r3, #1
    2918:	418b      	sbcs	r3, r1
    291a:	4323      	orrs	r3, r4
    291c:	199b      	adds	r3, r3, r6
    291e:	0004      	movs	r4, r0
    2920:	e740      	b.n	27a4 <__aeabi_fsub+0x138>
    2922:	2b00      	cmp	r3, #0
    2924:	d11a      	bne.n	295c <__aeabi_fsub+0x2f0>
    2926:	2e00      	cmp	r6, #0
    2928:	d124      	bne.n	2974 <__aeabi_fsub+0x308>
    292a:	2780      	movs	r7, #128	; 0x80
    292c:	2200      	movs	r2, #0
    292e:	03ff      	lsls	r7, r7, #15
    2930:	e71b      	b.n	276a <__aeabi_fsub+0xfe>
    2932:	0033      	movs	r3, r6
    2934:	0004      	movs	r4, r0
    2936:	000d      	movs	r5, r1
    2938:	e6de      	b.n	26f8 <__aeabi_fsub+0x8c>
    293a:	28ff      	cmp	r0, #255	; 0xff
    293c:	d01e      	beq.n	297c <__aeabi_fsub+0x310>
    293e:	2480      	movs	r4, #128	; 0x80
    2940:	04e4      	lsls	r4, r4, #19
    2942:	4249      	negs	r1, r1
    2944:	4323      	orrs	r3, r4
    2946:	e7df      	b.n	2908 <__aeabi_fsub+0x29c>
    2948:	2e00      	cmp	r6, #0
    294a:	d100      	bne.n	294e <__aeabi_fsub+0x2e2>
    294c:	e6d4      	b.n	26f8 <__aeabi_fsub+0x8c>
    294e:	1b9f      	subs	r7, r3, r6
    2950:	017a      	lsls	r2, r7, #5
    2952:	d400      	bmi.n	2956 <__aeabi_fsub+0x2ea>
    2954:	e737      	b.n	27c6 <__aeabi_fsub+0x15a>
    2956:	1af3      	subs	r3, r6, r3
    2958:	000d      	movs	r5, r1
    295a:	e6cd      	b.n	26f8 <__aeabi_fsub+0x8c>
    295c:	24ff      	movs	r4, #255	; 0xff
    295e:	2e00      	cmp	r6, #0
    2960:	d100      	bne.n	2964 <__aeabi_fsub+0x2f8>
    2962:	e6c9      	b.n	26f8 <__aeabi_fsub+0x8c>
    2964:	2280      	movs	r2, #128	; 0x80
    2966:	4650      	mov	r0, sl
    2968:	03d2      	lsls	r2, r2, #15
    296a:	4210      	tst	r0, r2
    296c:	d0a4      	beq.n	28b8 <__aeabi_fsub+0x24c>
    296e:	4660      	mov	r0, ip
    2970:	4210      	tst	r0, r2
    2972:	d1a1      	bne.n	28b8 <__aeabi_fsub+0x24c>
    2974:	0033      	movs	r3, r6
    2976:	000d      	movs	r5, r1
    2978:	24ff      	movs	r4, #255	; 0xff
    297a:	e6bd      	b.n	26f8 <__aeabi_fsub+0x8c>
    297c:	0033      	movs	r3, r6
    297e:	24ff      	movs	r4, #255	; 0xff
    2980:	e6ba      	b.n	26f8 <__aeabi_fsub+0x8c>
    2982:	2301      	movs	r3, #1
    2984:	e76e      	b.n	2864 <__aeabi_fsub+0x1f8>
    2986:	0033      	movs	r3, r6
    2988:	0004      	movs	r4, r0
    298a:	e6b5      	b.n	26f8 <__aeabi_fsub+0x8c>
    298c:	2700      	movs	r7, #0
    298e:	2200      	movs	r2, #0
    2990:	e71c      	b.n	27cc <__aeabi_fsub+0x160>
    2992:	0033      	movs	r3, r6
    2994:	e6b0      	b.n	26f8 <__aeabi_fsub+0x8c>
    2996:	2301      	movs	r3, #1
    2998:	e7c0      	b.n	291c <__aeabi_fsub+0x2b0>
    299a:	46c0      	nop			; (mov r8, r8)
    299c:	7dffffff 	.word	0x7dffffff
    29a0:	fbffffff 	.word	0xfbffffff

000029a4 <__aeabi_f2iz>:
    29a4:	0241      	lsls	r1, r0, #9
    29a6:	0043      	lsls	r3, r0, #1
    29a8:	0fc2      	lsrs	r2, r0, #31
    29aa:	0a49      	lsrs	r1, r1, #9
    29ac:	0e1b      	lsrs	r3, r3, #24
    29ae:	2000      	movs	r0, #0
    29b0:	2b7e      	cmp	r3, #126	; 0x7e
    29b2:	dd0d      	ble.n	29d0 <__aeabi_f2iz+0x2c>
    29b4:	2b9d      	cmp	r3, #157	; 0x9d
    29b6:	dc0c      	bgt.n	29d2 <__aeabi_f2iz+0x2e>
    29b8:	2080      	movs	r0, #128	; 0x80
    29ba:	0400      	lsls	r0, r0, #16
    29bc:	4301      	orrs	r1, r0
    29be:	2b95      	cmp	r3, #149	; 0x95
    29c0:	dc0a      	bgt.n	29d8 <__aeabi_f2iz+0x34>
    29c2:	2096      	movs	r0, #150	; 0x96
    29c4:	1ac3      	subs	r3, r0, r3
    29c6:	40d9      	lsrs	r1, r3
    29c8:	4248      	negs	r0, r1
    29ca:	2a00      	cmp	r2, #0
    29cc:	d100      	bne.n	29d0 <__aeabi_f2iz+0x2c>
    29ce:	0008      	movs	r0, r1
    29d0:	4770      	bx	lr
    29d2:	4b03      	ldr	r3, [pc, #12]	; (29e0 <__aeabi_f2iz+0x3c>)
    29d4:	18d0      	adds	r0, r2, r3
    29d6:	e7fb      	b.n	29d0 <__aeabi_f2iz+0x2c>
    29d8:	3b96      	subs	r3, #150	; 0x96
    29da:	4099      	lsls	r1, r3
    29dc:	e7f4      	b.n	29c8 <__aeabi_f2iz+0x24>
    29de:	46c0      	nop			; (mov r8, r8)
    29e0:	7fffffff 	.word	0x7fffffff

000029e4 <__aeabi_i2f>:
    29e4:	b570      	push	{r4, r5, r6, lr}
    29e6:	2800      	cmp	r0, #0
    29e8:	d030      	beq.n	2a4c <__aeabi_i2f+0x68>
    29ea:	17c3      	asrs	r3, r0, #31
    29ec:	18c4      	adds	r4, r0, r3
    29ee:	405c      	eors	r4, r3
    29f0:	0fc5      	lsrs	r5, r0, #31
    29f2:	0020      	movs	r0, r4
    29f4:	f000 f8d2 	bl	2b9c <__clzsi2>
    29f8:	239e      	movs	r3, #158	; 0x9e
    29fa:	1a1b      	subs	r3, r3, r0
    29fc:	2b96      	cmp	r3, #150	; 0x96
    29fe:	dc0d      	bgt.n	2a1c <__aeabi_i2f+0x38>
    2a00:	2296      	movs	r2, #150	; 0x96
    2a02:	1ad2      	subs	r2, r2, r3
    2a04:	4094      	lsls	r4, r2
    2a06:	002a      	movs	r2, r5
    2a08:	0264      	lsls	r4, r4, #9
    2a0a:	0a64      	lsrs	r4, r4, #9
    2a0c:	b2db      	uxtb	r3, r3
    2a0e:	0264      	lsls	r4, r4, #9
    2a10:	05db      	lsls	r3, r3, #23
    2a12:	0a60      	lsrs	r0, r4, #9
    2a14:	07d2      	lsls	r2, r2, #31
    2a16:	4318      	orrs	r0, r3
    2a18:	4310      	orrs	r0, r2
    2a1a:	bd70      	pop	{r4, r5, r6, pc}
    2a1c:	2b99      	cmp	r3, #153	; 0x99
    2a1e:	dc19      	bgt.n	2a54 <__aeabi_i2f+0x70>
    2a20:	2299      	movs	r2, #153	; 0x99
    2a22:	1ad2      	subs	r2, r2, r3
    2a24:	2a00      	cmp	r2, #0
    2a26:	dd29      	ble.n	2a7c <__aeabi_i2f+0x98>
    2a28:	4094      	lsls	r4, r2
    2a2a:	0022      	movs	r2, r4
    2a2c:	4c14      	ldr	r4, [pc, #80]	; (2a80 <__aeabi_i2f+0x9c>)
    2a2e:	4014      	ands	r4, r2
    2a30:	0751      	lsls	r1, r2, #29
    2a32:	d004      	beq.n	2a3e <__aeabi_i2f+0x5a>
    2a34:	210f      	movs	r1, #15
    2a36:	400a      	ands	r2, r1
    2a38:	2a04      	cmp	r2, #4
    2a3a:	d000      	beq.n	2a3e <__aeabi_i2f+0x5a>
    2a3c:	3404      	adds	r4, #4
    2a3e:	0162      	lsls	r2, r4, #5
    2a40:	d413      	bmi.n	2a6a <__aeabi_i2f+0x86>
    2a42:	01a4      	lsls	r4, r4, #6
    2a44:	0a64      	lsrs	r4, r4, #9
    2a46:	b2db      	uxtb	r3, r3
    2a48:	002a      	movs	r2, r5
    2a4a:	e7e0      	b.n	2a0e <__aeabi_i2f+0x2a>
    2a4c:	2200      	movs	r2, #0
    2a4e:	2300      	movs	r3, #0
    2a50:	2400      	movs	r4, #0
    2a52:	e7dc      	b.n	2a0e <__aeabi_i2f+0x2a>
    2a54:	2205      	movs	r2, #5
    2a56:	0021      	movs	r1, r4
    2a58:	1a12      	subs	r2, r2, r0
    2a5a:	40d1      	lsrs	r1, r2
    2a5c:	22b9      	movs	r2, #185	; 0xb9
    2a5e:	1ad2      	subs	r2, r2, r3
    2a60:	4094      	lsls	r4, r2
    2a62:	1e62      	subs	r2, r4, #1
    2a64:	4194      	sbcs	r4, r2
    2a66:	430c      	orrs	r4, r1
    2a68:	e7da      	b.n	2a20 <__aeabi_i2f+0x3c>
    2a6a:	4b05      	ldr	r3, [pc, #20]	; (2a80 <__aeabi_i2f+0x9c>)
    2a6c:	002a      	movs	r2, r5
    2a6e:	401c      	ands	r4, r3
    2a70:	239f      	movs	r3, #159	; 0x9f
    2a72:	01a4      	lsls	r4, r4, #6
    2a74:	1a1b      	subs	r3, r3, r0
    2a76:	0a64      	lsrs	r4, r4, #9
    2a78:	b2db      	uxtb	r3, r3
    2a7a:	e7c8      	b.n	2a0e <__aeabi_i2f+0x2a>
    2a7c:	0022      	movs	r2, r4
    2a7e:	e7d5      	b.n	2a2c <__aeabi_i2f+0x48>
    2a80:	fbffffff 	.word	0xfbffffff

00002a84 <__aeabi_f2d>:
    2a84:	0041      	lsls	r1, r0, #1
    2a86:	0e09      	lsrs	r1, r1, #24
    2a88:	1c4b      	adds	r3, r1, #1
    2a8a:	b570      	push	{r4, r5, r6, lr}
    2a8c:	b2db      	uxtb	r3, r3
    2a8e:	0246      	lsls	r6, r0, #9
    2a90:	0a75      	lsrs	r5, r6, #9
    2a92:	0fc4      	lsrs	r4, r0, #31
    2a94:	2b01      	cmp	r3, #1
    2a96:	dd14      	ble.n	2ac2 <__aeabi_f2d+0x3e>
    2a98:	23e0      	movs	r3, #224	; 0xe0
    2a9a:	009b      	lsls	r3, r3, #2
    2a9c:	076d      	lsls	r5, r5, #29
    2a9e:	0b36      	lsrs	r6, r6, #12
    2aa0:	18cb      	adds	r3, r1, r3
    2aa2:	2100      	movs	r1, #0
    2aa4:	0d0a      	lsrs	r2, r1, #20
    2aa6:	0028      	movs	r0, r5
    2aa8:	0512      	lsls	r2, r2, #20
    2aaa:	4d1c      	ldr	r5, [pc, #112]	; (2b1c <__aeabi_f2d+0x98>)
    2aac:	4332      	orrs	r2, r6
    2aae:	055b      	lsls	r3, r3, #21
    2ab0:	402a      	ands	r2, r5
    2ab2:	085b      	lsrs	r3, r3, #1
    2ab4:	4313      	orrs	r3, r2
    2ab6:	005b      	lsls	r3, r3, #1
    2ab8:	07e4      	lsls	r4, r4, #31
    2aba:	085b      	lsrs	r3, r3, #1
    2abc:	4323      	orrs	r3, r4
    2abe:	0019      	movs	r1, r3
    2ac0:	bd70      	pop	{r4, r5, r6, pc}
    2ac2:	2900      	cmp	r1, #0
    2ac4:	d114      	bne.n	2af0 <__aeabi_f2d+0x6c>
    2ac6:	2d00      	cmp	r5, #0
    2ac8:	d01e      	beq.n	2b08 <__aeabi_f2d+0x84>
    2aca:	0028      	movs	r0, r5
    2acc:	f000 f866 	bl	2b9c <__clzsi2>
    2ad0:	280a      	cmp	r0, #10
    2ad2:	dc1c      	bgt.n	2b0e <__aeabi_f2d+0x8a>
    2ad4:	230b      	movs	r3, #11
    2ad6:	002a      	movs	r2, r5
    2ad8:	1a1b      	subs	r3, r3, r0
    2ada:	40da      	lsrs	r2, r3
    2adc:	0003      	movs	r3, r0
    2ade:	3315      	adds	r3, #21
    2ae0:	409d      	lsls	r5, r3
    2ae2:	4b0f      	ldr	r3, [pc, #60]	; (2b20 <__aeabi_f2d+0x9c>)
    2ae4:	0312      	lsls	r2, r2, #12
    2ae6:	1a1b      	subs	r3, r3, r0
    2ae8:	055b      	lsls	r3, r3, #21
    2aea:	0b16      	lsrs	r6, r2, #12
    2aec:	0d5b      	lsrs	r3, r3, #21
    2aee:	e7d8      	b.n	2aa2 <__aeabi_f2d+0x1e>
    2af0:	2d00      	cmp	r5, #0
    2af2:	d006      	beq.n	2b02 <__aeabi_f2d+0x7e>
    2af4:	0b32      	lsrs	r2, r6, #12
    2af6:	2680      	movs	r6, #128	; 0x80
    2af8:	0336      	lsls	r6, r6, #12
    2afa:	076d      	lsls	r5, r5, #29
    2afc:	4316      	orrs	r6, r2
    2afe:	4b09      	ldr	r3, [pc, #36]	; (2b24 <__aeabi_f2d+0xa0>)
    2b00:	e7cf      	b.n	2aa2 <__aeabi_f2d+0x1e>
    2b02:	4b08      	ldr	r3, [pc, #32]	; (2b24 <__aeabi_f2d+0xa0>)
    2b04:	2600      	movs	r6, #0
    2b06:	e7cc      	b.n	2aa2 <__aeabi_f2d+0x1e>
    2b08:	2300      	movs	r3, #0
    2b0a:	2600      	movs	r6, #0
    2b0c:	e7c9      	b.n	2aa2 <__aeabi_f2d+0x1e>
    2b0e:	0003      	movs	r3, r0
    2b10:	002a      	movs	r2, r5
    2b12:	3b0b      	subs	r3, #11
    2b14:	409a      	lsls	r2, r3
    2b16:	2500      	movs	r5, #0
    2b18:	e7e3      	b.n	2ae2 <__aeabi_f2d+0x5e>
    2b1a:	46c0      	nop			; (mov r8, r8)
    2b1c:	800fffff 	.word	0x800fffff
    2b20:	00000389 	.word	0x00000389
    2b24:	000007ff 	.word	0x000007ff

00002b28 <__aeabi_cfrcmple>:
    2b28:	4684      	mov	ip, r0
    2b2a:	1c08      	adds	r0, r1, #0
    2b2c:	4661      	mov	r1, ip
    2b2e:	e7ff      	b.n	2b30 <__aeabi_cfcmpeq>

00002b30 <__aeabi_cfcmpeq>:
    2b30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    2b32:	f000 f8d7 	bl	2ce4 <__lesf2>
    2b36:	2800      	cmp	r0, #0
    2b38:	d401      	bmi.n	2b3e <__aeabi_cfcmpeq+0xe>
    2b3a:	2100      	movs	r1, #0
    2b3c:	42c8      	cmn	r0, r1
    2b3e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

00002b40 <__aeabi_fcmpeq>:
    2b40:	b510      	push	{r4, lr}
    2b42:	f000 f869 	bl	2c18 <__eqsf2>
    2b46:	4240      	negs	r0, r0
    2b48:	3001      	adds	r0, #1
    2b4a:	bd10      	pop	{r4, pc}

00002b4c <__aeabi_fcmplt>:
    2b4c:	b510      	push	{r4, lr}
    2b4e:	f000 f8c9 	bl	2ce4 <__lesf2>
    2b52:	2800      	cmp	r0, #0
    2b54:	db01      	blt.n	2b5a <__aeabi_fcmplt+0xe>
    2b56:	2000      	movs	r0, #0
    2b58:	bd10      	pop	{r4, pc}
    2b5a:	2001      	movs	r0, #1
    2b5c:	bd10      	pop	{r4, pc}
    2b5e:	46c0      	nop			; (mov r8, r8)

00002b60 <__aeabi_fcmple>:
    2b60:	b510      	push	{r4, lr}
    2b62:	f000 f8bf 	bl	2ce4 <__lesf2>
    2b66:	2800      	cmp	r0, #0
    2b68:	dd01      	ble.n	2b6e <__aeabi_fcmple+0xe>
    2b6a:	2000      	movs	r0, #0
    2b6c:	bd10      	pop	{r4, pc}
    2b6e:	2001      	movs	r0, #1
    2b70:	bd10      	pop	{r4, pc}
    2b72:	46c0      	nop			; (mov r8, r8)

00002b74 <__aeabi_fcmpgt>:
    2b74:	b510      	push	{r4, lr}
    2b76:	f000 f875 	bl	2c64 <__gesf2>
    2b7a:	2800      	cmp	r0, #0
    2b7c:	dc01      	bgt.n	2b82 <__aeabi_fcmpgt+0xe>
    2b7e:	2000      	movs	r0, #0
    2b80:	bd10      	pop	{r4, pc}
    2b82:	2001      	movs	r0, #1
    2b84:	bd10      	pop	{r4, pc}
    2b86:	46c0      	nop			; (mov r8, r8)

00002b88 <__aeabi_fcmpge>:
    2b88:	b510      	push	{r4, lr}
    2b8a:	f000 f86b 	bl	2c64 <__gesf2>
    2b8e:	2800      	cmp	r0, #0
    2b90:	da01      	bge.n	2b96 <__aeabi_fcmpge+0xe>
    2b92:	2000      	movs	r0, #0
    2b94:	bd10      	pop	{r4, pc}
    2b96:	2001      	movs	r0, #1
    2b98:	bd10      	pop	{r4, pc}
    2b9a:	46c0      	nop			; (mov r8, r8)

00002b9c <__clzsi2>:
    2b9c:	211c      	movs	r1, #28
    2b9e:	2301      	movs	r3, #1
    2ba0:	041b      	lsls	r3, r3, #16
    2ba2:	4298      	cmp	r0, r3
    2ba4:	d301      	bcc.n	2baa <__clzsi2+0xe>
    2ba6:	0c00      	lsrs	r0, r0, #16
    2ba8:	3910      	subs	r1, #16
    2baa:	0a1b      	lsrs	r3, r3, #8
    2bac:	4298      	cmp	r0, r3
    2bae:	d301      	bcc.n	2bb4 <__clzsi2+0x18>
    2bb0:	0a00      	lsrs	r0, r0, #8
    2bb2:	3908      	subs	r1, #8
    2bb4:	091b      	lsrs	r3, r3, #4
    2bb6:	4298      	cmp	r0, r3
    2bb8:	d301      	bcc.n	2bbe <__clzsi2+0x22>
    2bba:	0900      	lsrs	r0, r0, #4
    2bbc:	3904      	subs	r1, #4
    2bbe:	a202      	add	r2, pc, #8	; (adr r2, 2bc8 <__clzsi2+0x2c>)
    2bc0:	5c10      	ldrb	r0, [r2, r0]
    2bc2:	1840      	adds	r0, r0, r1
    2bc4:	4770      	bx	lr
    2bc6:	46c0      	nop			; (mov r8, r8)
    2bc8:	02020304 	.word	0x02020304
    2bcc:	01010101 	.word	0x01010101
	...

00002bd8 <__ctzsi2>:
    2bd8:	4241      	negs	r1, r0
    2bda:	4008      	ands	r0, r1
    2bdc:	211c      	movs	r1, #28
    2bde:	2301      	movs	r3, #1
    2be0:	041b      	lsls	r3, r3, #16
    2be2:	4298      	cmp	r0, r3
    2be4:	d301      	bcc.n	2bea <__ctzsi2+0x12>
    2be6:	0c00      	lsrs	r0, r0, #16
    2be8:	3910      	subs	r1, #16
    2bea:	0a1b      	lsrs	r3, r3, #8
    2bec:	4298      	cmp	r0, r3
    2bee:	d301      	bcc.n	2bf4 <__ctzsi2+0x1c>
    2bf0:	0a00      	lsrs	r0, r0, #8
    2bf2:	3908      	subs	r1, #8
    2bf4:	091b      	lsrs	r3, r3, #4
    2bf6:	4298      	cmp	r0, r3
    2bf8:	d301      	bcc.n	2bfe <__ctzsi2+0x26>
    2bfa:	0900      	lsrs	r0, r0, #4
    2bfc:	3904      	subs	r1, #4
    2bfe:	a202      	add	r2, pc, #8	; (adr r2, 2c08 <__ctzsi2+0x30>)
    2c00:	5c10      	ldrb	r0, [r2, r0]
    2c02:	1a40      	subs	r0, r0, r1
    2c04:	4770      	bx	lr
    2c06:	46c0      	nop			; (mov r8, r8)
    2c08:	1d1d1c1b 	.word	0x1d1d1c1b
    2c0c:	1e1e1e1e 	.word	0x1e1e1e1e
    2c10:	1f1f1f1f 	.word	0x1f1f1f1f
    2c14:	1f1f1f1f 	.word	0x1f1f1f1f

00002c18 <__eqsf2>:
    2c18:	b570      	push	{r4, r5, r6, lr}
    2c1a:	0042      	lsls	r2, r0, #1
    2c1c:	0245      	lsls	r5, r0, #9
    2c1e:	024e      	lsls	r6, r1, #9
    2c20:	004c      	lsls	r4, r1, #1
    2c22:	0fc3      	lsrs	r3, r0, #31
    2c24:	0a6d      	lsrs	r5, r5, #9
    2c26:	0e12      	lsrs	r2, r2, #24
    2c28:	0a76      	lsrs	r6, r6, #9
    2c2a:	0e24      	lsrs	r4, r4, #24
    2c2c:	0fc9      	lsrs	r1, r1, #31
    2c2e:	2001      	movs	r0, #1
    2c30:	2aff      	cmp	r2, #255	; 0xff
    2c32:	d006      	beq.n	2c42 <__eqsf2+0x2a>
    2c34:	2cff      	cmp	r4, #255	; 0xff
    2c36:	d003      	beq.n	2c40 <__eqsf2+0x28>
    2c38:	42a2      	cmp	r2, r4
    2c3a:	d101      	bne.n	2c40 <__eqsf2+0x28>
    2c3c:	42b5      	cmp	r5, r6
    2c3e:	d006      	beq.n	2c4e <__eqsf2+0x36>
    2c40:	bd70      	pop	{r4, r5, r6, pc}
    2c42:	2d00      	cmp	r5, #0
    2c44:	d1fc      	bne.n	2c40 <__eqsf2+0x28>
    2c46:	2cff      	cmp	r4, #255	; 0xff
    2c48:	d1fa      	bne.n	2c40 <__eqsf2+0x28>
    2c4a:	2e00      	cmp	r6, #0
    2c4c:	d1f8      	bne.n	2c40 <__eqsf2+0x28>
    2c4e:	428b      	cmp	r3, r1
    2c50:	d006      	beq.n	2c60 <__eqsf2+0x48>
    2c52:	2001      	movs	r0, #1
    2c54:	2a00      	cmp	r2, #0
    2c56:	d1f3      	bne.n	2c40 <__eqsf2+0x28>
    2c58:	0028      	movs	r0, r5
    2c5a:	1e45      	subs	r5, r0, #1
    2c5c:	41a8      	sbcs	r0, r5
    2c5e:	e7ef      	b.n	2c40 <__eqsf2+0x28>
    2c60:	2000      	movs	r0, #0
    2c62:	e7ed      	b.n	2c40 <__eqsf2+0x28>

00002c64 <__gesf2>:
    2c64:	b5f0      	push	{r4, r5, r6, r7, lr}
    2c66:	0042      	lsls	r2, r0, #1
    2c68:	0245      	lsls	r5, r0, #9
    2c6a:	024c      	lsls	r4, r1, #9
    2c6c:	0fc3      	lsrs	r3, r0, #31
    2c6e:	0048      	lsls	r0, r1, #1
    2c70:	0a6d      	lsrs	r5, r5, #9
    2c72:	0e12      	lsrs	r2, r2, #24
    2c74:	0a64      	lsrs	r4, r4, #9
    2c76:	0e00      	lsrs	r0, r0, #24
    2c78:	0fc9      	lsrs	r1, r1, #31
    2c7a:	2aff      	cmp	r2, #255	; 0xff
    2c7c:	d01e      	beq.n	2cbc <__gesf2+0x58>
    2c7e:	28ff      	cmp	r0, #255	; 0xff
    2c80:	d021      	beq.n	2cc6 <__gesf2+0x62>
    2c82:	2a00      	cmp	r2, #0
    2c84:	d10a      	bne.n	2c9c <__gesf2+0x38>
    2c86:	426e      	negs	r6, r5
    2c88:	416e      	adcs	r6, r5
    2c8a:	b2f6      	uxtb	r6, r6
    2c8c:	2800      	cmp	r0, #0
    2c8e:	d10f      	bne.n	2cb0 <__gesf2+0x4c>
    2c90:	2c00      	cmp	r4, #0
    2c92:	d10d      	bne.n	2cb0 <__gesf2+0x4c>
    2c94:	2000      	movs	r0, #0
    2c96:	2d00      	cmp	r5, #0
    2c98:	d009      	beq.n	2cae <__gesf2+0x4a>
    2c9a:	e005      	b.n	2ca8 <__gesf2+0x44>
    2c9c:	2800      	cmp	r0, #0
    2c9e:	d101      	bne.n	2ca4 <__gesf2+0x40>
    2ca0:	2c00      	cmp	r4, #0
    2ca2:	d001      	beq.n	2ca8 <__gesf2+0x44>
    2ca4:	428b      	cmp	r3, r1
    2ca6:	d011      	beq.n	2ccc <__gesf2+0x68>
    2ca8:	2101      	movs	r1, #1
    2caa:	4258      	negs	r0, r3
    2cac:	4308      	orrs	r0, r1
    2cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2cb0:	2e00      	cmp	r6, #0
    2cb2:	d0f7      	beq.n	2ca4 <__gesf2+0x40>
    2cb4:	2001      	movs	r0, #1
    2cb6:	3901      	subs	r1, #1
    2cb8:	4308      	orrs	r0, r1
    2cba:	e7f8      	b.n	2cae <__gesf2+0x4a>
    2cbc:	2d00      	cmp	r5, #0
    2cbe:	d0de      	beq.n	2c7e <__gesf2+0x1a>
    2cc0:	2002      	movs	r0, #2
    2cc2:	4240      	negs	r0, r0
    2cc4:	e7f3      	b.n	2cae <__gesf2+0x4a>
    2cc6:	2c00      	cmp	r4, #0
    2cc8:	d0db      	beq.n	2c82 <__gesf2+0x1e>
    2cca:	e7f9      	b.n	2cc0 <__gesf2+0x5c>
    2ccc:	4282      	cmp	r2, r0
    2cce:	dceb      	bgt.n	2ca8 <__gesf2+0x44>
    2cd0:	db04      	blt.n	2cdc <__gesf2+0x78>
    2cd2:	42a5      	cmp	r5, r4
    2cd4:	d8e8      	bhi.n	2ca8 <__gesf2+0x44>
    2cd6:	2000      	movs	r0, #0
    2cd8:	42a5      	cmp	r5, r4
    2cda:	d2e8      	bcs.n	2cae <__gesf2+0x4a>
    2cdc:	2101      	movs	r1, #1
    2cde:	1e58      	subs	r0, r3, #1
    2ce0:	4308      	orrs	r0, r1
    2ce2:	e7e4      	b.n	2cae <__gesf2+0x4a>

00002ce4 <__lesf2>:
    2ce4:	b5f0      	push	{r4, r5, r6, r7, lr}
    2ce6:	0042      	lsls	r2, r0, #1
    2ce8:	024d      	lsls	r5, r1, #9
    2cea:	004c      	lsls	r4, r1, #1
    2cec:	0246      	lsls	r6, r0, #9
    2cee:	0a76      	lsrs	r6, r6, #9
    2cf0:	0e12      	lsrs	r2, r2, #24
    2cf2:	0fc3      	lsrs	r3, r0, #31
    2cf4:	0a6d      	lsrs	r5, r5, #9
    2cf6:	0e24      	lsrs	r4, r4, #24
    2cf8:	0fc9      	lsrs	r1, r1, #31
    2cfa:	2aff      	cmp	r2, #255	; 0xff
    2cfc:	d016      	beq.n	2d2c <__lesf2+0x48>
    2cfe:	2cff      	cmp	r4, #255	; 0xff
    2d00:	d018      	beq.n	2d34 <__lesf2+0x50>
    2d02:	2a00      	cmp	r2, #0
    2d04:	d10a      	bne.n	2d1c <__lesf2+0x38>
    2d06:	4270      	negs	r0, r6
    2d08:	4170      	adcs	r0, r6
    2d0a:	b2c0      	uxtb	r0, r0
    2d0c:	2c00      	cmp	r4, #0
    2d0e:	d015      	beq.n	2d3c <__lesf2+0x58>
    2d10:	2800      	cmp	r0, #0
    2d12:	d005      	beq.n	2d20 <__lesf2+0x3c>
    2d14:	2001      	movs	r0, #1
    2d16:	3901      	subs	r1, #1
    2d18:	4308      	orrs	r0, r1
    2d1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2d1c:	2c00      	cmp	r4, #0
    2d1e:	d013      	beq.n	2d48 <__lesf2+0x64>
    2d20:	4299      	cmp	r1, r3
    2d22:	d014      	beq.n	2d4e <__lesf2+0x6a>
    2d24:	2001      	movs	r0, #1
    2d26:	425b      	negs	r3, r3
    2d28:	4318      	orrs	r0, r3
    2d2a:	e7f6      	b.n	2d1a <__lesf2+0x36>
    2d2c:	2002      	movs	r0, #2
    2d2e:	2e00      	cmp	r6, #0
    2d30:	d1f3      	bne.n	2d1a <__lesf2+0x36>
    2d32:	e7e4      	b.n	2cfe <__lesf2+0x1a>
    2d34:	2002      	movs	r0, #2
    2d36:	2d00      	cmp	r5, #0
    2d38:	d1ef      	bne.n	2d1a <__lesf2+0x36>
    2d3a:	e7e2      	b.n	2d02 <__lesf2+0x1e>
    2d3c:	2d00      	cmp	r5, #0
    2d3e:	d1e7      	bne.n	2d10 <__lesf2+0x2c>
    2d40:	2000      	movs	r0, #0
    2d42:	2e00      	cmp	r6, #0
    2d44:	d0e9      	beq.n	2d1a <__lesf2+0x36>
    2d46:	e7ed      	b.n	2d24 <__lesf2+0x40>
    2d48:	2d00      	cmp	r5, #0
    2d4a:	d1e9      	bne.n	2d20 <__lesf2+0x3c>
    2d4c:	e7ea      	b.n	2d24 <__lesf2+0x40>
    2d4e:	42a2      	cmp	r2, r4
    2d50:	dc06      	bgt.n	2d60 <__lesf2+0x7c>
    2d52:	dbdf      	blt.n	2d14 <__lesf2+0x30>
    2d54:	42ae      	cmp	r6, r5
    2d56:	d803      	bhi.n	2d60 <__lesf2+0x7c>
    2d58:	2000      	movs	r0, #0
    2d5a:	42ae      	cmp	r6, r5
    2d5c:	d3da      	bcc.n	2d14 <__lesf2+0x30>
    2d5e:	e7dc      	b.n	2d1a <__lesf2+0x36>
    2d60:	2001      	movs	r0, #1
    2d62:	4249      	negs	r1, r1
    2d64:	4308      	orrs	r0, r1
    2d66:	e7d8      	b.n	2d1a <__lesf2+0x36>

00002d68 <__libc_init_array>:
    2d68:	b570      	push	{r4, r5, r6, lr}
    2d6a:	2600      	movs	r6, #0
    2d6c:	4d0c      	ldr	r5, [pc, #48]	; (2da0 <__libc_init_array+0x38>)
    2d6e:	4c0d      	ldr	r4, [pc, #52]	; (2da4 <__libc_init_array+0x3c>)
    2d70:	1b64      	subs	r4, r4, r5
    2d72:	10a4      	asrs	r4, r4, #2
    2d74:	42a6      	cmp	r6, r4
    2d76:	d109      	bne.n	2d8c <__libc_init_array+0x24>
    2d78:	2600      	movs	r6, #0
    2d7a:	f001 f815 	bl	3da8 <_init>
    2d7e:	4d0a      	ldr	r5, [pc, #40]	; (2da8 <__libc_init_array+0x40>)
    2d80:	4c0a      	ldr	r4, [pc, #40]	; (2dac <__libc_init_array+0x44>)
    2d82:	1b64      	subs	r4, r4, r5
    2d84:	10a4      	asrs	r4, r4, #2
    2d86:	42a6      	cmp	r6, r4
    2d88:	d105      	bne.n	2d96 <__libc_init_array+0x2e>
    2d8a:	bd70      	pop	{r4, r5, r6, pc}
    2d8c:	00b3      	lsls	r3, r6, #2
    2d8e:	58eb      	ldr	r3, [r5, r3]
    2d90:	4798      	blx	r3
    2d92:	3601      	adds	r6, #1
    2d94:	e7ee      	b.n	2d74 <__libc_init_array+0xc>
    2d96:	00b3      	lsls	r3, r6, #2
    2d98:	58eb      	ldr	r3, [r5, r3]
    2d9a:	4798      	blx	r3
    2d9c:	3601      	adds	r6, #1
    2d9e:	e7f2      	b.n	2d86 <__libc_init_array+0x1e>
    2da0:	00003db4 	.word	0x00003db4
    2da4:	00003db4 	.word	0x00003db4
    2da8:	00003db4 	.word	0x00003db4
    2dac:	00003db8 	.word	0x00003db8

00002db0 <memset>:
    2db0:	0003      	movs	r3, r0
    2db2:	1882      	adds	r2, r0, r2
    2db4:	4293      	cmp	r3, r2
    2db6:	d100      	bne.n	2dba <memset+0xa>
    2db8:	4770      	bx	lr
    2dba:	7019      	strb	r1, [r3, #0]
    2dbc:	3301      	adds	r3, #1
    2dbe:	e7f9      	b.n	2db4 <memset+0x4>

00002dc0 <strlen>:
    2dc0:	2300      	movs	r3, #0
    2dc2:	5cc2      	ldrb	r2, [r0, r3]
    2dc4:	3301      	adds	r3, #1
    2dc6:	2a00      	cmp	r2, #0
    2dc8:	d1fb      	bne.n	2dc2 <strlen+0x2>
    2dca:	1e58      	subs	r0, r3, #1
    2dcc:	4770      	bx	lr

00002dce <strncpy>:
    2dce:	b570      	push	{r4, r5, r6, lr}
    2dd0:	0004      	movs	r4, r0
    2dd2:	2a00      	cmp	r2, #0
    2dd4:	d100      	bne.n	2dd8 <strncpy+0xa>
    2dd6:	bd70      	pop	{r4, r5, r6, pc}
    2dd8:	780d      	ldrb	r5, [r1, #0]
    2dda:	1e56      	subs	r6, r2, #1
    2ddc:	1c63      	adds	r3, r4, #1
    2dde:	7025      	strb	r5, [r4, #0]
    2de0:	3101      	adds	r1, #1
    2de2:	2d00      	cmp	r5, #0
    2de4:	d105      	bne.n	2df2 <strncpy+0x24>
    2de6:	18a4      	adds	r4, r4, r2
    2de8:	429c      	cmp	r4, r3
    2dea:	d0f4      	beq.n	2dd6 <strncpy+0x8>
    2dec:	701d      	strb	r5, [r3, #0]
    2dee:	3301      	adds	r3, #1
    2df0:	e7fa      	b.n	2de8 <strncpy+0x1a>
    2df2:	001c      	movs	r4, r3
    2df4:	0032      	movs	r2, r6
    2df6:	e7ec      	b.n	2dd2 <strncpy+0x4>

00002df8 <_vsniprintf_r>:
    2df8:	b530      	push	{r4, r5, lr}
    2dfa:	0014      	movs	r4, r2
    2dfc:	b09b      	sub	sp, #108	; 0x6c
    2dfe:	0005      	movs	r5, r0
    2e00:	001a      	movs	r2, r3
    2e02:	2c00      	cmp	r4, #0
    2e04:	da05      	bge.n	2e12 <_vsniprintf_r+0x1a>
    2e06:	238b      	movs	r3, #139	; 0x8b
    2e08:	6003      	str	r3, [r0, #0]
    2e0a:	2001      	movs	r0, #1
    2e0c:	4240      	negs	r0, r0
    2e0e:	b01b      	add	sp, #108	; 0x6c
    2e10:	bd30      	pop	{r4, r5, pc}
    2e12:	2382      	movs	r3, #130	; 0x82
    2e14:	4668      	mov	r0, sp
    2e16:	009b      	lsls	r3, r3, #2
    2e18:	8183      	strh	r3, [r0, #12]
    2e1a:	2300      	movs	r3, #0
    2e1c:	9100      	str	r1, [sp, #0]
    2e1e:	9104      	str	r1, [sp, #16]
    2e20:	429c      	cmp	r4, r3
    2e22:	d000      	beq.n	2e26 <_vsniprintf_r+0x2e>
    2e24:	1e63      	subs	r3, r4, #1
    2e26:	9302      	str	r3, [sp, #8]
    2e28:	9305      	str	r3, [sp, #20]
    2e2a:	2301      	movs	r3, #1
    2e2c:	4669      	mov	r1, sp
    2e2e:	425b      	negs	r3, r3
    2e30:	81cb      	strh	r3, [r1, #14]
    2e32:	0028      	movs	r0, r5
    2e34:	9b1e      	ldr	r3, [sp, #120]	; 0x78
    2e36:	f000 f8d7 	bl	2fe8 <_svfiprintf_r>
    2e3a:	1c43      	adds	r3, r0, #1
    2e3c:	da01      	bge.n	2e42 <_vsniprintf_r+0x4a>
    2e3e:	238b      	movs	r3, #139	; 0x8b
    2e40:	602b      	str	r3, [r5, #0]
    2e42:	2c00      	cmp	r4, #0
    2e44:	d0e3      	beq.n	2e0e <_vsniprintf_r+0x16>
    2e46:	2300      	movs	r3, #0
    2e48:	9a00      	ldr	r2, [sp, #0]
    2e4a:	7013      	strb	r3, [r2, #0]
    2e4c:	e7df      	b.n	2e0e <_vsniprintf_r+0x16>
	...

00002e50 <vsniprintf>:
    2e50:	b507      	push	{r0, r1, r2, lr}
    2e52:	9300      	str	r3, [sp, #0]
    2e54:	0013      	movs	r3, r2
    2e56:	000a      	movs	r2, r1
    2e58:	0001      	movs	r1, r0
    2e5a:	4802      	ldr	r0, [pc, #8]	; (2e64 <vsniprintf+0x14>)
    2e5c:	6800      	ldr	r0, [r0, #0]
    2e5e:	f7ff ffcb 	bl	2df8 <_vsniprintf_r>
    2e62:	bd0e      	pop	{r1, r2, r3, pc}
    2e64:	20000000 	.word	0x20000000

00002e68 <_malloc_r>:
    2e68:	2303      	movs	r3, #3
    2e6a:	b570      	push	{r4, r5, r6, lr}
    2e6c:	1ccd      	adds	r5, r1, #3
    2e6e:	439d      	bics	r5, r3
    2e70:	3508      	adds	r5, #8
    2e72:	0006      	movs	r6, r0
    2e74:	2d0c      	cmp	r5, #12
    2e76:	d21e      	bcs.n	2eb6 <_malloc_r+0x4e>
    2e78:	250c      	movs	r5, #12
    2e7a:	42a9      	cmp	r1, r5
    2e7c:	d81d      	bhi.n	2eba <_malloc_r+0x52>
    2e7e:	0030      	movs	r0, r6
    2e80:	f000 fb76 	bl	3570 <__malloc_lock>
    2e84:	4a25      	ldr	r2, [pc, #148]	; (2f1c <_malloc_r+0xb4>)
    2e86:	6814      	ldr	r4, [r2, #0]
    2e88:	0021      	movs	r1, r4
    2e8a:	2900      	cmp	r1, #0
    2e8c:	d119      	bne.n	2ec2 <_malloc_r+0x5a>
    2e8e:	4c24      	ldr	r4, [pc, #144]	; (2f20 <_malloc_r+0xb8>)
    2e90:	6823      	ldr	r3, [r4, #0]
    2e92:	2b00      	cmp	r3, #0
    2e94:	d103      	bne.n	2e9e <_malloc_r+0x36>
    2e96:	0030      	movs	r0, r6
    2e98:	f000 fb32 	bl	3500 <_sbrk_r>
    2e9c:	6020      	str	r0, [r4, #0]
    2e9e:	0029      	movs	r1, r5
    2ea0:	0030      	movs	r0, r6
    2ea2:	f000 fb2d 	bl	3500 <_sbrk_r>
    2ea6:	1c43      	adds	r3, r0, #1
    2ea8:	d12c      	bne.n	2f04 <_malloc_r+0x9c>
    2eaa:	230c      	movs	r3, #12
    2eac:	0030      	movs	r0, r6
    2eae:	6033      	str	r3, [r6, #0]
    2eb0:	f000 fb5f 	bl	3572 <__malloc_unlock>
    2eb4:	e003      	b.n	2ebe <_malloc_r+0x56>
    2eb6:	2d00      	cmp	r5, #0
    2eb8:	dadf      	bge.n	2e7a <_malloc_r+0x12>
    2eba:	230c      	movs	r3, #12
    2ebc:	6033      	str	r3, [r6, #0]
    2ebe:	2000      	movs	r0, #0
    2ec0:	bd70      	pop	{r4, r5, r6, pc}
    2ec2:	680b      	ldr	r3, [r1, #0]
    2ec4:	1b5b      	subs	r3, r3, r5
    2ec6:	d41a      	bmi.n	2efe <_malloc_r+0x96>
    2ec8:	2b0b      	cmp	r3, #11
    2eca:	d903      	bls.n	2ed4 <_malloc_r+0x6c>
    2ecc:	600b      	str	r3, [r1, #0]
    2ece:	18cc      	adds	r4, r1, r3
    2ed0:	6025      	str	r5, [r4, #0]
    2ed2:	e003      	b.n	2edc <_malloc_r+0x74>
    2ed4:	428c      	cmp	r4, r1
    2ed6:	d10e      	bne.n	2ef6 <_malloc_r+0x8e>
    2ed8:	6863      	ldr	r3, [r4, #4]
    2eda:	6013      	str	r3, [r2, #0]
    2edc:	0030      	movs	r0, r6
    2ede:	f000 fb48 	bl	3572 <__malloc_unlock>
    2ee2:	0020      	movs	r0, r4
    2ee4:	2207      	movs	r2, #7
    2ee6:	300b      	adds	r0, #11
    2ee8:	1d23      	adds	r3, r4, #4
    2eea:	4390      	bics	r0, r2
    2eec:	1ac3      	subs	r3, r0, r3
    2eee:	d0e7      	beq.n	2ec0 <_malloc_r+0x58>
    2ef0:	425a      	negs	r2, r3
    2ef2:	50e2      	str	r2, [r4, r3]
    2ef4:	e7e4      	b.n	2ec0 <_malloc_r+0x58>
    2ef6:	684b      	ldr	r3, [r1, #4]
    2ef8:	6063      	str	r3, [r4, #4]
    2efa:	000c      	movs	r4, r1
    2efc:	e7ee      	b.n	2edc <_malloc_r+0x74>
    2efe:	000c      	movs	r4, r1
    2f00:	6849      	ldr	r1, [r1, #4]
    2f02:	e7c2      	b.n	2e8a <_malloc_r+0x22>
    2f04:	2303      	movs	r3, #3
    2f06:	1cc4      	adds	r4, r0, #3
    2f08:	439c      	bics	r4, r3
    2f0a:	42a0      	cmp	r0, r4
    2f0c:	d0e0      	beq.n	2ed0 <_malloc_r+0x68>
    2f0e:	1a21      	subs	r1, r4, r0
    2f10:	0030      	movs	r0, r6
    2f12:	f000 faf5 	bl	3500 <_sbrk_r>
    2f16:	1c43      	adds	r3, r0, #1
    2f18:	d1da      	bne.n	2ed0 <_malloc_r+0x68>
    2f1a:	e7c6      	b.n	2eaa <_malloc_r+0x42>
    2f1c:	20000154 	.word	0x20000154
    2f20:	20000158 	.word	0x20000158

00002f24 <__ssputs_r>:
    2f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f26:	688e      	ldr	r6, [r1, #8]
    2f28:	b085      	sub	sp, #20
    2f2a:	0007      	movs	r7, r0
    2f2c:	000c      	movs	r4, r1
    2f2e:	9203      	str	r2, [sp, #12]
    2f30:	9301      	str	r3, [sp, #4]
    2f32:	429e      	cmp	r6, r3
    2f34:	d839      	bhi.n	2faa <__ssputs_r+0x86>
    2f36:	2390      	movs	r3, #144	; 0x90
    2f38:	898a      	ldrh	r2, [r1, #12]
    2f3a:	00db      	lsls	r3, r3, #3
    2f3c:	421a      	tst	r2, r3
    2f3e:	d034      	beq.n	2faa <__ssputs_r+0x86>
    2f40:	2503      	movs	r5, #3
    2f42:	6909      	ldr	r1, [r1, #16]
    2f44:	6823      	ldr	r3, [r4, #0]
    2f46:	1a5b      	subs	r3, r3, r1
    2f48:	9302      	str	r3, [sp, #8]
    2f4a:	6963      	ldr	r3, [r4, #20]
    2f4c:	9802      	ldr	r0, [sp, #8]
    2f4e:	435d      	muls	r5, r3
    2f50:	0feb      	lsrs	r3, r5, #31
    2f52:	195d      	adds	r5, r3, r5
    2f54:	9b01      	ldr	r3, [sp, #4]
    2f56:	106d      	asrs	r5, r5, #1
    2f58:	3301      	adds	r3, #1
    2f5a:	181b      	adds	r3, r3, r0
    2f5c:	42ab      	cmp	r3, r5
    2f5e:	d900      	bls.n	2f62 <__ssputs_r+0x3e>
    2f60:	001d      	movs	r5, r3
    2f62:	0553      	lsls	r3, r2, #21
    2f64:	d532      	bpl.n	2fcc <__ssputs_r+0xa8>
    2f66:	0029      	movs	r1, r5
    2f68:	0038      	movs	r0, r7
    2f6a:	f7ff ff7d 	bl	2e68 <_malloc_r>
    2f6e:	1e06      	subs	r6, r0, #0
    2f70:	d109      	bne.n	2f86 <__ssputs_r+0x62>
    2f72:	230c      	movs	r3, #12
    2f74:	603b      	str	r3, [r7, #0]
    2f76:	2340      	movs	r3, #64	; 0x40
    2f78:	2001      	movs	r0, #1
    2f7a:	89a2      	ldrh	r2, [r4, #12]
    2f7c:	4240      	negs	r0, r0
    2f7e:	4313      	orrs	r3, r2
    2f80:	81a3      	strh	r3, [r4, #12]
    2f82:	b005      	add	sp, #20
    2f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    2f86:	9a02      	ldr	r2, [sp, #8]
    2f88:	6921      	ldr	r1, [r4, #16]
    2f8a:	f000 fad6 	bl	353a <memcpy>
    2f8e:	89a3      	ldrh	r3, [r4, #12]
    2f90:	4a14      	ldr	r2, [pc, #80]	; (2fe4 <__ssputs_r+0xc0>)
    2f92:	401a      	ands	r2, r3
    2f94:	2380      	movs	r3, #128	; 0x80
    2f96:	4313      	orrs	r3, r2
    2f98:	81a3      	strh	r3, [r4, #12]
    2f9a:	9b02      	ldr	r3, [sp, #8]
    2f9c:	6126      	str	r6, [r4, #16]
    2f9e:	18f6      	adds	r6, r6, r3
    2fa0:	6026      	str	r6, [r4, #0]
    2fa2:	6165      	str	r5, [r4, #20]
    2fa4:	9e01      	ldr	r6, [sp, #4]
    2fa6:	1aed      	subs	r5, r5, r3
    2fa8:	60a5      	str	r5, [r4, #8]
    2faa:	9b01      	ldr	r3, [sp, #4]
    2fac:	42b3      	cmp	r3, r6
    2fae:	d200      	bcs.n	2fb2 <__ssputs_r+0x8e>
    2fb0:	001e      	movs	r6, r3
    2fb2:	0032      	movs	r2, r6
    2fb4:	9903      	ldr	r1, [sp, #12]
    2fb6:	6820      	ldr	r0, [r4, #0]
    2fb8:	f000 fac8 	bl	354c <memmove>
    2fbc:	68a3      	ldr	r3, [r4, #8]
    2fbe:	2000      	movs	r0, #0
    2fc0:	1b9b      	subs	r3, r3, r6
    2fc2:	60a3      	str	r3, [r4, #8]
    2fc4:	6823      	ldr	r3, [r4, #0]
    2fc6:	199e      	adds	r6, r3, r6
    2fc8:	6026      	str	r6, [r4, #0]
    2fca:	e7da      	b.n	2f82 <__ssputs_r+0x5e>
    2fcc:	002a      	movs	r2, r5
    2fce:	0038      	movs	r0, r7
    2fd0:	f000 fb1a 	bl	3608 <_realloc_r>
    2fd4:	1e06      	subs	r6, r0, #0
    2fd6:	d1e0      	bne.n	2f9a <__ssputs_r+0x76>
    2fd8:	6921      	ldr	r1, [r4, #16]
    2fda:	0038      	movs	r0, r7
    2fdc:	f000 faca 	bl	3574 <_free_r>
    2fe0:	e7c7      	b.n	2f72 <__ssputs_r+0x4e>
    2fe2:	46c0      	nop			; (mov r8, r8)
    2fe4:	fffffb7f 	.word	0xfffffb7f

00002fe8 <_svfiprintf_r>:
    2fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
    2fea:	b09f      	sub	sp, #124	; 0x7c
    2fec:	9002      	str	r0, [sp, #8]
    2fee:	9305      	str	r3, [sp, #20]
    2ff0:	898b      	ldrh	r3, [r1, #12]
    2ff2:	000f      	movs	r7, r1
    2ff4:	0016      	movs	r6, r2
    2ff6:	061b      	lsls	r3, r3, #24
    2ff8:	d511      	bpl.n	301e <_svfiprintf_r+0x36>
    2ffa:	690b      	ldr	r3, [r1, #16]
    2ffc:	2b00      	cmp	r3, #0
    2ffe:	d10e      	bne.n	301e <_svfiprintf_r+0x36>
    3000:	2140      	movs	r1, #64	; 0x40
    3002:	f7ff ff31 	bl	2e68 <_malloc_r>
    3006:	6038      	str	r0, [r7, #0]
    3008:	6138      	str	r0, [r7, #16]
    300a:	2800      	cmp	r0, #0
    300c:	d105      	bne.n	301a <_svfiprintf_r+0x32>
    300e:	230c      	movs	r3, #12
    3010:	9a02      	ldr	r2, [sp, #8]
    3012:	3801      	subs	r0, #1
    3014:	6013      	str	r3, [r2, #0]
    3016:	b01f      	add	sp, #124	; 0x7c
    3018:	bdf0      	pop	{r4, r5, r6, r7, pc}
    301a:	2340      	movs	r3, #64	; 0x40
    301c:	617b      	str	r3, [r7, #20]
    301e:	2300      	movs	r3, #0
    3020:	ad06      	add	r5, sp, #24
    3022:	616b      	str	r3, [r5, #20]
    3024:	3320      	adds	r3, #32
    3026:	766b      	strb	r3, [r5, #25]
    3028:	3310      	adds	r3, #16
    302a:	76ab      	strb	r3, [r5, #26]
    302c:	0034      	movs	r4, r6
    302e:	7823      	ldrb	r3, [r4, #0]
    3030:	2b00      	cmp	r3, #0
    3032:	d147      	bne.n	30c4 <_svfiprintf_r+0xdc>
    3034:	1ba3      	subs	r3, r4, r6
    3036:	9304      	str	r3, [sp, #16]
    3038:	d00d      	beq.n	3056 <_svfiprintf_r+0x6e>
    303a:	1ba3      	subs	r3, r4, r6
    303c:	0032      	movs	r2, r6
    303e:	0039      	movs	r1, r7
    3040:	9802      	ldr	r0, [sp, #8]
    3042:	f7ff ff6f 	bl	2f24 <__ssputs_r>
    3046:	1c43      	adds	r3, r0, #1
    3048:	d100      	bne.n	304c <_svfiprintf_r+0x64>
    304a:	e0b5      	b.n	31b8 <_svfiprintf_r+0x1d0>
    304c:	696a      	ldr	r2, [r5, #20]
    304e:	9b04      	ldr	r3, [sp, #16]
    3050:	4694      	mov	ip, r2
    3052:	4463      	add	r3, ip
    3054:	616b      	str	r3, [r5, #20]
    3056:	7823      	ldrb	r3, [r4, #0]
    3058:	2b00      	cmp	r3, #0
    305a:	d100      	bne.n	305e <_svfiprintf_r+0x76>
    305c:	e0ac      	b.n	31b8 <_svfiprintf_r+0x1d0>
    305e:	2201      	movs	r2, #1
    3060:	2300      	movs	r3, #0
    3062:	4252      	negs	r2, r2
    3064:	606a      	str	r2, [r5, #4]
    3066:	a902      	add	r1, sp, #8
    3068:	3254      	adds	r2, #84	; 0x54
    306a:	1852      	adds	r2, r2, r1
    306c:	3401      	adds	r4, #1
    306e:	602b      	str	r3, [r5, #0]
    3070:	60eb      	str	r3, [r5, #12]
    3072:	60ab      	str	r3, [r5, #8]
    3074:	7013      	strb	r3, [r2, #0]
    3076:	65ab      	str	r3, [r5, #88]	; 0x58
    3078:	4e58      	ldr	r6, [pc, #352]	; (31dc <_svfiprintf_r+0x1f4>)
    307a:	2205      	movs	r2, #5
    307c:	7821      	ldrb	r1, [r4, #0]
    307e:	0030      	movs	r0, r6
    3080:	f000 fa50 	bl	3524 <memchr>
    3084:	1c62      	adds	r2, r4, #1
    3086:	2800      	cmp	r0, #0
    3088:	d120      	bne.n	30cc <_svfiprintf_r+0xe4>
    308a:	6829      	ldr	r1, [r5, #0]
    308c:	06cb      	lsls	r3, r1, #27
    308e:	d504      	bpl.n	309a <_svfiprintf_r+0xb2>
    3090:	2353      	movs	r3, #83	; 0x53
    3092:	ae02      	add	r6, sp, #8
    3094:	3020      	adds	r0, #32
    3096:	199b      	adds	r3, r3, r6
    3098:	7018      	strb	r0, [r3, #0]
    309a:	070b      	lsls	r3, r1, #28
    309c:	d504      	bpl.n	30a8 <_svfiprintf_r+0xc0>
    309e:	2353      	movs	r3, #83	; 0x53
    30a0:	202b      	movs	r0, #43	; 0x2b
    30a2:	ae02      	add	r6, sp, #8
    30a4:	199b      	adds	r3, r3, r6
    30a6:	7018      	strb	r0, [r3, #0]
    30a8:	7823      	ldrb	r3, [r4, #0]
    30aa:	2b2a      	cmp	r3, #42	; 0x2a
    30ac:	d016      	beq.n	30dc <_svfiprintf_r+0xf4>
    30ae:	2000      	movs	r0, #0
    30b0:	210a      	movs	r1, #10
    30b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    30b4:	7822      	ldrb	r2, [r4, #0]
    30b6:	3a30      	subs	r2, #48	; 0x30
    30b8:	2a09      	cmp	r2, #9
    30ba:	d955      	bls.n	3168 <_svfiprintf_r+0x180>
    30bc:	2800      	cmp	r0, #0
    30be:	d015      	beq.n	30ec <_svfiprintf_r+0x104>
    30c0:	9309      	str	r3, [sp, #36]	; 0x24
    30c2:	e013      	b.n	30ec <_svfiprintf_r+0x104>
    30c4:	2b25      	cmp	r3, #37	; 0x25
    30c6:	d0b5      	beq.n	3034 <_svfiprintf_r+0x4c>
    30c8:	3401      	adds	r4, #1
    30ca:	e7b0      	b.n	302e <_svfiprintf_r+0x46>
    30cc:	2301      	movs	r3, #1
    30ce:	1b80      	subs	r0, r0, r6
    30d0:	4083      	lsls	r3, r0
    30d2:	6829      	ldr	r1, [r5, #0]
    30d4:	0014      	movs	r4, r2
    30d6:	430b      	orrs	r3, r1
    30d8:	602b      	str	r3, [r5, #0]
    30da:	e7cd      	b.n	3078 <_svfiprintf_r+0x90>
    30dc:	9b05      	ldr	r3, [sp, #20]
    30de:	1d18      	adds	r0, r3, #4
    30e0:	681b      	ldr	r3, [r3, #0]
    30e2:	9005      	str	r0, [sp, #20]
    30e4:	2b00      	cmp	r3, #0
    30e6:	db39      	blt.n	315c <_svfiprintf_r+0x174>
    30e8:	9309      	str	r3, [sp, #36]	; 0x24
    30ea:	0014      	movs	r4, r2
    30ec:	7823      	ldrb	r3, [r4, #0]
    30ee:	2b2e      	cmp	r3, #46	; 0x2e
    30f0:	d10b      	bne.n	310a <_svfiprintf_r+0x122>
    30f2:	7863      	ldrb	r3, [r4, #1]
    30f4:	1c62      	adds	r2, r4, #1
    30f6:	2b2a      	cmp	r3, #42	; 0x2a
    30f8:	d13e      	bne.n	3178 <_svfiprintf_r+0x190>
    30fa:	9b05      	ldr	r3, [sp, #20]
    30fc:	3402      	adds	r4, #2
    30fe:	1d1a      	adds	r2, r3, #4
    3100:	681b      	ldr	r3, [r3, #0]
    3102:	9205      	str	r2, [sp, #20]
    3104:	2b00      	cmp	r3, #0
    3106:	db34      	blt.n	3172 <_svfiprintf_r+0x18a>
    3108:	9307      	str	r3, [sp, #28]
    310a:	4e35      	ldr	r6, [pc, #212]	; (31e0 <_svfiprintf_r+0x1f8>)
    310c:	7821      	ldrb	r1, [r4, #0]
    310e:	2203      	movs	r2, #3
    3110:	0030      	movs	r0, r6
    3112:	f000 fa07 	bl	3524 <memchr>
    3116:	2800      	cmp	r0, #0
    3118:	d006      	beq.n	3128 <_svfiprintf_r+0x140>
    311a:	2340      	movs	r3, #64	; 0x40
    311c:	1b80      	subs	r0, r0, r6
    311e:	4083      	lsls	r3, r0
    3120:	682a      	ldr	r2, [r5, #0]
    3122:	3401      	adds	r4, #1
    3124:	4313      	orrs	r3, r2
    3126:	602b      	str	r3, [r5, #0]
    3128:	7821      	ldrb	r1, [r4, #0]
    312a:	2206      	movs	r2, #6
    312c:	482d      	ldr	r0, [pc, #180]	; (31e4 <_svfiprintf_r+0x1fc>)
    312e:	1c66      	adds	r6, r4, #1
    3130:	7629      	strb	r1, [r5, #24]
    3132:	f000 f9f7 	bl	3524 <memchr>
    3136:	2800      	cmp	r0, #0
    3138:	d046      	beq.n	31c8 <_svfiprintf_r+0x1e0>
    313a:	4b2b      	ldr	r3, [pc, #172]	; (31e8 <_svfiprintf_r+0x200>)
    313c:	2b00      	cmp	r3, #0
    313e:	d12f      	bne.n	31a0 <_svfiprintf_r+0x1b8>
    3140:	6829      	ldr	r1, [r5, #0]
    3142:	9b05      	ldr	r3, [sp, #20]
    3144:	2207      	movs	r2, #7
    3146:	05c9      	lsls	r1, r1, #23
    3148:	d528      	bpl.n	319c <_svfiprintf_r+0x1b4>
    314a:	189b      	adds	r3, r3, r2
    314c:	4393      	bics	r3, r2
    314e:	3308      	adds	r3, #8
    3150:	9305      	str	r3, [sp, #20]
    3152:	696b      	ldr	r3, [r5, #20]
    3154:	9a03      	ldr	r2, [sp, #12]
    3156:	189b      	adds	r3, r3, r2
    3158:	616b      	str	r3, [r5, #20]
    315a:	e767      	b.n	302c <_svfiprintf_r+0x44>
    315c:	425b      	negs	r3, r3
    315e:	60eb      	str	r3, [r5, #12]
    3160:	2302      	movs	r3, #2
    3162:	430b      	orrs	r3, r1
    3164:	602b      	str	r3, [r5, #0]
    3166:	e7c0      	b.n	30ea <_svfiprintf_r+0x102>
    3168:	434b      	muls	r3, r1
    316a:	3401      	adds	r4, #1
    316c:	189b      	adds	r3, r3, r2
    316e:	2001      	movs	r0, #1
    3170:	e7a0      	b.n	30b4 <_svfiprintf_r+0xcc>
    3172:	2301      	movs	r3, #1
    3174:	425b      	negs	r3, r3
    3176:	e7c7      	b.n	3108 <_svfiprintf_r+0x120>
    3178:	2300      	movs	r3, #0
    317a:	0014      	movs	r4, r2
    317c:	200a      	movs	r0, #10
    317e:	001a      	movs	r2, r3
    3180:	606b      	str	r3, [r5, #4]
    3182:	7821      	ldrb	r1, [r4, #0]
    3184:	3930      	subs	r1, #48	; 0x30
    3186:	2909      	cmp	r1, #9
    3188:	d903      	bls.n	3192 <_svfiprintf_r+0x1aa>
    318a:	2b00      	cmp	r3, #0
    318c:	d0bd      	beq.n	310a <_svfiprintf_r+0x122>
    318e:	9207      	str	r2, [sp, #28]
    3190:	e7bb      	b.n	310a <_svfiprintf_r+0x122>
    3192:	4342      	muls	r2, r0
    3194:	3401      	adds	r4, #1
    3196:	1852      	adds	r2, r2, r1
    3198:	2301      	movs	r3, #1
    319a:	e7f2      	b.n	3182 <_svfiprintf_r+0x19a>
    319c:	3307      	adds	r3, #7
    319e:	e7d5      	b.n	314c <_svfiprintf_r+0x164>
    31a0:	ab05      	add	r3, sp, #20
    31a2:	9300      	str	r3, [sp, #0]
    31a4:	003a      	movs	r2, r7
    31a6:	4b11      	ldr	r3, [pc, #68]	; (31ec <_svfiprintf_r+0x204>)
    31a8:	0029      	movs	r1, r5
    31aa:	9802      	ldr	r0, [sp, #8]
    31ac:	e000      	b.n	31b0 <_svfiprintf_r+0x1c8>
    31ae:	bf00      	nop
    31b0:	9003      	str	r0, [sp, #12]
    31b2:	9b03      	ldr	r3, [sp, #12]
    31b4:	3301      	adds	r3, #1
    31b6:	d1cc      	bne.n	3152 <_svfiprintf_r+0x16a>
    31b8:	89bb      	ldrh	r3, [r7, #12]
    31ba:	980b      	ldr	r0, [sp, #44]	; 0x2c
    31bc:	065b      	lsls	r3, r3, #25
    31be:	d400      	bmi.n	31c2 <_svfiprintf_r+0x1da>
    31c0:	e729      	b.n	3016 <_svfiprintf_r+0x2e>
    31c2:	2001      	movs	r0, #1
    31c4:	4240      	negs	r0, r0
    31c6:	e726      	b.n	3016 <_svfiprintf_r+0x2e>
    31c8:	ab05      	add	r3, sp, #20
    31ca:	9300      	str	r3, [sp, #0]
    31cc:	003a      	movs	r2, r7
    31ce:	4b07      	ldr	r3, [pc, #28]	; (31ec <_svfiprintf_r+0x204>)
    31d0:	0029      	movs	r1, r5
    31d2:	9802      	ldr	r0, [sp, #8]
    31d4:	f000 f87a 	bl	32cc <_printf_i>
    31d8:	e7ea      	b.n	31b0 <_svfiprintf_r+0x1c8>
    31da:	46c0      	nop			; (mov r8, r8)
    31dc:	00003d74 	.word	0x00003d74
    31e0:	00003d7a 	.word	0x00003d7a
    31e4:	00003d7e 	.word	0x00003d7e
    31e8:	00000000 	.word	0x00000000
    31ec:	00002f25 	.word	0x00002f25

000031f0 <_printf_common>:
    31f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31f2:	0015      	movs	r5, r2
    31f4:	9301      	str	r3, [sp, #4]
    31f6:	688a      	ldr	r2, [r1, #8]
    31f8:	690b      	ldr	r3, [r1, #16]
    31fa:	9000      	str	r0, [sp, #0]
    31fc:	000c      	movs	r4, r1
    31fe:	4293      	cmp	r3, r2
    3200:	da00      	bge.n	3204 <_printf_common+0x14>
    3202:	0013      	movs	r3, r2
    3204:	0022      	movs	r2, r4
    3206:	602b      	str	r3, [r5, #0]
    3208:	3243      	adds	r2, #67	; 0x43
    320a:	7812      	ldrb	r2, [r2, #0]
    320c:	2a00      	cmp	r2, #0
    320e:	d001      	beq.n	3214 <_printf_common+0x24>
    3210:	3301      	adds	r3, #1
    3212:	602b      	str	r3, [r5, #0]
    3214:	6823      	ldr	r3, [r4, #0]
    3216:	069b      	lsls	r3, r3, #26
    3218:	d502      	bpl.n	3220 <_printf_common+0x30>
    321a:	682b      	ldr	r3, [r5, #0]
    321c:	3302      	adds	r3, #2
    321e:	602b      	str	r3, [r5, #0]
    3220:	2706      	movs	r7, #6
    3222:	6823      	ldr	r3, [r4, #0]
    3224:	401f      	ands	r7, r3
    3226:	d027      	beq.n	3278 <_printf_common+0x88>
    3228:	0023      	movs	r3, r4
    322a:	3343      	adds	r3, #67	; 0x43
    322c:	781b      	ldrb	r3, [r3, #0]
    322e:	1e5a      	subs	r2, r3, #1
    3230:	4193      	sbcs	r3, r2
    3232:	6822      	ldr	r2, [r4, #0]
    3234:	0692      	lsls	r2, r2, #26
    3236:	d430      	bmi.n	329a <_printf_common+0xaa>
    3238:	0022      	movs	r2, r4
    323a:	9901      	ldr	r1, [sp, #4]
    323c:	3243      	adds	r2, #67	; 0x43
    323e:	9800      	ldr	r0, [sp, #0]
    3240:	9e08      	ldr	r6, [sp, #32]
    3242:	47b0      	blx	r6
    3244:	1c43      	adds	r3, r0, #1
    3246:	d025      	beq.n	3294 <_printf_common+0xa4>
    3248:	2306      	movs	r3, #6
    324a:	6820      	ldr	r0, [r4, #0]
    324c:	682a      	ldr	r2, [r5, #0]
    324e:	68e1      	ldr	r1, [r4, #12]
    3250:	4003      	ands	r3, r0
    3252:	2500      	movs	r5, #0
    3254:	2b04      	cmp	r3, #4
    3256:	d103      	bne.n	3260 <_printf_common+0x70>
    3258:	1a8d      	subs	r5, r1, r2
    325a:	43eb      	mvns	r3, r5
    325c:	17db      	asrs	r3, r3, #31
    325e:	401d      	ands	r5, r3
    3260:	68a3      	ldr	r3, [r4, #8]
    3262:	6922      	ldr	r2, [r4, #16]
    3264:	4293      	cmp	r3, r2
    3266:	dd01      	ble.n	326c <_printf_common+0x7c>
    3268:	1a9b      	subs	r3, r3, r2
    326a:	18ed      	adds	r5, r5, r3
    326c:	2700      	movs	r7, #0
    326e:	42bd      	cmp	r5, r7
    3270:	d120      	bne.n	32b4 <_printf_common+0xc4>
    3272:	2000      	movs	r0, #0
    3274:	e010      	b.n	3298 <_printf_common+0xa8>
    3276:	3701      	adds	r7, #1
    3278:	68e3      	ldr	r3, [r4, #12]
    327a:	682a      	ldr	r2, [r5, #0]
    327c:	1a9b      	subs	r3, r3, r2
    327e:	429f      	cmp	r7, r3
    3280:	dad2      	bge.n	3228 <_printf_common+0x38>
    3282:	0022      	movs	r2, r4
    3284:	2301      	movs	r3, #1
    3286:	3219      	adds	r2, #25
    3288:	9901      	ldr	r1, [sp, #4]
    328a:	9800      	ldr	r0, [sp, #0]
    328c:	9e08      	ldr	r6, [sp, #32]
    328e:	47b0      	blx	r6
    3290:	1c43      	adds	r3, r0, #1
    3292:	d1f0      	bne.n	3276 <_printf_common+0x86>
    3294:	2001      	movs	r0, #1
    3296:	4240      	negs	r0, r0
    3298:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    329a:	2030      	movs	r0, #48	; 0x30
    329c:	18e1      	adds	r1, r4, r3
    329e:	3143      	adds	r1, #67	; 0x43
    32a0:	7008      	strb	r0, [r1, #0]
    32a2:	0021      	movs	r1, r4
    32a4:	1c5a      	adds	r2, r3, #1
    32a6:	3145      	adds	r1, #69	; 0x45
    32a8:	7809      	ldrb	r1, [r1, #0]
    32aa:	18a2      	adds	r2, r4, r2
    32ac:	3243      	adds	r2, #67	; 0x43
    32ae:	3302      	adds	r3, #2
    32b0:	7011      	strb	r1, [r2, #0]
    32b2:	e7c1      	b.n	3238 <_printf_common+0x48>
    32b4:	0022      	movs	r2, r4
    32b6:	2301      	movs	r3, #1
    32b8:	321a      	adds	r2, #26
    32ba:	9901      	ldr	r1, [sp, #4]
    32bc:	9800      	ldr	r0, [sp, #0]
    32be:	9e08      	ldr	r6, [sp, #32]
    32c0:	47b0      	blx	r6
    32c2:	1c43      	adds	r3, r0, #1
    32c4:	d0e6      	beq.n	3294 <_printf_common+0xa4>
    32c6:	3701      	adds	r7, #1
    32c8:	e7d1      	b.n	326e <_printf_common+0x7e>
	...

000032cc <_printf_i>:
    32cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    32ce:	b08b      	sub	sp, #44	; 0x2c
    32d0:	9206      	str	r2, [sp, #24]
    32d2:	000a      	movs	r2, r1
    32d4:	3243      	adds	r2, #67	; 0x43
    32d6:	9307      	str	r3, [sp, #28]
    32d8:	9005      	str	r0, [sp, #20]
    32da:	9204      	str	r2, [sp, #16]
    32dc:	7e0a      	ldrb	r2, [r1, #24]
    32de:	000c      	movs	r4, r1
    32e0:	9b10      	ldr	r3, [sp, #64]	; 0x40
    32e2:	2a6e      	cmp	r2, #110	; 0x6e
    32e4:	d100      	bne.n	32e8 <_printf_i+0x1c>
    32e6:	e08f      	b.n	3408 <_printf_i+0x13c>
    32e8:	d817      	bhi.n	331a <_printf_i+0x4e>
    32ea:	2a63      	cmp	r2, #99	; 0x63
    32ec:	d02c      	beq.n	3348 <_printf_i+0x7c>
    32ee:	d808      	bhi.n	3302 <_printf_i+0x36>
    32f0:	2a00      	cmp	r2, #0
    32f2:	d100      	bne.n	32f6 <_printf_i+0x2a>
    32f4:	e099      	b.n	342a <_printf_i+0x15e>
    32f6:	2a58      	cmp	r2, #88	; 0x58
    32f8:	d054      	beq.n	33a4 <_printf_i+0xd8>
    32fa:	0026      	movs	r6, r4
    32fc:	3642      	adds	r6, #66	; 0x42
    32fe:	7032      	strb	r2, [r6, #0]
    3300:	e029      	b.n	3356 <_printf_i+0x8a>
    3302:	2a64      	cmp	r2, #100	; 0x64
    3304:	d001      	beq.n	330a <_printf_i+0x3e>
    3306:	2a69      	cmp	r2, #105	; 0x69
    3308:	d1f7      	bne.n	32fa <_printf_i+0x2e>
    330a:	6821      	ldr	r1, [r4, #0]
    330c:	681a      	ldr	r2, [r3, #0]
    330e:	0608      	lsls	r0, r1, #24
    3310:	d523      	bpl.n	335a <_printf_i+0x8e>
    3312:	1d11      	adds	r1, r2, #4
    3314:	6019      	str	r1, [r3, #0]
    3316:	6815      	ldr	r5, [r2, #0]
    3318:	e025      	b.n	3366 <_printf_i+0x9a>
    331a:	2a73      	cmp	r2, #115	; 0x73
    331c:	d100      	bne.n	3320 <_printf_i+0x54>
    331e:	e088      	b.n	3432 <_printf_i+0x166>
    3320:	d808      	bhi.n	3334 <_printf_i+0x68>
    3322:	2a6f      	cmp	r2, #111	; 0x6f
    3324:	d029      	beq.n	337a <_printf_i+0xae>
    3326:	2a70      	cmp	r2, #112	; 0x70
    3328:	d1e7      	bne.n	32fa <_printf_i+0x2e>
    332a:	2220      	movs	r2, #32
    332c:	6809      	ldr	r1, [r1, #0]
    332e:	430a      	orrs	r2, r1
    3330:	6022      	str	r2, [r4, #0]
    3332:	e003      	b.n	333c <_printf_i+0x70>
    3334:	2a75      	cmp	r2, #117	; 0x75
    3336:	d020      	beq.n	337a <_printf_i+0xae>
    3338:	2a78      	cmp	r2, #120	; 0x78
    333a:	d1de      	bne.n	32fa <_printf_i+0x2e>
    333c:	0022      	movs	r2, r4
    333e:	2178      	movs	r1, #120	; 0x78
    3340:	3245      	adds	r2, #69	; 0x45
    3342:	7011      	strb	r1, [r2, #0]
    3344:	4a6c      	ldr	r2, [pc, #432]	; (34f8 <_printf_i+0x22c>)
    3346:	e030      	b.n	33aa <_printf_i+0xde>
    3348:	000e      	movs	r6, r1
    334a:	681a      	ldr	r2, [r3, #0]
    334c:	3642      	adds	r6, #66	; 0x42
    334e:	1d11      	adds	r1, r2, #4
    3350:	6019      	str	r1, [r3, #0]
    3352:	6813      	ldr	r3, [r2, #0]
    3354:	7033      	strb	r3, [r6, #0]
    3356:	2301      	movs	r3, #1
    3358:	e079      	b.n	344e <_printf_i+0x182>
    335a:	0649      	lsls	r1, r1, #25
    335c:	d5d9      	bpl.n	3312 <_printf_i+0x46>
    335e:	1d11      	adds	r1, r2, #4
    3360:	6019      	str	r1, [r3, #0]
    3362:	2300      	movs	r3, #0
    3364:	5ed5      	ldrsh	r5, [r2, r3]
    3366:	2d00      	cmp	r5, #0
    3368:	da03      	bge.n	3372 <_printf_i+0xa6>
    336a:	232d      	movs	r3, #45	; 0x2d
    336c:	9a04      	ldr	r2, [sp, #16]
    336e:	426d      	negs	r5, r5
    3370:	7013      	strb	r3, [r2, #0]
    3372:	4b62      	ldr	r3, [pc, #392]	; (34fc <_printf_i+0x230>)
    3374:	270a      	movs	r7, #10
    3376:	9303      	str	r3, [sp, #12]
    3378:	e02f      	b.n	33da <_printf_i+0x10e>
    337a:	6820      	ldr	r0, [r4, #0]
    337c:	6819      	ldr	r1, [r3, #0]
    337e:	0605      	lsls	r5, r0, #24
    3380:	d503      	bpl.n	338a <_printf_i+0xbe>
    3382:	1d08      	adds	r0, r1, #4
    3384:	6018      	str	r0, [r3, #0]
    3386:	680d      	ldr	r5, [r1, #0]
    3388:	e005      	b.n	3396 <_printf_i+0xca>
    338a:	0640      	lsls	r0, r0, #25
    338c:	d5f9      	bpl.n	3382 <_printf_i+0xb6>
    338e:	680d      	ldr	r5, [r1, #0]
    3390:	1d08      	adds	r0, r1, #4
    3392:	6018      	str	r0, [r3, #0]
    3394:	b2ad      	uxth	r5, r5
    3396:	4b59      	ldr	r3, [pc, #356]	; (34fc <_printf_i+0x230>)
    3398:	2708      	movs	r7, #8
    339a:	9303      	str	r3, [sp, #12]
    339c:	2a6f      	cmp	r2, #111	; 0x6f
    339e:	d018      	beq.n	33d2 <_printf_i+0x106>
    33a0:	270a      	movs	r7, #10
    33a2:	e016      	b.n	33d2 <_printf_i+0x106>
    33a4:	3145      	adds	r1, #69	; 0x45
    33a6:	700a      	strb	r2, [r1, #0]
    33a8:	4a54      	ldr	r2, [pc, #336]	; (34fc <_printf_i+0x230>)
    33aa:	9203      	str	r2, [sp, #12]
    33ac:	681a      	ldr	r2, [r3, #0]
    33ae:	6821      	ldr	r1, [r4, #0]
    33b0:	1d10      	adds	r0, r2, #4
    33b2:	6018      	str	r0, [r3, #0]
    33b4:	6815      	ldr	r5, [r2, #0]
    33b6:	0608      	lsls	r0, r1, #24
    33b8:	d522      	bpl.n	3400 <_printf_i+0x134>
    33ba:	07cb      	lsls	r3, r1, #31
    33bc:	d502      	bpl.n	33c4 <_printf_i+0xf8>
    33be:	2320      	movs	r3, #32
    33c0:	4319      	orrs	r1, r3
    33c2:	6021      	str	r1, [r4, #0]
    33c4:	2710      	movs	r7, #16
    33c6:	2d00      	cmp	r5, #0
    33c8:	d103      	bne.n	33d2 <_printf_i+0x106>
    33ca:	2320      	movs	r3, #32
    33cc:	6822      	ldr	r2, [r4, #0]
    33ce:	439a      	bics	r2, r3
    33d0:	6022      	str	r2, [r4, #0]
    33d2:	0023      	movs	r3, r4
    33d4:	2200      	movs	r2, #0
    33d6:	3343      	adds	r3, #67	; 0x43
    33d8:	701a      	strb	r2, [r3, #0]
    33da:	6863      	ldr	r3, [r4, #4]
    33dc:	60a3      	str	r3, [r4, #8]
    33de:	2b00      	cmp	r3, #0
    33e0:	db5c      	blt.n	349c <_printf_i+0x1d0>
    33e2:	2204      	movs	r2, #4
    33e4:	6821      	ldr	r1, [r4, #0]
    33e6:	4391      	bics	r1, r2
    33e8:	6021      	str	r1, [r4, #0]
    33ea:	2d00      	cmp	r5, #0
    33ec:	d158      	bne.n	34a0 <_printf_i+0x1d4>
    33ee:	9e04      	ldr	r6, [sp, #16]
    33f0:	2b00      	cmp	r3, #0
    33f2:	d064      	beq.n	34be <_printf_i+0x1f2>
    33f4:	0026      	movs	r6, r4
    33f6:	9b03      	ldr	r3, [sp, #12]
    33f8:	3642      	adds	r6, #66	; 0x42
    33fa:	781b      	ldrb	r3, [r3, #0]
    33fc:	7033      	strb	r3, [r6, #0]
    33fe:	e05e      	b.n	34be <_printf_i+0x1f2>
    3400:	0648      	lsls	r0, r1, #25
    3402:	d5da      	bpl.n	33ba <_printf_i+0xee>
    3404:	b2ad      	uxth	r5, r5
    3406:	e7d8      	b.n	33ba <_printf_i+0xee>
    3408:	6809      	ldr	r1, [r1, #0]
    340a:	681a      	ldr	r2, [r3, #0]
    340c:	0608      	lsls	r0, r1, #24
    340e:	d505      	bpl.n	341c <_printf_i+0x150>
    3410:	1d11      	adds	r1, r2, #4
    3412:	6019      	str	r1, [r3, #0]
    3414:	6813      	ldr	r3, [r2, #0]
    3416:	6962      	ldr	r2, [r4, #20]
    3418:	601a      	str	r2, [r3, #0]
    341a:	e006      	b.n	342a <_printf_i+0x15e>
    341c:	0649      	lsls	r1, r1, #25
    341e:	d5f7      	bpl.n	3410 <_printf_i+0x144>
    3420:	1d11      	adds	r1, r2, #4
    3422:	6019      	str	r1, [r3, #0]
    3424:	6813      	ldr	r3, [r2, #0]
    3426:	8aa2      	ldrh	r2, [r4, #20]
    3428:	801a      	strh	r2, [r3, #0]
    342a:	2300      	movs	r3, #0
    342c:	9e04      	ldr	r6, [sp, #16]
    342e:	6123      	str	r3, [r4, #16]
    3430:	e054      	b.n	34dc <_printf_i+0x210>
    3432:	681a      	ldr	r2, [r3, #0]
    3434:	1d11      	adds	r1, r2, #4
    3436:	6019      	str	r1, [r3, #0]
    3438:	6816      	ldr	r6, [r2, #0]
    343a:	2100      	movs	r1, #0
    343c:	6862      	ldr	r2, [r4, #4]
    343e:	0030      	movs	r0, r6
    3440:	f000 f870 	bl	3524 <memchr>
    3444:	2800      	cmp	r0, #0
    3446:	d001      	beq.n	344c <_printf_i+0x180>
    3448:	1b80      	subs	r0, r0, r6
    344a:	6060      	str	r0, [r4, #4]
    344c:	6863      	ldr	r3, [r4, #4]
    344e:	6123      	str	r3, [r4, #16]
    3450:	2300      	movs	r3, #0
    3452:	9a04      	ldr	r2, [sp, #16]
    3454:	7013      	strb	r3, [r2, #0]
    3456:	e041      	b.n	34dc <_printf_i+0x210>
    3458:	6923      	ldr	r3, [r4, #16]
    345a:	0032      	movs	r2, r6
    345c:	9906      	ldr	r1, [sp, #24]
    345e:	9805      	ldr	r0, [sp, #20]
    3460:	9d07      	ldr	r5, [sp, #28]
    3462:	47a8      	blx	r5
    3464:	1c43      	adds	r3, r0, #1
    3466:	d043      	beq.n	34f0 <_printf_i+0x224>
    3468:	6823      	ldr	r3, [r4, #0]
    346a:	2500      	movs	r5, #0
    346c:	079b      	lsls	r3, r3, #30
    346e:	d40f      	bmi.n	3490 <_printf_i+0x1c4>
    3470:	9b09      	ldr	r3, [sp, #36]	; 0x24
    3472:	68e0      	ldr	r0, [r4, #12]
    3474:	4298      	cmp	r0, r3
    3476:	da3d      	bge.n	34f4 <_printf_i+0x228>
    3478:	0018      	movs	r0, r3
    347a:	e03b      	b.n	34f4 <_printf_i+0x228>
    347c:	0022      	movs	r2, r4
    347e:	2301      	movs	r3, #1
    3480:	3219      	adds	r2, #25
    3482:	9906      	ldr	r1, [sp, #24]
    3484:	9805      	ldr	r0, [sp, #20]
    3486:	9e07      	ldr	r6, [sp, #28]
    3488:	47b0      	blx	r6
    348a:	1c43      	adds	r3, r0, #1
    348c:	d030      	beq.n	34f0 <_printf_i+0x224>
    348e:	3501      	adds	r5, #1
    3490:	68e3      	ldr	r3, [r4, #12]
    3492:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3494:	1a9b      	subs	r3, r3, r2
    3496:	429d      	cmp	r5, r3
    3498:	dbf0      	blt.n	347c <_printf_i+0x1b0>
    349a:	e7e9      	b.n	3470 <_printf_i+0x1a4>
    349c:	2d00      	cmp	r5, #0
    349e:	d0a9      	beq.n	33f4 <_printf_i+0x128>
    34a0:	9e04      	ldr	r6, [sp, #16]
    34a2:	0028      	movs	r0, r5
    34a4:	0039      	movs	r1, r7
    34a6:	f7fe ff99 	bl	23dc <__aeabi_uidivmod>
    34aa:	9b03      	ldr	r3, [sp, #12]
    34ac:	3e01      	subs	r6, #1
    34ae:	5c5b      	ldrb	r3, [r3, r1]
    34b0:	0028      	movs	r0, r5
    34b2:	7033      	strb	r3, [r6, #0]
    34b4:	0039      	movs	r1, r7
    34b6:	f7fe ff0b 	bl	22d0 <__udivsi3>
    34ba:	1e05      	subs	r5, r0, #0
    34bc:	d1f1      	bne.n	34a2 <_printf_i+0x1d6>
    34be:	2f08      	cmp	r7, #8
    34c0:	d109      	bne.n	34d6 <_printf_i+0x20a>
    34c2:	6823      	ldr	r3, [r4, #0]
    34c4:	07db      	lsls	r3, r3, #31
    34c6:	d506      	bpl.n	34d6 <_printf_i+0x20a>
    34c8:	6863      	ldr	r3, [r4, #4]
    34ca:	6922      	ldr	r2, [r4, #16]
    34cc:	4293      	cmp	r3, r2
    34ce:	dc02      	bgt.n	34d6 <_printf_i+0x20a>
    34d0:	2330      	movs	r3, #48	; 0x30
    34d2:	3e01      	subs	r6, #1
    34d4:	7033      	strb	r3, [r6, #0]
    34d6:	9b04      	ldr	r3, [sp, #16]
    34d8:	1b9b      	subs	r3, r3, r6
    34da:	6123      	str	r3, [r4, #16]
    34dc:	9b07      	ldr	r3, [sp, #28]
    34de:	aa09      	add	r2, sp, #36	; 0x24
    34e0:	9300      	str	r3, [sp, #0]
    34e2:	0021      	movs	r1, r4
    34e4:	9b06      	ldr	r3, [sp, #24]
    34e6:	9805      	ldr	r0, [sp, #20]
    34e8:	f7ff fe82 	bl	31f0 <_printf_common>
    34ec:	1c43      	adds	r3, r0, #1
    34ee:	d1b3      	bne.n	3458 <_printf_i+0x18c>
    34f0:	2001      	movs	r0, #1
    34f2:	4240      	negs	r0, r0
    34f4:	b00b      	add	sp, #44	; 0x2c
    34f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    34f8:	00003d96 	.word	0x00003d96
    34fc:	00003d85 	.word	0x00003d85

00003500 <_sbrk_r>:
    3500:	2300      	movs	r3, #0
    3502:	b570      	push	{r4, r5, r6, lr}
    3504:	4c06      	ldr	r4, [pc, #24]	; (3520 <_sbrk_r+0x20>)
    3506:	0005      	movs	r5, r0
    3508:	0008      	movs	r0, r1
    350a:	6023      	str	r3, [r4, #0]
    350c:	f7fd f9ac 	bl	868 <_sbrk>
    3510:	1c43      	adds	r3, r0, #1
    3512:	d103      	bne.n	351c <_sbrk_r+0x1c>
    3514:	6823      	ldr	r3, [r4, #0]
    3516:	2b00      	cmp	r3, #0
    3518:	d000      	beq.n	351c <_sbrk_r+0x1c>
    351a:	602b      	str	r3, [r5, #0]
    351c:	bd70      	pop	{r4, r5, r6, pc}
    351e:	46c0      	nop			; (mov r8, r8)
    3520:	20000188 	.word	0x20000188

00003524 <memchr>:
    3524:	b2c9      	uxtb	r1, r1
    3526:	1882      	adds	r2, r0, r2
    3528:	4290      	cmp	r0, r2
    352a:	d101      	bne.n	3530 <memchr+0xc>
    352c:	2000      	movs	r0, #0
    352e:	4770      	bx	lr
    3530:	7803      	ldrb	r3, [r0, #0]
    3532:	428b      	cmp	r3, r1
    3534:	d0fb      	beq.n	352e <memchr+0xa>
    3536:	3001      	adds	r0, #1
    3538:	e7f6      	b.n	3528 <memchr+0x4>

0000353a <memcpy>:
    353a:	2300      	movs	r3, #0
    353c:	b510      	push	{r4, lr}
    353e:	429a      	cmp	r2, r3
    3540:	d100      	bne.n	3544 <memcpy+0xa>
    3542:	bd10      	pop	{r4, pc}
    3544:	5ccc      	ldrb	r4, [r1, r3]
    3546:	54c4      	strb	r4, [r0, r3]
    3548:	3301      	adds	r3, #1
    354a:	e7f8      	b.n	353e <memcpy+0x4>

0000354c <memmove>:
    354c:	b510      	push	{r4, lr}
    354e:	4288      	cmp	r0, r1
    3550:	d902      	bls.n	3558 <memmove+0xc>
    3552:	188b      	adds	r3, r1, r2
    3554:	4298      	cmp	r0, r3
    3556:	d308      	bcc.n	356a <memmove+0x1e>
    3558:	2300      	movs	r3, #0
    355a:	429a      	cmp	r2, r3
    355c:	d007      	beq.n	356e <memmove+0x22>
    355e:	5ccc      	ldrb	r4, [r1, r3]
    3560:	54c4      	strb	r4, [r0, r3]
    3562:	3301      	adds	r3, #1
    3564:	e7f9      	b.n	355a <memmove+0xe>
    3566:	5c8b      	ldrb	r3, [r1, r2]
    3568:	5483      	strb	r3, [r0, r2]
    356a:	3a01      	subs	r2, #1
    356c:	d2fb      	bcs.n	3566 <memmove+0x1a>
    356e:	bd10      	pop	{r4, pc}

00003570 <__malloc_lock>:
    3570:	4770      	bx	lr

00003572 <__malloc_unlock>:
    3572:	4770      	bx	lr

00003574 <_free_r>:
    3574:	b570      	push	{r4, r5, r6, lr}
    3576:	0005      	movs	r5, r0
    3578:	2900      	cmp	r1, #0
    357a:	d010      	beq.n	359e <_free_r+0x2a>
    357c:	1f0c      	subs	r4, r1, #4
    357e:	6823      	ldr	r3, [r4, #0]
    3580:	2b00      	cmp	r3, #0
    3582:	da00      	bge.n	3586 <_free_r+0x12>
    3584:	18e4      	adds	r4, r4, r3
    3586:	0028      	movs	r0, r5
    3588:	f7ff fff2 	bl	3570 <__malloc_lock>
    358c:	4a1d      	ldr	r2, [pc, #116]	; (3604 <_free_r+0x90>)
    358e:	6813      	ldr	r3, [r2, #0]
    3590:	2b00      	cmp	r3, #0
    3592:	d105      	bne.n	35a0 <_free_r+0x2c>
    3594:	6063      	str	r3, [r4, #4]
    3596:	6014      	str	r4, [r2, #0]
    3598:	0028      	movs	r0, r5
    359a:	f7ff ffea 	bl	3572 <__malloc_unlock>
    359e:	bd70      	pop	{r4, r5, r6, pc}
    35a0:	42a3      	cmp	r3, r4
    35a2:	d909      	bls.n	35b8 <_free_r+0x44>
    35a4:	6821      	ldr	r1, [r4, #0]
    35a6:	1860      	adds	r0, r4, r1
    35a8:	4283      	cmp	r3, r0
    35aa:	d1f3      	bne.n	3594 <_free_r+0x20>
    35ac:	6818      	ldr	r0, [r3, #0]
    35ae:	685b      	ldr	r3, [r3, #4]
    35b0:	1841      	adds	r1, r0, r1
    35b2:	6021      	str	r1, [r4, #0]
    35b4:	e7ee      	b.n	3594 <_free_r+0x20>
    35b6:	0013      	movs	r3, r2
    35b8:	685a      	ldr	r2, [r3, #4]
    35ba:	2a00      	cmp	r2, #0
    35bc:	d001      	beq.n	35c2 <_free_r+0x4e>
    35be:	42a2      	cmp	r2, r4
    35c0:	d9f9      	bls.n	35b6 <_free_r+0x42>
    35c2:	6819      	ldr	r1, [r3, #0]
    35c4:	1858      	adds	r0, r3, r1
    35c6:	42a0      	cmp	r0, r4
    35c8:	d10b      	bne.n	35e2 <_free_r+0x6e>
    35ca:	6820      	ldr	r0, [r4, #0]
    35cc:	1809      	adds	r1, r1, r0
    35ce:	1858      	adds	r0, r3, r1
    35d0:	6019      	str	r1, [r3, #0]
    35d2:	4282      	cmp	r2, r0
    35d4:	d1e0      	bne.n	3598 <_free_r+0x24>
    35d6:	6810      	ldr	r0, [r2, #0]
    35d8:	6852      	ldr	r2, [r2, #4]
    35da:	1841      	adds	r1, r0, r1
    35dc:	6019      	str	r1, [r3, #0]
    35de:	605a      	str	r2, [r3, #4]
    35e0:	e7da      	b.n	3598 <_free_r+0x24>
    35e2:	42a0      	cmp	r0, r4
    35e4:	d902      	bls.n	35ec <_free_r+0x78>
    35e6:	230c      	movs	r3, #12
    35e8:	602b      	str	r3, [r5, #0]
    35ea:	e7d5      	b.n	3598 <_free_r+0x24>
    35ec:	6821      	ldr	r1, [r4, #0]
    35ee:	1860      	adds	r0, r4, r1
    35f0:	4282      	cmp	r2, r0
    35f2:	d103      	bne.n	35fc <_free_r+0x88>
    35f4:	6810      	ldr	r0, [r2, #0]
    35f6:	6852      	ldr	r2, [r2, #4]
    35f8:	1841      	adds	r1, r0, r1
    35fa:	6021      	str	r1, [r4, #0]
    35fc:	6062      	str	r2, [r4, #4]
    35fe:	605c      	str	r4, [r3, #4]
    3600:	e7ca      	b.n	3598 <_free_r+0x24>
    3602:	46c0      	nop			; (mov r8, r8)
    3604:	20000154 	.word	0x20000154

00003608 <_realloc_r>:
    3608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    360a:	0007      	movs	r7, r0
    360c:	000d      	movs	r5, r1
    360e:	0016      	movs	r6, r2
    3610:	2900      	cmp	r1, #0
    3612:	d105      	bne.n	3620 <_realloc_r+0x18>
    3614:	0011      	movs	r1, r2
    3616:	f7ff fc27 	bl	2e68 <_malloc_r>
    361a:	0004      	movs	r4, r0
    361c:	0020      	movs	r0, r4
    361e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3620:	2a00      	cmp	r2, #0
    3622:	d103      	bne.n	362c <_realloc_r+0x24>
    3624:	f7ff ffa6 	bl	3574 <_free_r>
    3628:	0034      	movs	r4, r6
    362a:	e7f7      	b.n	361c <_realloc_r+0x14>
    362c:	f000 f812 	bl	3654 <_malloc_usable_size_r>
    3630:	002c      	movs	r4, r5
    3632:	4286      	cmp	r6, r0
    3634:	d9f2      	bls.n	361c <_realloc_r+0x14>
    3636:	0031      	movs	r1, r6
    3638:	0038      	movs	r0, r7
    363a:	f7ff fc15 	bl	2e68 <_malloc_r>
    363e:	1e04      	subs	r4, r0, #0
    3640:	d0ec      	beq.n	361c <_realloc_r+0x14>
    3642:	0029      	movs	r1, r5
    3644:	0032      	movs	r2, r6
    3646:	f7ff ff78 	bl	353a <memcpy>
    364a:	0029      	movs	r1, r5
    364c:	0038      	movs	r0, r7
    364e:	f7ff ff91 	bl	3574 <_free_r>
    3652:	e7e3      	b.n	361c <_realloc_r+0x14>

00003654 <_malloc_usable_size_r>:
    3654:	1f0b      	subs	r3, r1, #4
    3656:	681b      	ldr	r3, [r3, #0]
    3658:	1f18      	subs	r0, r3, #4
    365a:	2b00      	cmp	r3, #0
    365c:	da01      	bge.n	3662 <_malloc_usable_size_r+0xe>
    365e:	580b      	ldr	r3, [r1, r0]
    3660:	18c0      	adds	r0, r0, r3
    3662:	4770      	bx	lr
    3664:	682f2e2e 	.word	0x682f2e2e
    3668:	732f6c61 	.word	0x732f6c61
    366c:	682f6372 	.word	0x682f6372
    3670:	695f6c61 	.word	0x695f6c61
    3674:	6d5f6332 	.word	0x6d5f6332
    3678:	6e79735f 	.word	0x6e79735f
    367c:	00632e63 	.word	0x00632e63
    3680:	682f2e2e 	.word	0x682f2e2e
    3684:	732f6c61 	.word	0x732f6c61
    3688:	682f6372 	.word	0x682f6372
    368c:	695f6c61 	.word	0x695f6c61
    3690:	00632e6f 	.word	0x00632e6f
    3694:	682f2e2e 	.word	0x682f2e2e
    3698:	732f6c61 	.word	0x732f6c61
    369c:	682f6372 	.word	0x682f6372
    36a0:	755f6c61 	.word	0x755f6c61
    36a4:	74726173 	.word	0x74726173
    36a8:	6e79735f 	.word	0x6e79735f
    36ac:	00632e63 	.word	0x00632e63

000036b0 <_map>:
    36b0:	0000000c 00000018 682f2e2e 652f6c70     ........../hpl/e
    36c0:	682f6369 655f6c70 632e6369 00000000     ic/hpl_eic.c....

000036d0 <_usarts>:
    36d0:	00000005 40100004 00030000 0000f62b     .......@....+...
    36e0:	00000000                                ....

000036e4 <_i2cms>:
    36e4:	00000001 00200014 00000100 0000e6e5     ...... .........
    36f4:	00d70000 02dc8000                       ........

000036fc <_i2css>:
	...

0000370c <sercomspi_regs>:
	...
    3720:	682f2e2e 732f6c70 6f637265 70682f6d     ../hpl/sercom/hp
    3730:	65735f6c 6d6f6372 0000632e 70696843     l_sercom.c..Chip
    3740:	6d616e20 093a2065 0d0a7325 00000000      name :.%s......
    3750:	756e614d 74636166 72657275 2509203a     Manufacturer: .%
    3760:	000d0a73 65746e49 63616672 09203a65     s...Interface: .
    3770:	0d0a7325 00000000 70707553 7620796c     %s......Supply v
    3780:	61746c6f 6d206567 3a207861 30250920     oltage max : .%0
    3790:	5666322e 00000d0a 70707553 7620796c     .2fV....Supply v
    37a0:	61746c6f 6d206567 203a6e69 2e302509     oltage min: .%0.
    37b0:	0a566632 0000000d 6978614d 206d756d     2fV.....Maximum 
    37c0:	72727563 3a746e65 30250920 6d66312e     current: .%0.1fm
    37d0:	000d0a41 706d6554 74617265 20657275     A...Temperature 
    37e0:	3a78614d 2e250920 0a436631 0000000d     Max: .%.1fC.....
    37f0:	706d6554 74617265 20657275 3a6e694d     Temperature Min:
    3800:	2e250920 0a436631 0000000d 76697244      .%.1fC.....Driv
    3810:	76207265 69737265 203a6e6f 2e255609     er version: .V%.
    3820:	252e6631 0a64322e 0000000d 3250434d     1f.%.2d.....MCP2
    3830:	38303033 6166203a 64656c69 206f7420     3008: failed to 
    3840:	0d2e7325 0000000a 3270636d 38303033     %s......mcp23008
    3850:	6572203a 76696563 61635f65 61626c6c     : receive_callba
    3860:	000a6b63 3270636d 38303033 6564203a     ck..mcp23008: de
    3870:	5f79616c 000a736d 3270636d 38303033     lay_ms..mcp23008
    3880:	3269203a 6e692063 61697469 657a696c     : i2c initialize
    3890:	20736920 6c6c756e 0000000a 3270636d      is null....mcp2
    38a0:	38303033 3269203a 65645f63 20746e69     3008: i2c_deint 
    38b0:	6e207369 0a6c6c75 00000000 3270636d     is null.....mcp2
    38c0:	38303033 3269203a 65725f63 69206461     3008: i2c_read i
    38d0:	756e2073 000a6c6c 3270636d 38303033     s null..mcp23008
    38e0:	3269203a 72775f63 20657469 6e207369     : i2c_write is n
    38f0:	0a6c6c75 00000000 3270636d 38303033     ull.....mcp23008
    3900:	3269203a 6e692063 61697469 657a696c     : i2c initialize
    3910:	69616620 0a64656c 00000000 20633269      failed.....i2c 
    3920:	6e696564 66207469 656c6961 00000064     deinit failed...
    3930:	6c696166 74206465 7865206f 74756365     failed to execut
    3940:	72692065 6f722071 6e697475 00000065     e irq routine...
    3950:	20746573 206e6970 65646f6d 00000000     set pin mode....
    3960:	64616572 6e697020 646f6d20 65722065     read pin mode re
    3970:	74736967 00007265 20746573 74726f70     gister..set port
    3980:	646f6d20 00000065 64616572 74616c20      mode...read lat
    3990:	72206863 73696765 00726574 74697277     ch register.writ
    39a0:	69702065 0000006e 74697277 6c612065     e pin...write al
    39b0:	6970206c 0000736e 64616572 6c757020     l pins..read pul
    39c0:	70752d6c 67657220 65747369 00000072     l-up register...
    39d0:	20746573 206e6970 6c6c7570 0070752d     set pin pull-up.
    39e0:	20746573 74726f70 6c757020 70752d6c     set port pull-up
    39f0:	00000000 64616572 706e6920 70207475     ....read input p
    3a00:	72616c6f 00797469 20746573 206e6970     olarity.set pin 
    3a10:	75706e69 6f702074 6972616c 00007974     input polarity..
    3a20:	64616572 6e697020 6c6f7020 74697261     read pin polarit
    3a30:	00000079 64616572 746e6920 75727265     y...read interru
    3a40:	00007470 20746573 206e6970 65746e69     pt..set pin inte
    3a50:	70757272 00000074 64616572 6e697020     rrupt...read pin
    3a60:	746e6920 75727265 73207470 75746174      interrupt statu
    3a70:	00000073 64616572 746e6920 75727265     s...read interru
    3a80:	66207470 0067616c 64616572 70786520     pt flag.read exp
    3a90:	65646e61 65722072 00000067 65746e69     ander reg...inte
    3aa0:	70757272 69702074 756f206e 74757074     rrupt pin output
    3ab0:	76656c20 00006c65 64616572 746e6920      level..read int
    3ac0:	75727265 63207470 75747061 73206572     errupt capture s
    3ad0:	75746174 00000073 20746573 65746e69     tatus...set inte
    3ae0:	70757272 69702074 756f206e 74757074     rrupt pin output
    3af0:	646f6d20 00000065 64616572 746e6920      mode...read int
    3b00:	75727265 6f207470 6863206e 65676e61     errupt on change
    3b10:	6e6f6320 6c6f7274 67657220 00000000      control reg....
    3b20:	20746573 65746e69 70757272 6f632074     set interrupt co
    3b30:	7261706d 6f6d2065 00006564 64616572     mpare mode..read
    3b40:	66656420 746c7561 6d6f6320 65726170      default compare
    3b50:	6c617620 72206575 00006765 20746573      value reg..set 
    3b60:	206e6970 61666564 20746c75 706d6f63     pin default comp
    3b70:	20657261 756c6176 00000065 64616572     are value...read
    3b80:	6e697020 66656420 746c7561 6d6f6320      pin default com
    3b90:	65726170 6c617620 73206575 75746174     pare value statu
    3ba0:	00000073 20746573 77656c73 74617220     s...set slew rat
    3bb0:	00000065 64616572 656c7320 61722077     e...read slew ra
    3bc0:	73206574 75746174 00000073 20746573     te status...set 
    3bd0:	75716573 69746e65 6f206c61 61726570     sequential opera
    3be0:	6e6f6974 646f6d20 00000065 64616572     tion mode...read
    3bf0:	71657320 636e6575 206c6169 7265706f      sequencial oper
    3c00:	6f697461 6f6d206e 73206564 75746174     ation mode statu
    3c10:	00000073 3250434d 38303033 00000000     s...MCP23008....
    3c20:	00433249 7263694d 6968636f 65542070     I2C.Microchip Te
    3c30:	6f6e6863 79676f6c 00000000 69206f6e     chnology....no i
    3c40:	7265746e 74707572 00000d0a 20633269     nterrupt....i2c 
    3c50:	74697277 61662065 64656c69 6863202c     write failed, ch
    3c60:	206b6365 20656874 20633269 72646461     eck the i2c addr
    3c70:	20737365 7720726f 6e697269 00000a67     ess or wiring...
    3c80:	3270636d 38303033 5047203a 6e692030     mcp23008: GP0 in
    3c90:	72726574 0a747075 00000000 3270636d     terrupt.....mcp2
    3ca0:	38303033 5047203a 6e692031 72726574     3008: GP1 interr
    3cb0:	0a747075 00000000 3270636d 38303033     upt.....mcp23008
    3cc0:	6c61663a 69206573 7265746e 74707572     :false interrupt
    3cd0:	000a7420 00002558 000024a8 000024a8      t..X%...$...$..
    3ce0:	000024a6 0000254a 0000254a 00002540     .$..J%..J%..@%..
    3cf0:	000024a6 0000254a 00002540 0000254a     .$..J%..@%..J%..
    3d00:	000024a6 00002550 00002550 00002550     .$..P%..P%..P%..
    3d10:	000025e0                                .%..

00003d14 <__sf_fake_stderr>:
	...

00003d34 <__sf_fake_stdin>:
	...

00003d54 <__sf_fake_stdout>:
	...
    3d74:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
    3d84:	32313000 36353433 41393837 45444342     .0123456789ABCDE
    3d94:	31300046 35343332 39383736 64636261     F.0123456789abcd
    3da4:	00006665                                ef..

00003da8 <_init>:
    3da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3daa:	46c0      	nop			; (mov r8, r8)
    3dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3dae:	bc08      	pop	{r3}
    3db0:	469e      	mov	lr, r3
    3db2:	4770      	bx	lr

00003db4 <__init_array_start>:
    3db4:	000000dd 	.word	0x000000dd

00003db8 <_fini>:
    3db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3dba:	46c0      	nop			; (mov r8, r8)
    3dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
    3dbe:	bc08      	pop	{r3}
    3dc0:	469e      	mov	lr, r3
    3dc2:	4770      	bx	lr

00003dc4 <__fini_array_start>:
    3dc4:	000000b5 	.word	0x000000b5
